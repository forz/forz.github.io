<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cache on Forz Blog</title>
    <link>/tags/cache/</link>
    <description>Recent content in cache on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Jul 2020 17:32:53 +0000</lastBuildDate><atom:link href="/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存驱逐算法:W-TinyLFU</title>
      <link>/post/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AE%97%E6%B3%95w-tinylfu/</link>
      <pubDate>Sun, 26 Jul 2020 17:32:53 +0000</pubDate>
      
      <guid>/post/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AE%97%E6%B3%95w-tinylfu/</guid>
      <description>W-TinyLFU 我们有三种常见的缓存驱逐策略： FIFO:先进先出，在这种淘汰算法中，先进入缓存的会先被淘汰。这种可谓是最简单的了，但是会导致我们命中率很低</description>
    </item>
    
    <item>
      <title>Go中如何实现高性能本地缓存</title>
      <link>/post/go%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 24 Jul 2020 18:29:28 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</guid>
      <description>前言 在大部分业务系统中，都会使用诸如 Redis、Memcached 等远程缓存，一方面可以避免自身进程内存占用过大而导致的 OOM 或 GC 问题，另一方面</description>
    </item>
    
  </channel>
</rss>
