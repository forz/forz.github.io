<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gokit on Forz Blog</title>
    <link>/tags/gokit/</link>
    <description>Recent content in Gokit on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 30 Oct 2019 14:57:53 +0000</lastBuildDate>
    
	<atom:link href="/tags/gokit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoKit使用:链路追踪Zipkin</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/</link>
      <pubDate>Wed, 30 Oct 2019 14:57:53 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/</guid>
      <description>引言 现代互联网服务通常是使用复杂的、大规模的分布式系统来实现的。这些应用程序往往是由大量的软件模块构建的，而且这些软件模块可能由不同的团队开</description>
    </item>
    
    <item>
      <title>GoKit使用:监控功能</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E7%9B%91%E6%8E%A7%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 29 Oct 2019 16:19:40 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E7%9B%91%E6%8E%A7%E5%8A%9F%E8%83%BD/</guid>
      <description>引言 目前，几乎所有的研发人员每天都在跟API打交道：后端为实现业务不停的生产API，前端为实现产品功能不停的调用API。API已经成为前端与</description>
    </item>
    
    <item>
      <title>GoKit使用:限流功能</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E9%99%90%E6%B5%81%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 28 Oct 2019 19:54:31 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E9%99%90%E6%B5%81%E5%8A%9F%E8%83%BD/</guid>
      <description>代码实现 gokit基于go包golang.org/x/time/rate内置了一种实现. 本次实现基于gokit内建的类型endpoint.M</description>
    </item>
    
    <item>
      <title>GoKit使用:日志功能</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 28 Oct 2019 17:59:10 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</guid>
      <description>引言 目前，几乎所有的软件系统都具备日志功能，通过日志我们可以在软件运行异常时定位软件遇到的问题，还原应用程序异常时的运行状态。 虽然系统上线前</description>
    </item>
    
    <item>
      <title>GoKit使用:构建REST服务</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BArest%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 28 Oct 2019 17:12:19 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BArest%E6%9C%8D%E5%8A%A1/</guid>
      <description>引言 本文将使用gokit构建一个简单的算术运算（两个整数的加减乘除运算）微服务实例，该服务将以REST方式对外暴露接口，具体要求如下： 使用g</description>
    </item>
    
    <item>
      <title>GoKit使用:服务注册与发现</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Mon, 02 Sep 2019 17:43:22 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</guid>
      <description>引言 在微服务架构下，原单体服务被拆分为多个微服务独立部署，客户端就无法知晓服务的具体位置；而且服务数量太多，维护如此多的服务地址，运维人员也</description>
    </item>
    
  </channel>
</rss>