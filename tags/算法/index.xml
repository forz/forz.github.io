<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Forz Blog</title>
    <link>/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Nov 2021 16:30:26 +0000</lastBuildDate><atom:link href="/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式CAP和ACID和BASE理论</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8Fcap%E5%92%8Cacid%E5%92%8Cbase%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 24 Nov 2021 16:30:26 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8Fcap%E5%92%8Cacid%E5%92%8Cbase%E7%90%86%E8%AE%BA/</guid>
      <description>CAP 定义 CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partit</description>
    </item>
    
    <item>
      <title>BBR自适应限流算法实现</title>
      <link>/post/bbr%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 14 Nov 2021 17:28:43 +0000</pubDate>
      
      <guid>/post/bbr%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>TCP-BBR 算法 BBR（Bottleneck Bandwidth and Round-trip propagation time）是 Google 近年来提出的拥塞控制算法，诞生后大幅度提高了在高延迟等情况下网络传输的吞吐。从命名就</description>
    </item>
    
    <item>
      <title>哈希算法与哈希表介绍</title>
      <link>/post/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 11 Sep 2021 15:39:18 +0000</pubDate>
      
      <guid>/post/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>哈希算法 下面简单介绍下几种比较常用的加密哈希算法： MD5 MD5 即 Message-Digest Algorithm 5（信息-摘要算法 5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一</description>
    </item>
    
    <item>
      <title>自动dump库homles介绍</title>
      <link>/post/%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E7%9A%84%E8%87%AA%E5%8A%A8dump/</link>
      <pubDate>Tue, 08 Jun 2021 19:39:18 +0000</pubDate>
      
      <guid>/post/%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E7%9A%84%E8%87%AA%E5%8A%A8dump/</guid>
      <description>背景 Go 项目做的比较大(主要说代码多，参与人多)之后，可能会遇到类似下面这样的问题： 程序老是半夜崩，崩了以后就重启了，我也醒不来，现场早就丢了</description>
    </item>
    
    <item>
      <title>常用加密签名算法介绍</title>
      <link>/post/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 27 May 2021 18:39:40 +0000</pubDate>
      
      <guid>/post/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>对称加密算法 对称加密算法 是应用较早的加密算法，又称为 共享密钥加密算法。在 对称加密算法 中，使用的密钥只有一个，发送 和 接收 双方都使用这个密钥对数</description>
    </item>
    
    <item>
      <title>计算机网络时间同步技术原理介绍</title>
      <link>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 26 May 2021 15:45:36 +0000</pubDate>
      
      <guid>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>前言 由计算机网络系统组成的分布式系统，若想协调一致进行：IT行业的“整点开拍”、“秒杀”、“Leader选举”，通信行业的“同步组网”之类业</description>
    </item>
    
    <item>
      <title>分布式限流实现</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 21 May 2021 15:32:09 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>为什么要分布式限流 其实大多数场景下你并不需要使用集群限流，单机限流就足够了。仔细思考其实只有几种情况下可能需要使用到集群限流： 当想要配置单机</description>
    </item>
    
    <item>
      <title>backoff指数退避重试算法实现</title>
      <link>/post/backoff%E6%8C%87%E6%95%B0%E9%80%80%E9%81%BF%E9%87%8D%E8%AF%95%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 11 May 2021 10:45:40 +0000</pubDate>
      
      <guid>/post/backoff%E6%8C%87%E6%95%B0%E9%80%80%E9%81%BF%E9%87%8D%E8%AF%95%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>指数退避算法 指数退避算法是适用于网络应用的标准错误处理策略，使用这种策略时，客户端会定期重试失败的请求，并不断增加各次请求之间的延迟时间。客</description>
    </item>
    
    <item>
      <title>SRE自适应熔断算法实现</title>
      <link>/post/sre%E8%87%AA%E9%80%82%E5%BA%94%E7%86%94%E6%96%AD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 21 Mar 2021 10:36:35 +0000</pubDate>
      
      <guid>/post/sre%E8%87%AA%E9%80%82%E5%BA%94%E7%86%94%E6%96%AD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>前言 断路器(Circuit Breakers): 为了限制操作的持续时间，我们可以使用超时，超时可以防止挂起操作并保证系统可以响应。因为我们处于高度动态的环境中，</description>
    </item>
    
    <item>
      <title>P2C&#43;EWMA负载均衡算法实现</title>
      <link>/post/p2c&#43;ewma%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 24 Jan 2021 11:29:23 +0000</pubDate>
      
      <guid>/post/p2c&#43;ewma%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>动态WRR算法(权重轮询) 数据中心内部的负载均衡 在理想情况下，某个服务的负载会完全均匀地分发给所有的后端任务。在任何时刻，最忙和最不忙的节点</description>
    </item>
    
    <item>
      <title>熔断器hystrix实现</title>
      <link>/post/%E7%86%94%E6%96%AD%E5%99%A8hystrix%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 03 Nov 2019 17:13:27 +0000</pubDate>
      
      <guid>/post/%E7%86%94%E6%96%AD%E5%99%A8hystrix%E5%AE%9E%E7%8E%B0/</guid>
      <description>引言 熔断器是当依赖的服务已经出现故障时，为了保证自身服务的正常运行不再访问依赖的服务，防止雪崩效应.Hystrix断路器的工作原理是： 熔断器</description>
    </item>
    
    <item>
      <title>漏桶算法与令牌桶限流算法实现</title>
      <link>/post/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 29 Oct 2019 11:04:24 +0000</pubDate>
      
      <guid>/post/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>限流算法 在开发中我们可能会遇到接口访问频次过高，这时候就需要做流量限制，你可能是用的 Nginx 这种 Web Server 来控制也可能是用了一些流行的类库实现。在分布式</description>
    </item>
    
    <item>
      <title>从B树、B&#43;树、B*树谈到R树</title>
      <link>/post/%E4%BB%8Eb%E6%A0%91b-%E6%A0%91b-%E6%A0%91%E8%B0%88%E5%88%B0r%E6%A0%91/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:23 +0000</pubDate>
      
      <guid>/post/%E4%BB%8Eb%E6%A0%91b-%E6%A0%91b-%E6%A0%91%E8%B0%88%E5%88%B0r%E6%A0%91/</guid>
      <description>前言 动态查找树主要有：二叉查找树（Binary Search Tree），平衡二叉查找树（Balanced Binary Search Tree），红黑树(Red-Black Tree )，</description>
    </item>
    
  </channel>
</rss>
