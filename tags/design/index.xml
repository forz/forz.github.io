<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Forz Blog</title>
    <link>/tags/design/</link>
    <description>Recent content in Design on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 03 Sep 2017 18:07:34 +0000</lastBuildDate>
    
	<atom:link href="/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一种消息接收并打印的结构设计</title>
      <link>/post/%E4%B8%80%E7%A7%8D%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6%E5%B9%B6%E6%89%93%E5%8D%B0%E7%9A%84%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 03 Sep 2017 18:07:34 +0000</pubDate>
      
      <guid>/post/%E4%B8%80%E7%A7%8D%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6%E5%B9%B6%E6%89%93%E5%8D%B0%E7%9A%84%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>题目: 要求: 消息流最终会吐出全部的1〜N当然最终也会打印完所有的要求接收和打印1~N的整个过程,时间复杂度为O(N)的。 解析: 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>猫狗队列</title>
      <link>/post/%E7%8C%AB%E7%8B%97%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 16 Aug 2017 17:33:03 +0000</pubDate>
      
      <guid>/post/%E7%8C%AB%E7%8B%97%E9%98%9F%E5%88%97/</guid>
      <description>题目: 宠物、狗和猫的类如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Pet { private String type ; public Pet(String type) { this.type = type ; } public String getPetType() { return this.type ; } } public class Dog extends Pet{ public</description>
    </item>
    
    <item>
      <title>汉诺塔问题分析</title>
      <link>/post/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 16 Aug 2017 16:39:46 +0000</pubDate>
      
      <guid>/post/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>设计一个有getMin功能的栈</title>
      <link>/post/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%9C%89getmin%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/</link>
      <pubDate>Sun, 25 Jun 2017 02:21:54 +0000</pubDate>
      
      <guid>/post/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%9C%89getmin%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/</guid>
      <description>LeetCode 155. Min Stack Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. push(x) – Push element x onto stack. pop() – Removes the element on top of the stack. top() – Get the top element. getMin() – Retrieve the minimum element in the stack. Example: MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --&amp;gt; Returns -3. minStack.pop(); minStack.top(); --&amp;gt; Returns 0.</description>
    </item>
    
    <item>
      <title>设计RandomPool结构</title>
      <link>/post/%E8%AE%BE%E8%AE%A1randompool%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 24 Jun 2017 19:50:58 +0000</pubDate>
      
      <guid>/post/%E8%AE%BE%E8%AE%A1randompool%E7%BB%93%E6%9E%84/</guid>
      <description>LeetCode 380. Insert Delete GetRandom O(1) Design a data structure that supports all following operations in average O(1) time. insert(val): Inserts an item val to the set if not already present. remove(val): Removes an item val from the set if present. getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned. Example: 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>设计缓存结构</title>
      <link>/post/%E8%AE%BE%E8%AE%A1%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 24 Jun 2017 19:50:14 +0000</pubDate>
      
      <guid>/post/%E8%AE%BE%E8%AE%A1%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84/</guid>
      <description>LeetCode 146. LRU Cache Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put. get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should</description>
    </item>
    
    <item>
      <title>设计Twitter</title>
      <link>/post/%E8%AE%BE%E8%AE%A1twitter/</link>
      <pubDate>Sat, 24 Jun 2017 16:09:40 +0000</pubDate>
      
      <guid>/post/%E8%AE%BE%E8%AE%A1twitter/</guid>
      <description>LeetCode 355. Design Twitter Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user’s news feed. Your design should support the following methods: postTweet(userId, tweetId): Compose a new tweet. getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user’s news feed. Each</description>
    </item>
    
  </channel>
</rss>