<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interface on Forz</title>
    <link>http://localhost:1313/tags/interface/</link>
    <description>Recent content in interface on Forz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Aug 2019 13:21:07 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/interface/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go中的interface{}比较方法</title>
      <link>http://localhost:1313/post/go%E4%B8%AD%E7%9A%84interface-%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 26 Aug 2019 13:21:07 +0000</pubDate>
      
      <guid>http://localhost:1313/post/go%E4%B8%AD%E7%9A%84interface-%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</guid>
      <description>类型不确定 在不确定类型需要反射的时候，DeepEqual是我们不可不用的强大工具。 比如： 1 2 3 4 5 6 7 func main(){ m1:=map[string]interface{}{&amp;#34;a&amp;#34;:&amp;#34;1&amp;#34;, &amp;#34;b&amp;#34;:2, &amp;#34;c&amp;#34;:3}; m2:=map[string]interface{}{&amp;#34;a&amp;#34;:1, &amp;#34;c&amp;#34;:&amp;#34;3&amp;#34;, &amp;#34;b&amp;#34;:2}; fmt.Println(`reflect.DeepEqual(m1[&amp;#34;a&amp;#34;],m2[&amp;#34;a&amp;#34;]`,reflect.DeepEqual(m1[&amp;#34;a&amp;#34;],m2[&amp;#34;a&amp;#34;])); fmt.Println(`reflect.DeepEqual(m1[&amp;#34;b&amp;#34;],m2[&amp;#34;b&amp;#34;]`,reflect.DeepEqual(m1[&amp;#34;b&amp;#34;],m2[&amp;#34;b&amp;#34;])); } 执行结果： 1 2 3</description>
    </item>
    
    <item>
      <title>types from different packages 问题浅析</title>
      <link>http://localhost:1313/post/types-from-different-packages-%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 16 Jul 2019 14:44:54 +0000</pubDate>
      
      <guid>http://localhost:1313/post/types-from-different-packages-%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</guid>
      <description>先看一段代码: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main var X interface{} type T struct{} func F() { type T struct{} X = T{} } func G() { type T struct{} _ = X.(T) } func main() { F() G() } 我们总是可以说“来</description>
    </item>
    
  </channel>
</rss>