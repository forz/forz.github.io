<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocketmq on Forz Blog</title>
    <link>/tags/rocketmq/</link>
    <description>Recent content in rocketmq on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Apr 2020 15:43:10 +0000</lastBuildDate>
    
	<atom:link href="/tags/rocketmq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RmqClient源码分析</title>
      <link>/post/rmqclient%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 23 Apr 2020 15:43:10 +0000</pubDate>
      
      <guid>/post/rmqclient%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>前言 RmqClient是客户端各种类型的Consumer和Producer的底层类。这个类首先从NameServer获取并保存各种配置信息，</description>
    </item>
    
    <item>
      <title>PushConsumer源码分析</title>
      <link>/post/pushconsumer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 23 Apr 2020 14:42:04 +0000</pubDate>
      
      <guid>/post/pushconsumer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>整体流程 NewPushConsumer 创建pushConsumer对象.配置负载均衡策略. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39</description>
    </item>
    
    <item>
      <title>如何提高Producer的发送速度</title>
      <link>/post/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98producer%E7%9A%84%E5%8F%91%E9%80%81%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Thu, 23 Apr 2020 00:30:13 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98producer%E7%9A%84%E5%8F%91%E9%80%81%E9%80%9F%E5%BA%A6/</guid>
      <description>发送一条消息出去要经过三步，一是客户端发送请求到服务器，二是服务器处理该请求，三是服务器向客户端返回应答，一次消息的发送耗时是上述三个步骤的</description>
    </item>
    
    <item>
      <title>如何提高Consumer的处理能力</title>
      <link>/post/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98consumer%E7%9A%84%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B/</link>
      <pubDate>Wed, 22 Apr 2020 23:43:30 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98consumer%E7%9A%84%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B/</guid>
      <description>提高处理能力 当Consumer的处理速度跟不上消息的产生速度，会造成越来越多的消息积压，这个时候首先查看消费逻辑本身有没有优化空间，除此之外</description>
    </item>
    
    <item>
      <title>Broker端的消息过滤机制</title>
      <link>/post/broker%E7%AB%AF%E7%9A%84%E6%B6%88%E6%81%AF%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 22 Apr 2020 22:56:38 +0000</pubDate>
      
      <guid>/post/broker%E7%AB%AF%E7%9A%84%E6%B6%88%E6%81%AF%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</guid>
      <description>在Broker端进行消息过滤，可以减少无效消息发送到Consumer，少占用网络带宽从而提高吞吐量。Broker端有三种方式进行消息过滤。 消</description>
    </item>
    
    <item>
      <title>如何发送事务消息</title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 21 Apr 2020 17:37:34 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</guid>
      <description>事务消息 RocketMQ的事务消息，是指发送消息事件和其他事件需要同时成功或同时失败。比如银行转账，A银行的某账户要转一万元到B银行的某账户</description>
    </item>
    
    <item>
      <title>延迟消息的收发</title>
      <link>/post/%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E7%9A%84%E6%94%B6%E5%8F%91/</link>
      <pubDate>Tue, 21 Apr 2020 17:36:23 +0000</pubDate>
      
      <guid>/post/%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E7%9A%84%E6%94%B6%E5%8F%91/</guid>
      <description>延迟消息 RocketMQ支持发送延迟消息，Broker 收到这类消息后，延迟一段时间再处理，使消息在规定的一段时间后生效。 延迟消息的使用方法是</description>
    </item>
    
    <item>
      <title>如何接收顺序消息</title>
      <link>/post/%E5%A6%82%E4%BD%95%E6%8E%A5%E6%94%B6%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 21 Apr 2020 17:30:32 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E6%8E%A5%E6%94%B6%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/</guid>
      <description>顺序消息 顺序消息是指消息的消费顺序和产生顺序相同，在有些业务逻辑下，必须保证顺序。比如订单的生成、付款、发货，这3个消息必须按顺序处理才行。</description>
    </item>
    
    <item>
      <title>Rocketmq中的offset</title>
      <link>/post/rocketmq%E4%B8%AD%E7%9A%84offset/</link>
      <pubDate>Tue, 21 Apr 2020 14:22:06 +0000</pubDate>
      
      <guid>/post/rocketmq%E4%B8%AD%E7%9A%84offset/</guid>
      <description>实际运行中的系统，难免会遇到重新消费某条消息、跳过一段时间内的消息等情况。这些异常情况的处理，都和Offset有关。 首先来明确一下Offse</description>
    </item>
    
    <item>
      <title>rocketmq的消息发送</title>
      <link>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81/</link>
      <pubDate>Tue, 21 Apr 2020 00:25:16 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81/</guid>
      <description>前言 RocketMQ支持3种消息发送方式:同步(sync)、异步( async)、单向 (oneway) 同步:发送者向MQ执行发送消息API时,同步等待,直到</description>
    </item>
    
    <item>
      <title>消费者的接收模式</title>
      <link>/post/%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 20 Apr 2020 15:51:58 +0000</pubDate>
      
      <guid>/post/%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%BC%8F/</guid>
      <description>推拉模式 根据使用者对读取操作的控制情况，消费者可分为两种类型。一个是DefaultMQPushConsumer，由系统控制读取操作，收到消息</description>
    </item>
    
    <item>
      <title>基于docker搭建rocketmq环境</title>
      <link>/post/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 19 Apr 2020 23:52:04 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</guid>
      <description>准备工作 在搭建之前，我们需要做一些准备工作，这里我们需要使用 docker 搭建服务，所以需要提前安装 docker。此外，由于 rocketmq 需要部署 broker 与 nameserver ，考虑到分开</description>
    </item>
    
  </channel>
</rss>