<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go源码 on Forz Blog</title>
    <link>/tags/go%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in Go源码 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 21 May 2021 14:39:43 +0000</lastBuildDate><atom:link href="/tags/go%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>并发原语atomic源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADatomic%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:39:43 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADatomic%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>atomic 原理 在现在的系统中,write 的地址基本上都是对齐的(aligned)。 比如,32 位的操作系统、CPU 以及编译器,write 的地址总是 4 的</description>
    </item>
    
    <item>
      <title>并发原语context源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcontext%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:38:37 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcontext%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Context 上下文 context.Context Go 语言中用来设置截止日期、同步信号，传递请求相关值的结构体。上下文与 Goroutine 有比较密切的关系，是 Go 语言中独特的设计，在其他编程语言中我们</description>
    </item>
    
    <item>
      <title>并发原语Sync-Pool源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-pool%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:37:59 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-pool%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Pool sync.Pool 数据类型用来保存一组可独立访问的临时对象。请注意这里加粗的“临时”这两个字,它说明了 sync.Pool 这个数据类型的特点,也就是说,它池化的对象会在未来</description>
    </item>
    
    <item>
      <title>并发原语Sync-Map源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-map%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:37:20 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-map%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Map Go 内建的 map 类型不是线程安全的,所以 Go 1.9 中增加了一个线程安全的 map,也就是 sync.Map。但是,我们一定要记住,这个 sync.Map 并不是用来替换内建</description>
    </item>
    
    <item>
      <title>并发原语Once源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADonce%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:36:14 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADonce%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Once 很多人认为实现一个 Once 一样的并发原语很简单,只需使用一个 flag 标记是否初始化过即可,最多是用 atomic 原子操作这个 flag,但是,这个实现有一个很大的问</description>
    </item>
    
    <item>
      <title>并发原语Cond源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcond%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:35:25 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcond%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Cond 标准库中的 Cond 并发原语初始化的时候,需要关联一个 Locker 接口的实例,一般我们使用 Mutex 或者 RWMutex。 首先,Cond 关联的 Locker 实例可以通过 c.L 访问,它</description>
    </item>
    
    <item>
      <title>并发原语WatiGroup源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADwatigroup%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:32:20 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADwatigroup%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>WaitGroup sync.WaitGroup 可以达到并发 Goroutine 的执行屏障的效果，等待多个 Goroutine 执行完毕。 sync.WaitGroup 结构体中只包含两个成员变量： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description>
    </item>
    
    <item>
      <title>并发原语Mutex和RWMutex源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADmutex%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:30:06 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADmutex%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Mutex Go 语言的 sync.Mutex 由两个字段 state 和 sema 组成。其中 state 表示当前互斥锁的状态，而 sema 是用于控制锁状态的信号量。 1 2 3 4 type Mutex struct { state int32 sema uint32 } 状态 互斥锁的状态比较复</description>
    </item>
    
    <item>
      <title>并发原语Channel源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADchannel%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 14 Jan 2021 15:58:21 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADchannel%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>channel 数据结构 Go 语言的 Channel 在运行时使用 runtime.hchan 结构体表示。我们在 Go 语言中创建新的 Channel 时，实际上创建的都是如下所示的结构： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type hchan struct</description>
    </item>
    
    <item>
      <title>Go的栈空间管理源码剖析</title>
      <link>/post/go%E7%9A%84%E6%A0%88%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 18 Dec 2020 17:46:19 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E6%A0%88%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 栈区的内存一般由编译器自动进行分配和释放，其中存储着函数的入参以及局部变量，这些参数会随着函数的创建而创建，函数的返回而消亡，一般不</description>
    </item>
    
    <item>
      <title>Go的垃圾回收源码剖析</title>
      <link>/post/go%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 30 Nov 2020 14:52:24 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计理念 Go 实现的垃圾回收器是无分代（对象没有代际之分）、不整理（回收过程中不对对象进行移动与整理）、并发（与用户代码并发执行）的三色标记清扫</description>
    </item>
    
    <item>
      <title>Go调度器的协作与抢占</title>
      <link>/post/go%E8%B0%83%E5%BA%A6%E5%99%A8%E7%9A%84%E5%8D%8F%E4%BD%9C%E4%B8%8E%E6%8A%A2%E5%8D%A0/</link>
      <pubDate>Fri, 27 Nov 2020 17:25:33 +0000</pubDate>
      
      <guid>/post/go%E8%B0%83%E5%BA%A6%E5%99%A8%E7%9A%84%E5%8D%8F%E4%BD%9C%E4%B8%8E%E6%8A%A2%E5%8D%A0/</guid>
      <description>前言 如果某个 G 执行时间过长，其他的 G 如何才能被正常的调度？ 这便涉及到有关调度的两个理念：协作式调度与抢占式调度。 协作式和抢占式这两个理念解释</description>
    </item>
    
    <item>
      <title>Go的信号处理源码剖析</title>
      <link>/post/go%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 26 Nov 2020 22:58:57 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 我们已经知道了 Go 运行时调度以 Goroutine 的方式调度了所有用户态代码。 每个 Goroutine 都有可能在不同的线程上重新被执行。 那么如果用户态的某个 Goroutine 需要接收系统信号</description>
    </item>
    
    <item>
      <title>Go的内存分配器源码剖析</title>
      <link>/post/go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 23 Nov 2020 10:26:14 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 分级分配 线程缓存分配（Thread-Caching Malloc，TCMalloc）是用于分配内存的机制，它比 glibc 中的 malloc 函数还要快很多.</description>
    </item>
    
    <item>
      <title>Go的程序生命周期源码剖析</title>
      <link>/post/go%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 18 Nov 2020 14:34:06 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>程序生命周期 在 proc.go 和 runtime2.go 文件中，有一些很重要全局的变量，我们先列出来： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 所有 g 的长度 allglen uintptr // 保</description>
    </item>
    
    <item>
      <title>Go的网络轮询器源码剖析</title>
      <link>/post/go%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Sat, 14 Nov 2020 22:52:29 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>导言 Go 基于 I/O multiplexing 和 goroutine scheduler 构建了一个简洁而高性能的原生网络模型(基于 Go 的 I/O 多路复用 netpoller )，提供了 goroutine-per-connection 这样简单的网络编程模式。在这种模式下，开发者使用的</description>
    </item>
    
    <item>
      <title>Go的系统监控源码剖析</title>
      <link>/post/go%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 12 Nov 2020 19:32:21 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 Go 语言的系统监控起到了很重要的作用，它在内部启动了一个不会中止的循环，在循环的内部会轮询网络、抢占长期运行或者处于系统调用的 Goroutine 以及触</description>
    </item>
    
    <item>
      <title>Go的调度器源码剖析</title>
      <link>/post/go%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 12 Jul 2019 13:29:52 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 协程 进程时代 最初的计算机上面没有操作系统，更别提进程、线程和协程了。 后来，现代化的计算机有了操作系统，每个程序都是一个进程，但是操作</description>
    </item>
    
  </channel>
</rss>
