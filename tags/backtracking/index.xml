<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backtracking on Forz Blog</title>
    <link>/tags/backtracking/</link>
    <description>Recent content in Backtracking on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Aug 2017 15:56:04 +0000</lastBuildDate>
    
	<atom:link href="/tags/backtracking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>构造回文字符串</title>
      <link>/post/%E6%9E%84%E9%80%A0%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 26 Aug 2017 15:56:04 +0000</pubDate>
      
      <guid>/post/%E6%9E%84%E9%80%A0%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>添加最少字符使字符串整体都是回文字符串 题目: 给定一个字符串str,如果可以在str的任意位置添加字符，请返回在添加字符最少的 情况下，让str</description>
    </item>
    
    <item>
      <title>查找回文子串和回文子序列</title>
      <link>/post/%E6%9F%A5%E6%89%BE%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E5%92%8C%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sun, 25 Jun 2017 02:28:08 +0000</pubDate>
      
      <guid>/post/%E6%9F%A5%E6%89%BE%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E5%92%8C%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>LeetCode 409. Longest Palindrome Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters. This is case sensitive, for example “Aa” is not considered a palindrome here. Note: Assume the length of given string will not exceed 1,010. Example: Input: &amp;ldquo;abccccdd&amp;rdquo; Output: 7 Explanation: One longest palindrome that can be built is “</description>
    </item>
    
    <item>
      <title>排列</title>
      <link>/post/%E6%8E%92%E5%88%97/</link>
      <pubDate>Sat, 24 Jun 2017 23:59:06 +0000</pubDate>
      
      <guid>/post/%E6%8E%92%E5%88%97/</guid>
      <description>LeetCode 46. Permutations Given a collection of distinct numbers, return all possible permutations. For example, [1,2,3] have the following permutations: 1 2 3 4 5 6 7 8 [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] 解析： 此题可以直接用STL中的next_permutation()实</description>
    </item>
    
    <item>
      <title>正则表达式匹配</title>
      <link>/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Sat, 24 Jun 2017 23:58:16 +0000</pubDate>
      
      <guid>/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>LeetCode 44. Wildcard Matching Implement wildcard pattern matching with support for ‘?’ and ‘*’. ‘?’ Matches any single character. ‘*’ Matches any sequence of characters (including the empty sequence). The matching should cover the entire input string (not partial). The function prototype should be: bool isMatch(const char s, const char p) Some examples: 1 2 3 4 5 6 7 isMatch(&amp;#34;aa&amp;#34;,&amp;#34;a&amp;#34;)</description>
    </item>
    
    <item>
      <title>数独</title>
      <link>/post/%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Sat, 24 Jun 2017 22:11:15 +0000</pubDate>
      
      <guid>/post/%E6%95%B0%E7%8B%AC/</guid>
      <description>LeetCode 36. Valid Sudoku The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’. 解析：检查九宫格是否有效，只需要检查每行每列和每个子九宫格是否存在重复数字即可。创建三个map</description>
    </item>
    
    <item>
      <title>N皇后问题</title>
      <link>/post/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 24 Jun 2017 22:08:30 +0000</pubDate>
      
      <guid>/post/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description>LeetCode 51. N-Queens The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle. Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen</description>
    </item>
    
    <item>
      <title>字典树相关问题</title>
      <link>/post/%E5%AD%97%E5%85%B8%E6%A0%91%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 24 Jun 2017 20:31:45 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E5%85%B8%E6%A0%91%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>LeetCode 79. Word Search Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. For example, Given board = 1 2 3 4 5 [</description>
    </item>
    
    <item>
      <title>IP Address</title>
      <link>/post/ip-address/</link>
      <pubDate>Sat, 24 Jun 2017 20:28:40 +0000</pubDate>
      
      <guid>/post/ip-address/</guid>
      <description>LeetCode 93. Restore IP Addresses Given a string containing only digits, restore it by returning all possible valid IP address combinations. For example: Given “25525511135”, return [“255.255.11.135”, “255.255.111.</description>
    </item>
    
    <item>
      <title>Word Ladder</title>
      <link>/post/word-ladder/</link>
      <pubDate>Sat, 24 Jun 2017 20:26:35 +0000</pubDate>
      
      <guid>/post/word-ladder/</guid>
      <description>LeetCode 127. Word Ladder Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that: Only one letter can be changed at a time. Each transformed word must exist in the word list. Note that beginWord is not a transformed word. For example, Given: beginWord =</description>
    </item>
    
    <item>
      <title>查找一条直线上的最多点个数</title>
      <link>/post/%E6%9F%A5%E6%89%BE%E4%B8%80%E6%9D%A1%E7%9B%B4%E7%BA%BF%E4%B8%8A%E7%9A%84%E6%9C%80%E5%A4%9A%E7%82%B9%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Sat, 24 Jun 2017 19:50:25 +0000</pubDate>
      
      <guid>/post/%E6%9F%A5%E6%89%BE%E4%B8%80%E6%9D%A1%E7%9B%B4%E7%BA%BF%E4%B8%8A%E7%9A%84%E6%9C%80%E5%A4%9A%E7%82%B9%E4%B8%AA%E6%95%B0/</guid>
      <description>LeetCode 149. Max Points on a Line Given n points on a 2D plane, find the maximum number of points that lie on the same straight line. 解析： 坑点1 如果直线是和y轴平行的，那么不能直接用(y1-y2)/(x1-x2)表示斜</description>
    </item>
    
  </channel>
</rss>