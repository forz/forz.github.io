<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go-redis on Forz Blog</title>
    <link>/tags/go-redis/</link>
    <description>Recent content in go-redis on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Oct 2020 17:05:43 +0000</lastBuildDate>
    
	<atom:link href="/tags/go-redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goredis的连接池实现</title>
      <link>/post/goredis%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 13 Oct 2020 17:05:43 +0000</pubDate>
      
      <guid>/post/goredis%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AE%9E%E7%8E%B0/</guid>
      <description>ConnPool是go-redis中连接池的实现，其数据结构如下： type ConnPool struct { opt *Options dialErrorsNum uint32 // atomic lastDialErrorMu sync.RWMutex lastDialError error queue chan struct{} connsMu sync.Mutex conns []*Conn idleConns []*Conn poolSize int idleConnsLen int stats Stats _closed uint32 // atomic } 主要字</description>
    </item>
    
    <item>
      <title>go-redis的常用操作总结</title>
      <link>/post/go-redis%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 05 Jun 2020 15:32:19 +0000</pubDate>
      
      <guid>/post/go-redis%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
      <description>流水线 1 2 3 4 5 6 7 8 9 10 11 12 13 pipe := rdb.Pipeline() incr := pipe.Incr(&amp;#34;pipeline_counter&amp;#34;) pipe.Expire(&amp;#34;pipeline_counter&amp;#34;, time.Hour) // Execute // // INCR pipeline_counter // EXPIRE pipeline_counts 3600 // // using one rdb-server roundtrip. _, err := pipe.Exec() fmt.Println(incr.Val(), err) 上面的代码也可以写成下面的形式: 1 2 3 4 5 6 7 var</description>
    </item>
    
  </channel>
</rss>