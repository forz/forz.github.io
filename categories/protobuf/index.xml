<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>protobuf on Forz Blog</title>
    <link>/categories/protobuf/</link>
    <description>Recent content in protobuf on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Jun 2021 12:30:09 +0000</lastBuildDate><atom:link href="/categories/protobuf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Protobuf如何使用动态反射</title>
      <link>/post/protobuf%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Wed, 16 Jun 2021 12:30:09 +0000</pubDate>
      
      <guid>/post/protobuf%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E5%8F%8D%E5%B0%84/</guid>
      <description>反射 Reflection（反射）是新实现的旗舰特性。与 reflect 包提供 Go 类型和值的视图相似，protoreflect 包根据 protocol buffer 类型系统提供值的视图。</description>
    </item>
    
    <item>
      <title>Protobuf如何传递动态参数</title>
      <link>/post/protobuf%E5%A6%82%E4%BD%95%E4%BC%A0%E9%80%92%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 15 Jun 2021 16:12:02 +0000</pubDate>
      
      <guid>/post/protobuf%E5%A6%82%E4%BD%95%E4%BC%A0%E9%80%92%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0/</guid>
      <description>前言 Protocol Buffers（protobuf）是Google推出的高效，静态类型，语言无关的数据序列化格式。我们在Envoy代理中使用protob</description>
    </item>
    
    <item>
      <title>Protobuf编解码原理</title>
      <link>/post/protobuf%E7%BC%96%E8%A7%A3%E7%A0%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 20 Apr 2021 15:41:20 +0000</pubDate>
      
      <guid>/post/protobuf%E7%BC%96%E8%A7%A3%E7%A0%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>序列化与反序列化 有些时候，我们希望给数据结构或对象拍个“快照”，或者保存成文件，或者传输给其他应用程序。比如，在神经网络训练过程中，我们会将</description>
    </item>
    
    <item>
      <title>区分Protobuf中缺失值和默认值</title>
      <link>/post/%E5%8C%BA%E5%88%86protobuf%E4%B8%AD%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%92%8C%E9%BB%98%E8%AE%A4%E5%80%BC/</link>
      <pubDate>Sat, 17 Apr 2021 19:00:52 +0000</pubDate>
      
      <guid>/post/%E5%8C%BA%E5%88%86protobuf%E4%B8%AD%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%92%8C%E9%BB%98%E8%AE%A4%E5%80%BC/</guid>
      <description>背景 Protobuf 是目前非常主流的二进制序列化格式，GRPC 默认使用 Protobuf v3 格式，下面是 Protobuf 消息定义的例子： 1 2 3 4 5 6 7 8 9 10 11 # proto2message Account { required string name = 1; # 必需 optional double</description>
    </item>
    
    <item>
      <title>Protobuf的FieldMaskPb</title>
      <link>/post/protobuf%E7%9A%84fieldmaskpb/</link>
      <pubDate>Sat, 17 Apr 2021 17:27:55 +0000</pubDate>
      
      <guid>/post/protobuf%E7%9A%84fieldmaskpb/</guid>
      <description>概述 软件包fieldmaskpb包含google / protobuf / field_mask.proto的生成类型。 FieldMask消息表示一组符号字段路径</description>
    </item>
    
    <item>
      <title>Proto常见第三方类型介绍</title>
      <link>/post/proto%E5%B8%B8%E8%A7%81%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 17 Apr 2021 14:17:14 +0000</pubDate>
      
      <guid>/post/proto%E5%B8%B8%E8%A7%81%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</guid>
      <description>Any Any 包含任意序列化的消息以及描述序列化消息类型的URL。 JSON格式 Any值的JSON表示使用反序列化的嵌入式消息的常规表示，并带有一个@t</description>
    </item>
    
    <item>
      <title>proto生成Go代码指南</title>
      <link>/post/proto%E7%94%9F%E6%88%90go%E4%BB%A3%E7%A0%81%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 16 Apr 2021 17:37:51 +0000</pubDate>
      
      <guid>/post/proto%E7%94%9F%E6%88%90go%E4%BB%A3%E7%A0%81%E6%8C%87%E5%8D%97/</guid>
      <description>本页确切描述了protocol buffer编译器为任何给定的协议定义生成的Go代码。突出显示了proto2和proto3生成的代码之间的任何</description>
    </item>
    
    <item>
      <title>Proto3语言指南</title>
      <link>/post/proto3%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 12 Apr 2021 19:42:32 +0000</pubDate>
      
      <guid>/post/proto3%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97/</guid>
      <description>语言指南 定义消息类型 先来看一个非常简单的例子。假设你想定义一个“搜索请求”的消息格式，每一个请求含有一个查询字符串、你感兴趣的查询结果所在的</description>
    </item>
    
    <item>
      <title>Protobuf的import功能</title>
      <link>/post/protobuf%E7%9A%84import%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 14 Sep 2020 21:10:00 +0000</pubDate>
      
      <guid>/post/protobuf%E7%9A%84import%E5%8A%9F%E8%83%BD/</guid>
      <description>业务场景 我们会有这样的需求：在不同的文件夹中定义了不同的 proto 文件，这些不同的文件夹可能是一些不同的 gRPC 服务。因为不想重复定义某一个 message</description>
    </item>
    
  </channel>
</rss>
