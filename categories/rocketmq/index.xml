<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocketmq on Forz Blog</title>
    <link>/categories/rocketmq/</link>
    <description>Recent content in rocketmq on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 21 Apr 2020 17:37:34 +0000</lastBuildDate>
    
	<atom:link href="/categories/rocketmq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何发送事务消息</title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 21 Apr 2020 17:37:34 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</guid>
      <description>事务消息 RocketMQ的事务消息，是指发送消息事件和其他事件需要同时成功或同时失败。比如银行转账，A银行的某账户要转一万元到B银行的某账户</description>
    </item>
    
    <item>
      <title>延迟消息的收发</title>
      <link>/post/%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E7%9A%84%E6%94%B6%E5%8F%91/</link>
      <pubDate>Tue, 21 Apr 2020 17:36:23 +0000</pubDate>
      
      <guid>/post/%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E7%9A%84%E6%94%B6%E5%8F%91/</guid>
      <description>延迟消息 RocketMQ支持发送延迟消息，Broker 收到这类消息后，延迟一段时间再处理，使消息在规定的一段时间后生效。 延迟消息的使用方法是</description>
    </item>
    
    <item>
      <title>顺序消息的收发</title>
      <link>/post/%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF%E7%9A%84%E6%94%B6%E5%8F%91/</link>
      <pubDate>Tue, 21 Apr 2020 17:30:32 +0000</pubDate>
      
      <guid>/post/%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF%E7%9A%84%E6%94%B6%E5%8F%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rocketmq中的offset</title>
      <link>/post/rocketmq%E4%B8%AD%E7%9A%84offset/</link>
      <pubDate>Tue, 21 Apr 2020 14:22:06 +0000</pubDate>
      
      <guid>/post/rocketmq%E4%B8%AD%E7%9A%84offset/</guid>
      <description>实际运行中的系统，难免会遇到重新消费某条消息、跳过一段时间内的消息等情况。这些异常情况的处理，都和Offset有关。 首先来明确一下Offse</description>
    </item>
    
    <item>
      <title>生产者的同步异步模式</title>
      <link>/post/%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%90%8C%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 21 Apr 2020 00:25:16 +0000</pubDate>
      
      <guid>/post/%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%90%8C%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>DefaultMQProducer 生产者发送消息默认使用的是DefaultMQProducer类，下面结合实际代码来详细解释. 同步消息: 主要流程是：创建一个DefaultM</description>
    </item>
    
    <item>
      <title>消费者的接收模式</title>
      <link>/post/%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 20 Apr 2020 15:51:58 +0000</pubDate>
      
      <guid>/post/%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%BC%8F/</guid>
      <description>推拉模式 根据使用者对读取操作的控制情况，消费者可分为两种类型。一个是DefaultMQPushConsumer，由系统控制读取操作，收到消息</description>
    </item>
    
    <item>
      <title>基于docker搭建rocketmq环境</title>
      <link>/post/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 19 Apr 2020 23:52:04 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</guid>
      <description>准备工作 在搭建之前，我们需要做一些准备工作，这里我们需要使用 docker 搭建服务，所以需要提前安装 docker。此外，由于 rocketmq 需要部署 broker 与 nameserver ，考虑到分开</description>
    </item>
    
  </channel>
</rss>