<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocketmq on Forz Blog</title>
    <link>/categories/rocketmq/</link>
    <description>Recent content in rocketmq on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 25 Apr 2020 16:30:55 +0000</lastBuildDate>
    
	<atom:link href="/categories/rocketmq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rocketmq的ACL机制</title>
      <link>/post/rocketmq%E7%9A%84acl%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 25 Apr 2020 16:30:55 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84acl%E6%9C%BA%E5%88%B6/</guid>
      <description>什么是ACL? RocketMQ在4.4.0版本开始支持ACL。ACL是access control list的简称，俗称访问控制列表。访问控制，基本上会涉及</description>
    </item>
    
    <item>
      <title>Rocketmq客户端的拦截器</title>
      <link>/post/rocketmq%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Sat, 25 Apr 2020 15:50:32 +0000</pubDate>
      
      <guid>/post/rocketmq%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description>生产者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/apache/rocketmq-client-go/v2&amp;#34; &amp;#34;github.com/apache/rocketmq-client-go/v2/primitive&amp;#34; &amp;#34;github.com/apache/rocketmq-client-go/v2/producer&amp;#34;</description>
    </item>
    
    <item>
      <title>rocketmq的消费负载均衡</title>
      <link>/post/rocketmq%E7%9A%84%E6%B6%88%E8%B4%B9%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Fri, 24 Apr 2020 23:01:45 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E6%B6%88%E8%B4%B9%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>负载均衡 要做负载均衡，必须知道一些全局信息，也就是一个ConsumerGroup里到底有多少个Consumer，知道了全局信息，才可以根据某</description>
    </item>
    
    <item>
      <title>路由中心NameServer</title>
      <link>/post/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83nameserver/</link>
      <pubDate>Fri, 24 Apr 2020 14:24:33 +0000</pubDate>
      
      <guid>/post/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83nameserver/</guid>
      <description>架构设计 消息中间件的设计思路一般基于主题的订阅发布机制，消息生产者（ Producer）发送某一主题的消息到消息服务器，消息服务器负责该消息的</description>
    </item>
    
    <item>
      <title>RmqClient源码分析</title>
      <link>/post/rmqclient%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 23 Apr 2020 15:43:10 +0000</pubDate>
      
      <guid>/post/rmqclient%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>前言 RmqClient是客户端各种类型的Consumer和Producer的底层类。这个类首先从NameServer获取并保存各种配置信息，</description>
    </item>
    
    <item>
      <title>PushConsumer源码分析</title>
      <link>/post/pushconsumer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 23 Apr 2020 14:42:04 +0000</pubDate>
      
      <guid>/post/pushconsumer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>整体流程 NewPushConsumer 创建pushConsumer对象.配置负载均衡策略. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39</description>
    </item>
    
    <item>
      <title>rocketmq的消息过滤机制</title>
      <link>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 22 Apr 2020 22:56:38 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</guid>
      <description>在Broker端进行消息过滤，可以减少无效消息发送到Consumer，少占用网络带宽从而提高吞吐量。Broker端有三种方式进行消息过滤。 消</description>
    </item>
    
    <item>
      <title>rocketmq的事务消息</title>
      <link>/post/rocketmq%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 21 Apr 2020 17:37:34 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</guid>
      <description>事务消息 RocketMQ的事务消息，是指发送消息事件和其他事件需要同时成功或同时失败。比如银行转账，A银行的某账户要转一万元到B银行的某账户</description>
    </item>
    
    <item>
      <title>rocketmq的定时消息</title>
      <link>/post/rocketmq%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 21 Apr 2020 17:36:23 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF/</guid>
      <description>定时消息 定时消息是指消息发送到Broker后，并不立即被消费者消费而是要等到特定的时间后才能被消费，RocketMQ并不支持任意的时间精度，</description>
    </item>
    
    <item>
      <title>rocketmq的顺序消息</title>
      <link>/post/rocketmq%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 21 Apr 2020 17:30:32 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF/</guid>
      <description>顺序消息 RocketMQ支持局部消息顺序消费，可以确保同一个消息消费队列中的消息被顺序消费，如果需要做到全局顺序消费则可以将主题配置成一一个</description>
    </item>
    
    <item>
      <title>Rocketmq中的offset</title>
      <link>/post/rocketmq%E4%B8%AD%E7%9A%84offset/</link>
      <pubDate>Tue, 21 Apr 2020 14:22:06 +0000</pubDate>
      
      <guid>/post/rocketmq%E4%B8%AD%E7%9A%84offset/</guid>
      <description>实际运行中的系统，难免会遇到重新消费某条消息、跳过一段时间内的消息等情况。这些异常情况的处理，都和Offset有关。 首先来明确一下Offse</description>
    </item>
    
    <item>
      <title>rocketmq的消息发送</title>
      <link>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81/</link>
      <pubDate>Tue, 21 Apr 2020 00:25:16 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81/</guid>
      <description>前言 RocketMQ支持3种消息发送方式:同步(sync)、异步( async)、单向 (oneway) 同步:发送者向MQ执行发送消息API时,同步等待,直到</description>
    </item>
    
    <item>
      <title>rocketmq的消息消费</title>
      <link>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9/</link>
      <pubDate>Mon, 20 Apr 2020 15:51:58 +0000</pubDate>
      
      <guid>/post/rocketmq%E7%9A%84%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9/</guid>
      <description>概述 消息消费以组的模式开展，一个消费组内可以包含多个消费者，每一个消费组可订阅多个主题，消费组之间有集群模式与广播模式两种消费模式。集群模式</description>
    </item>
    
    <item>
      <title>基于docker搭建rocketmq环境</title>
      <link>/post/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 19 Apr 2020 23:52:04 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</guid>
      <description>准备工作 在搭建之前，我们需要做一些准备工作，这里我们需要使用 docker 搭建服务，所以需要提前安装 docker。此外，由于 rocketmq 需要部署 broker 与 nameserver ，考虑到分开</description>
    </item>
    
  </channel>
</rss>