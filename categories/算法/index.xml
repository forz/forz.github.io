<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Forz Blog</title>
    <link>/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Nov 2021 16:30:26 +0000</lastBuildDate><atom:link href="/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式CAP和ACID和BASE理论</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8Fcap%E5%92%8Cacid%E5%92%8Cbase%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 24 Nov 2021 16:30:26 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8Fcap%E5%92%8Cacid%E5%92%8Cbase%E7%90%86%E8%AE%BA/</guid>
      <description>CAP 定义 CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partit</description>
    </item>
    
    <item>
      <title>BBR自适应限流算法实现</title>
      <link>/post/bbr%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 14 Nov 2021 17:28:43 +0000</pubDate>
      
      <guid>/post/bbr%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>TCP-BBR 算法 BBR（Bottleneck Bandwidth and Round-trip propagation time）是 Google 近年来提出的拥塞控制算法，诞生后大幅度提高了在高延迟等情况下网络传输的吞吐。从命名就</description>
    </item>
    
    <item>
      <title>哈希算法与哈希表介绍</title>
      <link>/post/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 11 Sep 2021 15:39:18 +0000</pubDate>
      
      <guid>/post/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>哈希算法 下面简单介绍下几种比较常用的加密哈希算法： MD5 MD5 即 Message-Digest Algorithm 5（信息-摘要算法 5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一</description>
    </item>
    
    <item>
      <title>常用加密签名算法介绍</title>
      <link>/post/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 27 May 2021 18:39:40 +0000</pubDate>
      
      <guid>/post/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>对称加密算法 对称加密算法 是应用较早的加密算法，又称为 共享密钥加密算法。在 对称加密算法 中，使用的密钥只有一个，发送 和 接收 双方都使用这个密钥对数</description>
    </item>
    
    <item>
      <title>计算机网络时间同步技术原理介绍</title>
      <link>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 26 May 2021 15:45:36 +0000</pubDate>
      
      <guid>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>前言 由计算机网络系统组成的分布式系统，若想协调一致进行：IT行业的“整点开拍”、“秒杀”、“Leader选举”，通信行业的“同步组网”之类业</description>
    </item>
    
    <item>
      <title>分布式限流实现</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 21 May 2021 15:32:09 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>为什么要分布式限流 其实大多数场景下你并不需要使用集群限流，单机限流就足够了。仔细思考其实只有几种情况下可能需要使用到集群限流： 当想要配置单机</description>
    </item>
    
    <item>
      <title>backoff指数退避重试算法实现</title>
      <link>/post/backoff%E6%8C%87%E6%95%B0%E9%80%80%E9%81%BF%E9%87%8D%E8%AF%95%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 11 May 2021 10:45:40 +0000</pubDate>
      
      <guid>/post/backoff%E6%8C%87%E6%95%B0%E9%80%80%E9%81%BF%E9%87%8D%E8%AF%95%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>指数退避算法 指数退避算法是适用于网络应用的标准错误处理策略，使用这种策略时，客户端会定期重试失败的请求，并不断增加各次请求之间的延迟时间。客</description>
    </item>
    
    <item>
      <title>Zstd压缩算法介绍</title>
      <link>/post/zstd%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 28 Apr 2021 17:21:17 +0000</pubDate>
      
      <guid>/post/zstd%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>介绍 我们称 Zstandard 或 Zstd 是一种快速的无损压缩算法，是针对 zlib 级别的实时压缩方案，以及更好的压缩比。它由一个非常快的熵阶段，由 Huff0 和 FSE 库提供。这个项目是作</description>
    </item>
    
    <item>
      <title>DEFLATE压缩算法原理</title>
      <link>/post/deflate%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 27 Apr 2021 17:18:38 +0000</pubDate>
      
      <guid>/post/deflate%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</guid>
      <description>DEFLATE &amp;amp; INFLATE 当你键入 tar -zcf src.tar.gz src, 就可以将 src 下的所有文件打包成一个 tar.gz 格式的压缩包. 这里的 &amp;ldquo;tar&amp;rdquo; 是归档格式, 将多个文件组合成一个文件; 而 &amp;ldquo;gz&amp;rdquo; 指的就是 gzip 压缩格式,</description>
    </item>
    
    <item>
      <title>常用的JSON压缩算法</title>
      <link>/post/%E5%B8%B8%E7%94%A8%E7%9A%84json%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 26 Apr 2021 20:27:58 +0000</pubDate>
      
      <guid>/post/%E5%B8%B8%E7%94%A8%E7%9A%84json%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>前言 无论使用何种编程语言，json格式的数据已被广泛应用，不论是数据的传输还是存储，在很多应用场景下，你可能想进一步地压缩JSON字符串的长</description>
    </item>
    
    <item>
      <title>常见负载均衡算法的比较</title>
      <link>/post/%E5%B8%B8%E8%A7%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Thu, 25 Mar 2021 21:46:53 +0000</pubDate>
      
      <guid>/post/%E5%B8%B8%E8%A7%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description>前言 如果我们在使用网络系统，那么可能会非常关心延迟问题。在面对一组服务器时，我们需要思考选择哪种负载均衡算法。如果可以直观了解不同负载均衡器</description>
    </item>
    
    <item>
      <title>SRE自适应熔断算法实现</title>
      <link>/post/sre%E8%87%AA%E9%80%82%E5%BA%94%E7%86%94%E6%96%AD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 21 Mar 2021 10:36:35 +0000</pubDate>
      
      <guid>/post/sre%E8%87%AA%E9%80%82%E5%BA%94%E7%86%94%E6%96%AD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>前言 断路器(Circuit Breakers): 为了限制操作的持续时间，我们可以使用超时，超时可以防止挂起操作并保证系统可以响应。因为我们处于高度动态的环境中，</description>
    </item>
    
    <item>
      <title>P2C&#43;EWMA负载均衡算法实现</title>
      <link>/post/p2c&#43;ewma%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 24 Jan 2021 11:29:23 +0000</pubDate>
      
      <guid>/post/p2c&#43;ewma%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>动态WRR算法(权重轮询) 数据中心内部的负载均衡 在理想情况下，某个服务的负载会完全均匀地分发给所有的后端任务。在任何时刻，最忙和最不忙的节点</description>
    </item>
    
    <item>
      <title>缓存驱逐算法:W-TinyLFU</title>
      <link>/post/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AE%97%E6%B3%95w-tinylfu/</link>
      <pubDate>Sun, 26 Jul 2020 17:32:53 +0000</pubDate>
      
      <guid>/post/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AE%97%E6%B3%95w-tinylfu/</guid>
      <description>W-TinyLFU 我们有三种常见的缓存驱逐策略： FIFO:先进先出，在这种淘汰算法中，先进入缓存的会先被淘汰。这种可谓是最简单的了，但是会导致我们命中率很低</description>
    </item>
    
    <item>
      <title>判断星期几:基姆拉尔森计算公式</title>
      <link>/post/%E5%88%A4%E6%96%AD%E6%98%9F%E6%9C%9F%E5%87%A0%E5%9F%BA%E5%A7%86%E6%8B%89%E5%B0%94%E6%A3%AE%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Thu, 05 Dec 2019 18:14:56 +0000</pubDate>
      
      <guid>/post/%E5%88%A4%E6%96%AD%E6%98%9F%E6%9C%9F%E5%87%A0%E5%9F%BA%E5%A7%86%E6%8B%89%E5%B0%94%E6%A3%AE%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</guid>
      <description>需求 给定一个xxxx-xx-xx日期，计算为星期几。 设定 1 2 3 4 int y; //年 int m; //月 int d; //日 int w; //周几 从 公元0年1月1日星期日 开始 推导 对</description>
    </item>
    
    <item>
      <title>熔断器hystrix实现</title>
      <link>/post/%E7%86%94%E6%96%AD%E5%99%A8hystrix%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 03 Nov 2019 17:13:27 +0000</pubDate>
      
      <guid>/post/%E7%86%94%E6%96%AD%E5%99%A8hystrix%E5%AE%9E%E7%8E%B0/</guid>
      <description>引言 熔断器是当依赖的服务已经出现故障时，为了保证自身服务的正常运行不再访问依赖的服务，防止雪崩效应.Hystrix断路器的工作原理是： 熔断器</description>
    </item>
    
    <item>
      <title>漏桶算法与令牌桶限流算法实现</title>
      <link>/post/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 29 Oct 2019 11:04:24 +0000</pubDate>
      
      <guid>/post/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>限流算法 在开发中我们可能会遇到接口访问频次过高，这时候就需要做流量限制，你可能是用的 Nginx 这种 Web Server 来控制也可能是用了一些流行的类库实现。在分布式</description>
    </item>
    
    <item>
      <title>一致性哈希算法实现</title>
      <link>/post/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 09 Oct 2019 20:03:19 +0000</pubDate>
      
      <guid>/post/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>一致性哈希算法 我们希望构造一种函数 f(k,n)→m 把字符串映射到 n 个槽上： 它的输入是随机到来的字符串 k 和 槽的个数 n. 输出是映射到的槽的标号 m ,</description>
    </item>
    
    <item>
      <title>梅森旋转算法与伪随机数</title>
      <link>/post/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Wed, 09 Oct 2019 18:26:14 +0000</pubDate>
      
      <guid>/post/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>现代编程语言，大都在标准库中包含了随机库。例如，C++ 在 C++11 标准中添加了 random 头文件，提供了现代的随机库；Python 则有 random。C++11</description>
    </item>
    
    <item>
      <title>线性同余法与伪随机数</title>
      <link>/post/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Wed, 09 Oct 2019 15:10:17 +0000</pubDate>
      
      <guid>/post/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>公式定义 在离散数据及其应用中，如果 那么，称a模m同余b（或者称模m时，a等价于b），可以记为 而线性同余式就可以这样表示： 线性同余发生器与上面</description>
    </item>
    
    <item>
      <title>UUID算法介绍</title>
      <link>/post/uuid%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 30 Jun 2019 16:48:48 +0000</pubDate>
      
      <guid>/post/uuid%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>UUID UUID的全称是universally unique identifier，全局唯一认证，它是一个128比特的数字，用来辨认计算机系统中的信息。术语GU</description>
    </item>
    
    <item>
      <title>背包九讲</title>
      <link>/post/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</link>
      <pubDate>Fri, 15 Sep 2017 11:25:54 +0000</pubDate>
      
      <guid>/post/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</guid>
      <description>1 01背包问题 1.1 题目 1.2 基本思路 1.3 优化空间复杂度 1.4 初始化的细节问题 1.5 一个常数优化 1.6 小结 01背包问题是最基本的背包问题，它包含了背包问题中设计状</description>
    </item>
    
    <item>
      <title>排列组合的解法总结</title>
      <link>/post/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%9A%84%E8%A7%A3%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 31 Aug 2017 21:48:38 +0000</pubDate>
      
      <guid>/post/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%9A%84%E8%A7%A3%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>一.特殊元素和特殊位置优先策略 二.相邻元素捆绑策略 三.不相邻问题插空策略 四.定序问题倍缩空位插入策略 五.重排问题求幂策略 六.环排问题线排策略</description>
    </item>
    
    <item>
      <title>一道题了解动态规划</title>
      <link>/post/%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Tue, 22 Aug 2017 15:31:13 +0000</pubDate>
      
      <guid>/post/%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>题目 给定数组arr，arr中所有的值都为正数且不重复。每个值代表一种面值的货币，每种 面值的货币可以使用任意张，再给定一个整数aim代表要找的</description>
    </item>
    
    <item>
      <title>欧拉函数浅析</title>
      <link>/post/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E6%B5%85%E6%9E%90/</link>
      <pubDate>Wed, 02 Aug 2017 18:54:51 +0000</pubDate>
      
      <guid>/post/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E6%B5%85%E6%9E%90/</guid>
      <description>欧拉函数 欧拉函数用希腊字母φ表示,φ(N)表示N的欧拉函数. 对φ(N)的值,我们可以通俗地理解为小于N且与N互质的数的个数(包含1). 欧拉函</description>
    </item>
    
    <item>
      <title>GCD、扩展GCD和中国剩余定理</title>
      <link>/post/gcd%E6%89%A9%E5%B1%95gcd%E5%92%8C%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</link>
      <pubDate>Wed, 02 Aug 2017 18:54:00 +0000</pubDate>
      
      <guid>/post/gcd%E6%89%A9%E5%B1%95gcd%E5%92%8C%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</guid>
      <description>辗转相除法 辗转相除是求两个数的最大公约数的。 要证这个定理成立，只需要证明 gcd(a, b) = gcd(b, a % b) 就行了 证明：令a % b = r, 所以a = k * b + r, 所以r = a -</description>
    </item>
    
    <item>
      <title>矩阵快速幂解析</title>
      <link>/post/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 02 Aug 2017 12:48:59 +0000</pubDate>
      
      <guid>/post/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%9E%90/</guid>
      <description>快速幂 题目:Implement pow(x, n). 解析：快速幂，此处需要判断边界值n，如果n为-2^31，那么需要另外设置一个long long变量存储其相反</description>
    </item>
    
    <item>
      <title>最小生成树算法总结</title>
      <link>/post/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 01 Aug 2017 23:07:09 +0000</pubDate>
      
      <guid>/post/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>Prim 基本思想 Prim算法根据点进行求解. 对于图G而言，V是所有顶点的集合；现在，设置两个新的集合U和T，其中U用于存放G的最小生成树中的顶点，</description>
    </item>
    
    <item>
      <title>最短路径算法总结</title>
      <link>/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 31 Jul 2017 14:45:52 +0000</pubDate>
      
      <guid>/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>BFS 4. 举例 题目: 用一个整型矩阵matrix表示一个网络，1代表有路，0代表无路，每一个位置只要不越界，都有上下左右4个方向，求从最左上角到最右</description>
    </item>
    
    <item>
      <title>哈弗曼树详解</title>
      <link>/post/%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 20 Jul 2017 13:51:59 +0000</pubDate>
      
      <guid>/post/%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、哈夫曼树的定义 什么是哈夫曼树？ 让我们先举一个例子。 判定树： 在很多问题的处理过程中，需要进行大量的条件判断，这些判断结构的设计直接影响着程</description>
    </item>
    
    <item>
      <title>KMP算法详解</title>
      <link>/post/kmp%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 28 Jun 2017 21:17:06 +0000</pubDate>
      
      <guid>/post/kmp%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>算法目标 kmp算法完成的任务是：给定两个字符串O和f，长度分别为n和m，判断f是否在O中出现，如果出现则返回出现的位置。常规方法是遍历a的每</description>
    </item>
    
    <item>
      <title>八大经典排序算法</title>
      <link>/post/%E5%85%AB%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:48 +0000</pubDate>
      
      <guid>/post/%E5%85%AB%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>八大排序算法总结 排序算法稳定性 假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中</description>
    </item>
    
    <item>
      <title>二叉树的类型</title>
      <link>/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:38 +0000</pubDate>
      
      <guid>/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>二叉树的定义 二叉树是每个节点最多有两个子树的树结构。它有五种基本形态：二叉树可以是空集；根可以有空的左子树或右子树；或者左、右子树皆为空。 二</description>
    </item>
    
    <item>
      <title>位图排序</title>
      <link>/post/%E4%BD%8D%E5%9B%BE%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:30 +0000</pubDate>
      
      <guid>/post/%E4%BD%8D%E5%9B%BE%E6%8E%92%E5%BA%8F/</guid>
      <description>计数排序与位图排序 计数排序(Counting sort)是一种稳定的线性时间排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组</description>
    </item>
    
    <item>
      <title>根据数据范围选择解题方法</title>
      <link>/post/%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E9%80%89%E6%8B%A9%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:00 +0000</pubDate>
      
      <guid>/post/%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E9%80%89%E6%8B%A9%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95/</guid>
      <description>N&amp;lt;=10 • O(N!) • 全排列枚举 N&amp;lt;=15 • O(2^N) • 01规划 • 状压dp N&amp;lt;=50 • O(N^4) • 枚举一个矩形(x,y),(x+w,y+h) N&amp;lt;=100 • O(N^3) • Floyd求任意两点最短路 • 高斯消元 N&amp;lt;=1000</description>
    </item>
    
    <item>
      <title>AVL树详解</title>
      <link>/post/avl%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:51 +0000</pubDate>
      
      <guid>/post/avl%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载： http://www.cnblogs.com/QG-whz/p/5167238.html. http://blog.csdn.net/sp_programmer/article/details/41812787. 定义 AVL树又称为高度平衡的二叉搜索树。它能保持二叉树的高度平衡，尽量降低二叉树的高度，减少树的平均搜索长度。 性质 AVL树本质上还</description>
    </item>
    
    <item>
      <title>红黑树详解</title>
      <link>/post/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:42 +0000</pubDate>
      
      <guid>/post/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载： http://www.cnblogs.com/skywang12345/p/3245399.html http://blog.csdn.net/v_july_v/article/details/6105630 简介 红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。 红黑树能够以O(lgn) 的时间复</description>
    </item>
    
    <item>
      <title>海量数据处理总结</title>
      <link>/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:31 +0000</pubDate>
      
      <guid>/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>转载：http://blog.csdn.net/v_july_v/article/details/7382693 前言 一般而言，标题含有“秒杀</description>
    </item>
    
    <item>
      <title>从B树、B&#43;树、B*树谈到R树</title>
      <link>/post/%E4%BB%8Eb%E6%A0%91b-%E6%A0%91b-%E6%A0%91%E8%B0%88%E5%88%B0r%E6%A0%91/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:23 +0000</pubDate>
      
      <guid>/post/%E4%BB%8Eb%E6%A0%91b-%E6%A0%91b-%E6%A0%91%E8%B0%88%E5%88%B0r%E6%A0%91/</guid>
      <description>前言 动态查找树主要有：二叉查找树（Binary Search Tree），平衡二叉查找树（Balanced Binary Search Tree），红黑树(Red-Black Tree )，</description>
    </item>
    
  </channel>
</rss>
