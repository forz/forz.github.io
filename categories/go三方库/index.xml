<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go三方库 on Forz Blog</title>
    <link>/categories/go%E4%B8%89%E6%96%B9%E5%BA%93/</link>
    <description>Recent content in Go三方库 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Feb 2022 13:50:52 +0000</lastBuildDate><atom:link href="/categories/go%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Go表达式的规则引擎gval介绍</title>
      <link>/post/%E5%9F%BA%E4%BA%8Ego%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8Egval%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 21 Feb 2022 13:50:52 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E4%BA%8Ego%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8Egval%E4%BB%8B%E7%BB%8D/</guid>
      <description>前言 Gval(Go eVALuate)支持计算任意表达式，特别是类似 Go 的表达式。 用途 Gval 可以使用参数、arimethetic、logical 和 string 运算来计算表</description>
    </item>
    
    <item>
      <title>获取系统和硬件信息:gopsutil</title>
      <link>/post/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AFgopsutil/</link>
      <pubDate>Mon, 15 Nov 2021 14:31:30 +0000</pubDate>
      
      <guid>/post/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AFgopsutil/</guid>
      <description>简介 gopsutil是 Python 工具库psutil 的 Golang 移植版，可以帮助我们方便地获取各种系统和硬件信息。gopsutil为我们屏蔽了各个系统之间的差</description>
    </item>
    
    <item>
      <title>使用jemalloc在Go中手动管理内存</title>
      <link>/post/%E4%BD%BF%E7%94%A8jemalloc%E5%9C%A8go%E4%B8%AD%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98/</link>
      <pubDate>Sat, 11 Sep 2021 15:22:25 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8jemalloc%E5%9C%A8go%E4%B8%AD%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98/</guid>
      <description>前言 Dgraph实验室自2015年成立以来一直是Go语言的用户。五年过去了，200K行的Go代码，我们很高兴地告诉大家，我们仍然相信Go是并</description>
    </item>
    
    <item>
      <title>Go的Reactor模型的网络框架gnet介绍</title>
      <link>/post/go%E7%9A%84reactor%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6gnet%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 09 Aug 2021 17:11:39 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84reactor%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6gnet%E4%BB%8B%E7%BB%8D/</guid>
      <description>Go netpoller的问题 Go netpoller 的设计不可谓不精巧、性能也不可谓不高，配合 goroutine 开发网络应用的时候就一个字：爽。因此 Go 的网络编程模式是及其简洁高效</description>
    </item>
    
    <item>
      <title>zerolog源码剖析</title>
      <link>/post/zerolog%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Tue, 13 Jul 2021 14:40:22 +0000</pubDate>
      
      <guid>/post/zerolog%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>什么是 zerolog zerolog 包提供了一个专门用于 JSON 输出的简单快速的 Logger。 zerolog 的 API 旨在为开发者提供出色的体验和令人惊叹的性能。其独特的链式 API 允许通过避免内</description>
    </item>
    
    <item>
      <title>go-assert库介绍</title>
      <link>/post/go-assert%E5%BA%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 09 Jun 2021 14:19:18 +0000</pubDate>
      
      <guid>/post/go-assert%E5%BA%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>初衷 今天要聊的库就是 github.com/huandu/go-assert，是我在几年前突发奇想实现的库。当时有一个「痒点」：写 Go 测试用例的</description>
    </item>
    
    <item>
      <title>自动dump库homles介绍</title>
      <link>/post/%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E7%9A%84%E8%87%AA%E5%8A%A8dump/</link>
      <pubDate>Tue, 08 Jun 2021 19:39:18 +0000</pubDate>
      
      <guid>/post/%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E7%9A%84%E8%87%AA%E5%8A%A8dump/</guid>
      <description>背景 Go 项目做的比较大(主要说代码多，参与人多)之后，可能会遇到类似下面这样的问题： 程序老是半夜崩，崩了以后就重启了，我也醒不来，现场早就丢了</description>
    </item>
    
    <item>
      <title>Go如何使用zstd压缩算法</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8zstd%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 06 Jun 2021 18:20:33 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8zstd%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>zstd Zstandard是一种实时压缩算法，提供高压缩率。它提供了非常广泛的压缩/速度权衡，同时由非常快速的解码器提供支持。实现了高性能压缩算法</description>
    </item>
    
    <item>
      <title>比atomic更方便的库:uber Atomic</title>
      <link>/post/%E6%AF%94atomic%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E5%BA%93uber-atomic/</link>
      <pubDate>Fri, 21 May 2021 12:18:09 +0000</pubDate>
      
      <guid>/post/%E6%AF%94atomic%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E5%BA%93uber-atomic/</guid>
      <description>安装 1 go get -u go.uber.org/atomic@v1 旧版导入路径 从v1.5.0开始，导入路径go.uber.org/atomic是使用此软件包的唯一受支持的方式。如果您使用的是G</description>
    </item>
    
    <item>
      <title>字节缓冲池:bytebufferpool</title>
      <link>/post/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B1%A0bytebufferpool/</link>
      <pubDate>Thu, 20 May 2021 16:16:29 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B1%A0bytebufferpool/</guid>
      <description>sync.Pool的坑 内存泄漏 取出来的 bytes.Buffer 在使用的时候，我们可以往这个元素中增加大量的 byte 数据，这会导致底层的 byte slice 的容量可能会变得很大。这个时候</description>
    </item>
    
    <item>
      <title>Go的类型转换库cast</title>
      <link>/post/go%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%BA%93cast/</link>
      <pubDate>Thu, 29 Apr 2021 22:27:06 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%BA%93cast/</guid>
      <description>快速使用 先安装： 1 go get github.com/spf13/cast 后使用： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/spf13/cast&amp;#34; ) func main() { // ToString fmt.Println(cast.ToString(&amp;#34;leedarjun&amp;#34;)) // leedarjun fmt.Println(cast.ToString(8)) // 8 fmt.Println(cast.ToString(8.31)) // 8.31 fmt.Println(cast.ToString([]byte(&amp;#34;one time&amp;#34;))) //</description>
    </item>
    
    <item>
      <title>pkg-errors使用介绍</title>
      <link>/post/pkg-errors%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 22 Mar 2021 14:39:15 +0000</pubDate>
      
      <guid>/post/pkg-errors%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>概述 Package errors 提供了简单的错误处理原语。 Go中的传统错误处理习惯用法大致类似于 1 2 3 if err != nil { return err } 当将其递归应用于调用堆栈时，将导致错误报告，而</description>
    </item>
    
    <item>
      <title>Go实现分片锁:orcaman-concurrent-map</title>
      <link>/post/go%E5%AE%9E%E7%8E%B0%E5%88%86%E7%89%87%E9%94%81orcaman-concurrent-map/</link>
      <pubDate>Tue, 19 Jan 2021 17:01:41 +0000</pubDate>
      
      <guid>/post/go%E5%AE%9E%E7%8E%B0%E5%88%86%E7%89%87%E9%94%81orcaman-concurrent-map/</guid>
      <description>虽然使用读写锁可以提供线程安全的 map,但是在大量并发读写的情况下,锁的竞争会非常激烈。锁是性能下降的万恶之源之一。 在并发编程中,我们的一条</description>
    </item>
    
    <item>
      <title>Go的文件系统抽象系统:Afero</title>
      <link>/post/go%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8A%BD%E8%B1%A1%E7%B3%BB%E7%BB%9F-afero/</link>
      <pubDate>Sun, 30 Aug 2020 23:08:43 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8A%BD%E8%B1%A1%E7%B3%BB%E7%BB%9F-afero/</guid>
      <description>概观 Afero 是一个文件系统框架,提供与任何文件系统的简单,统一和通用的交互 API。作为提供接口,类型和方法的抽象层，Afero 具有非常干净的接口和</description>
    </item>
    
    <item>
      <title>依赖注入:Wire包介绍</title>
      <link>/post/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5wire%E5%8C%85%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 23 Aug 2020 15:48:25 +0000</pubDate>
      
      <guid>/post/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5wire%E5%8C%85%E4%BB%8B%E7%BB%8D/</guid>
      <description>wire是 Google 开源的一个依赖注入工具。它是一个代码生成器，并不是一个框架。我们只需要在一个特殊的go文件中告诉wire类型之间的依赖关系，它会</description>
    </item>
    
    <item>
      <title>TinyLFU缓存:ristretto</title>
      <link>/post/tinylfu%E7%BC%93%E5%AD%98ristretto/</link>
      <pubDate>Tue, 04 Aug 2020 17:24:43 +0000</pubDate>
      
      <guid>/post/tinylfu%E7%BC%93%E5%AD%98ristretto/</guid>
      <description>Overview Ristretto是一种快速的，固定大小的内存中高速缓存，同时关注吞吐量和命中率性能。您可以轻松地将Ristretto添加到现有系统，并将</description>
    </item>
    
    <item>
      <title>序列化:vmihailenco-Msgpack</title>
      <link>/post/%E5%BA%8F%E5%88%97%E5%8C%96vmihailenco-msgpack/</link>
      <pubDate>Sun, 02 Aug 2020 18:46:32 +0000</pubDate>
      
      <guid>/post/%E5%BA%8F%E5%88%97%E5%8C%96vmihailenco-msgpack/</guid>
      <description>func Marshal 1 func Marshal(v interface{}) ([]byte, error) Marshal 返回v的MessagePack编码。 Example Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type Item struct { Foo string } b, err := msgpack.Marshal(&amp;amp;Item{Foo: &amp;#34;bar&amp;#34;}) if err != nil { panic(err) } var item Item err = msgpack.Unmarshal(b, &amp;amp;item)</description>
    </item>
    
    <item>
      <title>Bigcache优化技巧</title>
      <link>/post/bigcache%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 26 Jul 2020 15:19:19 +0000</pubDate>
      
      <guid>/post/bigcache%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</guid>
      <description>设计BigCache的初衷 bigcache的作者也不是想当然的开发一个库，而且项目遇到了需求。需求如下： 支持http协议 支持 10K RPS (5k 写，5k 读</description>
    </item>
    
    <item>
      <title>Gocache:一个功能齐全且易于扩展的Go缓存库</title>
      <link>/post/gocache%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E9%BD%90%E5%85%A8%E4%B8%94%E6%98%93%E4%BA%8E%E6%89%A9%E5%B1%95%E7%9A%84go%E7%BC%93%E5%AD%98%E5%BA%93/</link>
      <pubDate>Thu, 23 Jul 2020 23:23:02 +0000</pubDate>
      
      <guid>/post/gocache%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E9%BD%90%E5%85%A8%E4%B8%94%E6%98%93%E4%BA%8E%E6%89%A9%E5%B1%95%E7%9A%84go%E7%BC%93%E5%AD%98%E5%BA%93/</guid>
      <description>存储(store) 首先，当你准备缓存一些数据时，你必须选择缓存的存储方式：简单的直接放进内存？使用 Redis 或者 Memcache？或者其它某种形式的</description>
    </item>
    
    <item>
      <title>Go的代码生成库:jennifer</title>
      <link>/post/go%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93jennifer/</link>
      <pubDate>Wed, 24 Jun 2020 19:21:22 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93jennifer/</guid>
      <description>简介 jennifer支持所有的 Go 语法和特性，可以用它来生成任何 Go 语言代码。 快速使用 先安装： 1 go get github.com/dave/jennifer 今天我们换个思路来介绍jennifer这个</description>
    </item>
    
    <item>
      <title>Go命令行库Cobra的使用</title>
      <link>/post/go%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%93cobra%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 23 Jun 2020 22:08:13 +0000</pubDate>
      
      <guid>/post/go%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%93cobra%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Cobra提供简单的接口来创建强大的现代化CLI接口，比如git与go工具。Cobra同时也是一个程序, 用于创建CLI程序 功能 简易的子命令行</description>
    </item>
    
    <item>
      <title>Go生成和识别二维码</title>
      <link>/post/go%E7%94%9F%E6%88%90%E5%92%8C%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%8E%E6%9D%A1%E5%BD%A2%E7%A0%81/</link>
      <pubDate>Fri, 20 Mar 2020 17:06:44 +0000</pubDate>
      
      <guid>/post/go%E7%94%9F%E6%88%90%E5%92%8C%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%8E%E6%9D%A1%E5%BD%A2%E7%A0%81/</guid>
      <description>什么是二维码 二维条码是指在一维条码的基础上扩展出另一维具有可读性的条码，使用黑白矩形图案表示二进制数据，被设备扫描后可获取其中所包含的信息。</description>
    </item>
    
    <item>
      <title>Go语言快速解析JSON:gjson</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E8%A7%A3%E6%9E%90jsongjson/</link>
      <pubDate>Mon, 23 Dec 2019 19:38:12 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E8%A7%A3%E6%9E%90jsongjson/</guid>
      <description>前言 GJSON是一个Go包，它提供了一种快速，简单的方法来从json文档中获取值。它具有诸如单行检索，点符号路径，迭代和解析json行之类的</description>
    </item>
    
    <item>
      <title>Go中的参数验证:validator</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81validator/</link>
      <pubDate>Sat, 14 Dec 2019 16:36:40 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81validator/</guid>
      <description>快速使用 先安装： 1 go get github.com/go-playground/validator/v10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/go-playground/validator/v10&amp;#34; ) type User struct { Name string `validate:&amp;#34;min=6,max=10&amp;#34;` Age int `validate:&amp;#34;min=1,max=100&amp;#34;` } func main() { validate := validator.New() u1 := User{Name: &amp;#34;lidajun&amp;#34;, Age: 18} err := validate.Struct(u1) fmt.Println(err)</description>
    </item>
    
    <item>
      <title>Go强大的调试日志打印工具:go:Spew</title>
      <link>/post/go%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7go-spew/</link>
      <pubDate>Fri, 22 Nov 2019 11:15:12 +0000</pubDate>
      
      <guid>/post/go%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7go-spew/</guid>
      <description>引言 我们在使用Golang（Go语言）开发的过程中，会通过经常通过调试的方式查找问题的原因，解决问题，尤其是当遇到一个很棘手的问题的时候，就</description>
    </item>
    
    <item>
      <title>Go调用Python</title>
      <link>/post/go%E8%B0%83%E7%94%A8python/</link>
      <pubDate>Mon, 11 Nov 2019 13:47:29 +0000</pubDate>
      
      <guid>/post/go%E8%B0%83%E7%94%A8python/</guid>
      <description>Go-Python 环境配置 Python ：确保Python正确安装，所谓正确安装，就是在系统中能找到libpython.so(dylib)，找到Python.h。一般l</description>
    </item>
    
    <item>
      <title>Golang读写Excel</title>
      <link>/post/golang%E8%AF%BB%E5%86%99excel/</link>
      <pubDate>Thu, 05 Sep 2019 18:06:03 +0000</pubDate>
      
      <guid>/post/golang%E8%AF%BB%E5%86%99excel/</guid>
      <description>简介 Excelize 是 Go 语言编写的用于操作 Office Excel 文档类库，基于 ECMA-376 Office OpenXML 标准。可以使用它来读取、写入由 Microsoft Excel™ 2007 及以上版本创建的 XLSX 文档。相比较其他的开源类</description>
    </item>
    
    <item>
      <title>mongo-go-driver使用总结</title>
      <link>/post/mongo-go-driver%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 16 Jul 2019 16:38:41 +0000</pubDate>
      
      <guid>/post/mongo-go-driver%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>创建main 创建文件main.go并导入bson，mongo和mongo/options包： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main</description>
    </item>
    
    <item>
      <title>开源Json库性能分析</title>
      <link>/post/%E5%BC%80%E6%BA%90json%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 23 Nov 2018 16:01:54 +0000</pubDate>
      
      <guid>/post/%E5%BC%80%E6%BA%90json%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>开源Json库性能分析 Json 作为一种重要的数据格式，具有良好的可读性以及自描述性，广泛地应用在各种数据传输场景中。Go 语言里面原生支持了这种数据</description>
    </item>
    
  </channel>
</rss>
