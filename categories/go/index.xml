<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Forz Blog</title>
    <link>/categories/go/</link>
    <description>Recent content in Go on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 23 Nov 2021 20:58:28 +0000</lastBuildDate><atom:link href="/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go如何使用MySQL的XA事务</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mysql%E7%9A%84xa%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Tue, 23 Nov 2021 20:58:28 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mysql%E7%9A%84xa%E4%BA%8B%E5%8A%A1/</guid>
      <description>MySQL的XA事务 介绍 在开发中，为了降低单点压力，通常会根据业务情况进行分表分库，将表分布在不同的库中（库可能分布在不同的机器上）,但是一</description>
    </item>
    
    <item>
      <title>获取系统和硬件信息:gopsutil</title>
      <link>/post/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AFgopsutil/</link>
      <pubDate>Mon, 15 Nov 2021 14:31:30 +0000</pubDate>
      
      <guid>/post/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AFgopsutil/</guid>
      <description>简介 gopsutil是 Python 工具库psutil 的 Golang 移植版，可以帮助我们方便地获取各种系统和硬件信息。gopsutil为我们屏蔽了各个系统之间的差</description>
    </item>
    
    <item>
      <title>Go如何多版本管理</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 18 Sep 2021 14:19:45 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid>
      <description>为什么需要多个 Go 版本 有些人可能觉得没有这样的需求。实际工作中，这样的需求还是很常见的。以下一些场景，可能会希望有多版本： 一般为了稳定，线上版</description>
    </item>
    
    <item>
      <title>Goroutine的编排实践</title>
      <link>/post/goroutine%E7%9A%84%E7%BC%96%E6%8E%92%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 15 Sep 2021 18:26:15 +0000</pubDate>
      
      <guid>/post/goroutine%E7%9A%84%E7%BC%96%E6%8E%92%E5%AE%9E%E8%B7%B5/</guid>
      <description>任务编排 这里的编排既指安排 goroutine 按照指定的顺序执行,也指多个 chan 按照指定的方式组合处理的方式。goroutine 的编排类似“击鼓传花”的例子,我们</description>
    </item>
    
    <item>
      <title>使用jemalloc在Go中手动管理内存</title>
      <link>/post/%E4%BD%BF%E7%94%A8jemalloc%E5%9C%A8go%E4%B8%AD%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98/</link>
      <pubDate>Sat, 11 Sep 2021 15:22:25 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8jemalloc%E5%9C%A8go%E4%B8%AD%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98/</guid>
      <description>前言 Dgraph实验室自2015年成立以来一直是Go语言的用户。五年过去了，200K行的Go代码，我们很高兴地告诉大家，我们仍然相信Go是并</description>
    </item>
    
    <item>
      <title>Go语言观察GC的几种方式</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E8%A7%82%E5%AF%9Fgc%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 08 Sep 2021 16:23:07 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E8%A7%82%E5%AF%9Fgc%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>前言 我们以下面的程序为例，先使用四种不同的方式来介绍如何观察 GC，并在后面的问题中通过几个详细的例子再来讨论如何优化 GC。 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Go中的系统调用</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Wed, 11 Aug 2021 12:49:36 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>什么是操作系统 操作系统是资源的管理器，其管理的资源均进行了抽象 磁盘抽象:文件夹 内存抽象:虚拟内存 CPU 抽象:时间片 分级保护域-protectio</description>
    </item>
    
    <item>
      <title>Go的Reactor模型的网络框架gnet介绍</title>
      <link>/post/go%E7%9A%84reactor%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6gnet%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 09 Aug 2021 17:11:39 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84reactor%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6gnet%E4%BB%8B%E7%BB%8D/</guid>
      <description>Go netpoller的问题 Go netpoller 的设计不可谓不精巧、性能也不可谓不高，配合 goroutine 开发网络应用的时候就一个字：爽。因此 Go 的网络编程模式是及其简洁高效</description>
    </item>
    
    <item>
      <title>Go代码的编译与反编译</title>
      <link>/post/go%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 08 Aug 2021 21:51:13 +0000</pubDate>
      
      <guid>/post/go%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/</guid>
      <description>编译过程 词法分析(Lexical Analysis) 语法分析(Syntax Analysis) 可参考网站: https://astexplorer.net/ 语义分析(Semantic Analysis) 在抽象语法树 AST 上做类型检查 中间代码(SS</description>
    </item>
    
    <item>
      <title>Go的IO库介绍</title>
      <link>/post/go%E7%9A%84io%E5%BA%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 06 Aug 2021 17:45:39 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84io%E5%BA%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>Go和IO Go 是一种高性能的编译性语言，天然支持高并发，语言级别封装协程，号称可以支持成千上万，十万，甚至百万的协程并发。这个量级远不是线程可</description>
    </item>
    
    <item>
      <title>Go参数传递是传值还是传引用</title>
      <link>/post/go%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%98%AF%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</link>
      <pubDate>Tue, 20 Jul 2021 20:17:20 +0000</pubDate>
      
      <guid>/post/go%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%98%AF%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</guid>
      <description>前言 对于了解一门语言来说，会关心我们在函数调用的时候，参数到底是传的值，还是引用？ 其实对于传值和传引用，是一个比较古老的话题，做研发的都有这</description>
    </item>
    
    <item>
      <title>Go如何实现无限缓存的channel</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E7%BC%93%E5%AD%98%E7%9A%84channel/</link>
      <pubDate>Tue, 20 Jul 2021 16:58:13 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E7%BC%93%E5%AD%98%E7%9A%84channel/</guid>
      <description>无限缓存的channel拥有下面的特性： 不会阻塞write。 它总是能处理write的数据，或者放入到待读取的channel中，或者放入到缓存</description>
    </item>
    
    <item>
      <title>Go如何在函数内修改指针指向</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E4%BF%AE%E6%94%B9%E6%8C%87%E9%92%88%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 14 Jul 2021 10:45:34 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E4%BF%AE%E6%94%B9%E6%8C%87%E9%92%88%E6%8C%87%E5%90%91/</guid>
      <description>如何在函数内部修改一个指针（参数或接收者）指向，使其值的改变能反映在函数外部？ 直接上代码，这样可以么？ 1 2 3 4 5 6 7 8 9 type ArgType struct { A string b int } func</description>
    </item>
    
    <item>
      <title>zerolog源码剖析</title>
      <link>/post/zerolog%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Tue, 13 Jul 2021 14:40:22 +0000</pubDate>
      
      <guid>/post/zerolog%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>什么是 zerolog zerolog 包提供了一个专门用于 JSON 输出的简单快速的 Logger。 zerolog 的 API 旨在为开发者提供出色的体验和令人惊叹的性能。其独特的链式 API 允许通过避免内</description>
    </item>
    
    <item>
      <title>Go如何实现栈和队列</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 12 Jul 2021 17:18:27 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>前言 虽然 golang 没有内置的 queue，但它还是提供了很多强大的数据结构，那有没有可以直接拿过来当 queue 来使的呢？有的，且至少有两个选项。强调一句，我们</description>
    </item>
    
    <item>
      <title>Go的embed介绍</title>
      <link>/post/go%E7%9A%84embed%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 11 Jul 2021 16:54:16 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84embed%E4%BB%8B%E7%BB%8D/</guid>
      <description>什么是embed 在Golang 1.16版本中，新增了一个大家期待已久的特性//go:embed,它的作用就是可以在Go语言应用程序中包含任何</description>
    </item>
    
    <item>
      <title>Go的函数式编程</title>
      <link>/post/go%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 09 Jul 2021 16:08:50 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>函数式编程 函数式编程是很多语言正在支持或已经支持的日渐流行的编程范式。Go 已经支持了其中一部分的特性，比如头等函数和更高阶功能的支持，使函数</description>
    </item>
    
    <item>
      <title>Go协程池ants介绍</title>
      <link>/post/go%E5%8D%8F%E7%A8%8B%E6%B1%A0ants%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 08 Jul 2021 15:05:53 +0000</pubDate>
      
      <guid>/post/go%E5%8D%8F%E7%A8%8B%E6%B1%A0ants%E4%BB%8B%E7%BB%8D/</guid>
      <description>简介 处理大量并发是 Go 语言的一大优势。语言内置了方便的并发语法，可以非常方便的创建很多个轻量级的 goroutine 并发处理任务。相比于创建多个线程，gorou</description>
    </item>
    
    <item>
      <title>go-assert库介绍</title>
      <link>/post/go-assert%E5%BA%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 09 Jun 2021 14:19:18 +0000</pubDate>
      
      <guid>/post/go-assert%E5%BA%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>初衷 今天要聊的库就是 github.com/huandu/go-assert，是我在几年前突发奇想实现的库。当时有一个「痒点」：写 Go 测试用例的</description>
    </item>
    
    <item>
      <title>Go的深拷贝库:go-clone</title>
      <link>/post/go%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%BA%93go-clone/</link>
      <pubDate>Tue, 08 Jun 2021 23:26:17 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%BA%93go-clone/</guid>
      <description>背景 这个库是 github.com/huandu/go-clone，主要用途是对任意的 Go 结构进行深拷贝，创造一个内容完全相同的副本，得到的值可</description>
    </item>
    
    <item>
      <title>Go应用为什么VSZ占用过高</title>
      <link>/post/go%E5%BA%94%E7%94%A8%E4%B8%BA%E4%BB%80%E4%B9%88vsz%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98/</link>
      <pubDate>Tue, 08 Jun 2021 12:44:27 +0000</pubDate>
      
      <guid>/post/go%E5%BA%94%E7%94%A8%E4%B8%BA%E4%BB%80%E4%B9%88vsz%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98/</guid>
      <description>前言 前段时间，某同学说某服务的容器因为超出内存限制，不断地重启，问我们是不是有内存泄露，赶紧排查，然后解决掉，省的出问题。我们大为震惊，赶紧</description>
    </item>
    
    <item>
      <title>Go如何使用zstd压缩算法</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8zstd%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 06 Jun 2021 18:20:33 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8zstd%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>zstd Zstandard是一种实时压缩算法，提供高压缩率。它提供了非常广泛的压缩/速度权衡，同时由非常快速的解码器提供支持。实现了高性能压缩算法</description>
    </item>
    
    <item>
      <title>Go中如何实现hmac算法</title>
      <link>/post/go%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0hmac%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 31 May 2021 12:32:41 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0hmac%E7%AE%97%E6%B3%95/</guid>
      <description>首先来说说SHA1加密 SHA-1（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准</description>
    </item>
    
    <item>
      <title>使用特定顺序输出map的json编码</title>
      <link>/post/%E4%BD%BF%E7%94%A8%E7%89%B9%E5%AE%9A%E9%A1%BA%E5%BA%8F%E8%BE%93%E5%87%BAmap%E7%9A%84json%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sun, 30 May 2021 18:42:35 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8%E7%89%B9%E5%AE%9A%E9%A1%BA%E5%BA%8F%E8%BE%93%E5%87%BAmap%E7%9A%84json%E7%BC%96%E7%A0%81/</guid>
      <description>我有一个使用字符串作为键和值的映射。我有一个key数组，用于指定map的顺序。 我想将该映射序列化为JSON，但要保持数组上定义的顺序。 我想将</description>
    </item>
    
    <item>
      <title>腾讯Go安全指南</title>
      <link>/post/%E8%85%BE%E8%AE%AFgo%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 26 May 2021 18:53:08 +0000</pubDate>
      
      <guid>/post/%E8%85%BE%E8%AE%AFgo%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
      <description>1 通用类 I. 代码实现 1.1 内存管理 1.2 文件操作 1.3 系统接口 1.4 通信安全 1.5 敏感数据保护 1.6 加密解密 1.7 正则表达式 2 后台类 I. 代码实现 1.1 输入校验 1.2 SQL操作 1.3 网络</description>
    </item>
    
    <item>
      <title>Go中的happens-before</title>
      <link>/post/go%E4%B8%AD%E7%9A%84happens-before/</link>
      <pubDate>Sun, 23 May 2021 23:21:53 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84happens-before/</guid>
      <description>内存重排 https://golang.org/ref/mem 如何保证在一个 goroutine 中看到在另一个 goroutine 修改的变量的值，如果程序中修改数据时有其他 goroutine 同时读取，那么必须将读取串行化。为了串行化访问，请使用</description>
    </item>
    
    <item>
      <title>使用Delve工具调试Go程序</title>
      <link>/post/%E4%BD%BF%E7%94%A8delve%E5%B7%A5%E5%85%B7%E8%B0%83%E8%AF%95go%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 22 May 2021 22:55:01 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8delve%E5%B7%A5%E5%85%B7%E8%B0%83%E8%AF%95go%E7%A8%8B%E5%BA%8F/</guid>
      <description>前言 Delve 是一个 go 语言的第三方调试器，github 地址是： https://github.com/go-delve/delve 。 Delve 是 GDB 调试器的有效替代品。与 GDB 相比，它能更高的理解 Go 的运行时，数据结构以及表达式。</description>
    </item>
    
    <item>
      <title>Channel使用实践</title>
      <link>/post/channel%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 21 May 2021 14:58:45 +0000</pubDate>
      
      <guid>/post/channel%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>channel channels 是一种类型安全的消息队列，充当两个 goroutine 之间的管道，将通过它同步的进行任意资源的交换。chan 控制 goroutines 交互的能力从而创建了 Go 同步机制。当创建的</description>
    </item>
    
    <item>
      <title>比atomic更方便的库:uber Atomic</title>
      <link>/post/%E6%AF%94atomic%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E5%BA%93uber-atomic/</link>
      <pubDate>Fri, 21 May 2021 12:18:09 +0000</pubDate>
      
      <guid>/post/%E6%AF%94atomic%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E5%BA%93uber-atomic/</guid>
      <description>安装 1 go get -u go.uber.org/atomic@v1 旧版导入路径 从v1.5.0开始，导入路径go.uber.org/atomic是使用此软件包的唯一受支持的方式。如果您使用的是G</description>
    </item>
    
    <item>
      <title>如何用Go完成无锁队列</title>
      <link>/post/%E5%A6%82%E4%BD%95%E7%94%A8go%E5%AE%8C%E6%88%90%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 21 May 2021 11:57:21 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E7%94%A8go%E5%AE%8C%E6%88%90%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/</guid>
      <description>前言 队列(queue)是非常常用的一个数据结构，它只允许在表的前端（head）进行出队(dequeue)操作，而在表的后端（tail）进行入</description>
    </item>
    
    <item>
      <title>字节缓冲池:bytebufferpool</title>
      <link>/post/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B1%A0bytebufferpool/</link>
      <pubDate>Thu, 20 May 2021 16:16:29 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B1%A0bytebufferpool/</guid>
      <description>sync.Pool的坑 内存泄漏 取出来的 bytes.Buffer 在使用的时候，我们可以往这个元素中增加大量的 byte 数据，这会导致底层的 byte slice 的容量可能会变得很大。这个时候</description>
    </item>
    
    <item>
      <title>context使用实践</title>
      <link>/post/context%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 19 May 2021 17:47:08 +0000</pubDate>
      
      <guid>/post/context%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>如何使用 context context 使用起来非常方便。源码里对外提供了一个创建根节点 context 的函数： 1 func Background() Context background 是一个空的 context， 它不能被取消，没有值，也没有超时时</description>
    </item>
    
    <item>
      <title>Go的类型转换库cast</title>
      <link>/post/go%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%BA%93cast/</link>
      <pubDate>Thu, 29 Apr 2021 22:27:06 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%BA%93cast/</guid>
      <description>快速使用 先安装： 1 go get github.com/spf13/cast 后使用： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/spf13/cast&amp;#34; ) func main() { // ToString fmt.Println(cast.ToString(&amp;#34;leedarjun&amp;#34;)) // leedarjun fmt.Println(cast.ToString(8)) // 8 fmt.Println(cast.ToString(8.31)) // 8.31 fmt.Println(cast.ToString([]byte(&amp;#34;one time&amp;#34;))) //</description>
    </item>
    
    <item>
      <title>Go在http开启gzip</title>
      <link>/post/go%E5%9C%A8http%E5%BC%80%E5%90%AFgzip/</link>
      <pubDate>Thu, 29 Apr 2021 19:35:47 +0000</pubDate>
      
      <guid>/post/go%E5%9C%A8http%E5%BC%80%E5%90%AFgzip/</guid>
      <description>前言 我们知道一般无论是 CDN 还是 服务端的接口(nginx 配置gzip以优化站点资源加载速度)，在响应返回的时候，都会配置 gzip 来压缩响应数据，以达到</description>
    </item>
    
    <item>
      <title>pkg-errors使用介绍</title>
      <link>/post/pkg-errors%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 22 Mar 2021 14:39:15 +0000</pubDate>
      
      <guid>/post/pkg-errors%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>概述 Package errors 提供了简单的错误处理原语。 Go中的传统错误处理习惯用法大致类似于 1 2 3 if err != nil { return err } 当将其递归应用于调用堆栈时，将导致错误报告，而</description>
    </item>
    
    <item>
      <title>内存模型与伪共享</title>
      <link>/post/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E4%BC%AA%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Tue, 26 Jan 2021 16:15:38 +0000</pubDate>
      
      <guid>/post/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E4%BC%AA%E5%85%B1%E4%BA%AB/</guid>
      <description>前言 伪共享的非标准定义为：缓存系统中是以缓存行（cache line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行</description>
    </item>
    
    <item>
      <title>Go实现分片锁:orcaman-concurrent-map</title>
      <link>/post/go%E5%AE%9E%E7%8E%B0%E5%88%86%E7%89%87%E9%94%81orcaman-concurrent-map/</link>
      <pubDate>Tue, 19 Jan 2021 17:01:41 +0000</pubDate>
      
      <guid>/post/go%E5%AE%9E%E7%8E%B0%E5%88%86%E7%89%87%E9%94%81orcaman-concurrent-map/</guid>
      <description>虽然使用读写锁可以提供线程安全的 map,但是在大量并发读写的情况下,锁的竞争会非常激烈。锁是性能下降的万恶之源之一。 在并发编程中,我们的一条</description>
    </item>
    
    <item>
      <title>Go中的测试技巧</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E6%B5%8B%E8%AF%95%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 11 Jan 2021 21:51:22 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E6%B5%8B%E8%AF%95%E6%8A%80%E5%B7%A7/</guid>
      <description>前言 Go 使编写测试非常简单。实际上，测试工具是内置在标准工具链里的，你可以简单地运行 go test 来运行你的测试，无需安装任何额外的依赖或任何别的东西。</description>
    </item>
    
    <item>
      <title>Go如何生成随机数</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Sat, 09 Jan 2021 23:44:37 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>math/rand 包 math/rand 包实现了伪随机数生成器 主要方法 （1）func Seed(seed int64) 设置随机种子，不设置则默认Seed(1) （2）func Int() int 返回一个非负的伪随机int值</description>
    </item>
    
    <item>
      <title>Go的条件编译</title>
      <link>/post/go%E7%9A%84%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sat, 09 Jan 2021 17:09:59 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/</guid>
      <description>前言 Go语言可以通过go/build包里定义的tags和命名约定来让Go的包可以运行不同的代码。 在源代码里添加标注，通常称之为编译标签（bu</description>
    </item>
    
    <item>
      <title>Godoc介绍</title>
      <link>/post/godoc%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 03 Jan 2021 16:23:49 +0000</pubDate>
      
      <guid>/post/godoc%E4%BB%8B%E7%BB%8D/</guid>
      <description>go doc go doc命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。 所谓Go语言的程</description>
    </item>
    
    <item>
      <title>Go服务的优雅关闭与重启</title>
      <link>/post/go%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD%E4%B8%8E%E9%87%8D%E5%90%AF/</link>
      <pubDate>Fri, 11 Dec 2020 14:13:08 +0000</pubDate>
      
      <guid>/post/go%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD%E4%B8%8E%E9%87%8D%E5%90%AF/</guid>
      <description>背景 在业务快速增长中，前期只是验证模式是否可行，初期忽略程序发布重启带来的暂短停机影响。当模式实验成熟之后会逐渐放量，此时我们的发布停机带来</description>
    </item>
    
    <item>
      <title>Go中的信号处理</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 09 Dec 2020 14:50:42 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</guid>
      <description>信号 信号是事件发生时对进程的通知机制。有时也称之为软件中断。信号与硬件中断的相似之处在于打断了程序执行的正常流程，大多数情况下，无法预测信号</description>
    </item>
    
    <item>
      <title>扩展并发原语ErrGroup源码剖析</title>
      <link>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADerrgroup%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Tue, 08 Dec 2020 11:23:21 +0000</pubDate>
      
      <guid>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADerrgroup%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>ErrGroup ErrGroup是 Go 官方提供的一个同步扩展库。我们经常会碰到需要将一个通用的父任务拆成几个小任务并发执行的场景，其实，将一个大的任务拆成几</description>
    </item>
    
    <item>
      <title>Go中的Data-Race</title>
      <link>/post/go%E4%B8%AD%E7%9A%84data-race/</link>
      <pubDate>Tue, 08 Dec 2020 18:27:35 +0800</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84data-race/</guid>
      <description>数据竞争与竞态条件 数据竞争 定义：①多个线程对于同一个变量、②同时地、③进行读/写操作的现象并且④至少有一个线程进行写操作。（也就是说，如果所</description>
    </item>
    
    <item>
      <title>Go的文件系统抽象系统:Afero</title>
      <link>/post/go%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8A%BD%E8%B1%A1%E7%B3%BB%E7%BB%9F-afero/</link>
      <pubDate>Sun, 30 Aug 2020 23:08:43 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8A%BD%E8%B1%A1%E7%B3%BB%E7%BB%9F-afero/</guid>
      <description>概观 Afero 是一个文件系统框架,提供与任何文件系统的简单,统一和通用的交互 API。作为提供接口,类型和方法的抽象层，Afero 具有非常干净的接口和</description>
    </item>
    
    <item>
      <title>Go的类型断言</title>
      <link>/post/go%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%96%AD%E8%A8%80/</link>
      <pubDate>Wed, 26 Aug 2020 23:04:21 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%96%AD%E8%A8%80/</guid>
      <description>编译时类型断言来检查接口 作为一个热身，来看一个在 Go 中熟知的编译期断言：接口满意度检查。 在这段代码中，var _ stringWriter = W{}行确保类型 W 是一个 st</description>
    </item>
    
    <item>
      <title>依赖注入:Wire包介绍</title>
      <link>/post/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5wire%E5%8C%85%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 23 Aug 2020 15:48:25 +0000</pubDate>
      
      <guid>/post/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5wire%E5%8C%85%E4%BB%8B%E7%BB%8D/</guid>
      <description>wire是 Google 开源的一个依赖注入工具。它是一个代码生成器，并不是一个框架。我们只需要在一个特殊的go文件中告诉wire类型之间的依赖关系，它会</description>
    </item>
    
    <item>
      <title>TinyLFU缓存:ristretto</title>
      <link>/post/tinylfu%E7%BC%93%E5%AD%98ristretto/</link>
      <pubDate>Tue, 04 Aug 2020 17:24:43 +0000</pubDate>
      
      <guid>/post/tinylfu%E7%BC%93%E5%AD%98ristretto/</guid>
      <description>Overview Ristretto是一种快速的，固定大小的内存中高速缓存，同时关注吞吐量和命中率性能。您可以轻松地将Ristretto添加到现有系统，并将</description>
    </item>
    
    <item>
      <title>序列化:vmihailenco-Msgpack</title>
      <link>/post/%E5%BA%8F%E5%88%97%E5%8C%96vmihailenco-msgpack/</link>
      <pubDate>Sun, 02 Aug 2020 18:46:32 +0000</pubDate>
      
      <guid>/post/%E5%BA%8F%E5%88%97%E5%8C%96vmihailenco-msgpack/</guid>
      <description>func Marshal 1 func Marshal(v interface{}) ([]byte, error) Marshal 返回v的MessagePack编码。 Example Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type Item struct { Foo string } b, err := msgpack.Marshal(&amp;amp;Item{Foo: &amp;#34;bar&amp;#34;}) if err != nil { panic(err) } var item Item err = msgpack.Unmarshal(b, &amp;amp;item)</description>
    </item>
    
    <item>
      <title>Gocache:一个功能齐全且易于扩展的Go缓存库</title>
      <link>/post/gocache%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E9%BD%90%E5%85%A8%E4%B8%94%E6%98%93%E4%BA%8E%E6%89%A9%E5%B1%95%E7%9A%84go%E7%BC%93%E5%AD%98%E5%BA%93/</link>
      <pubDate>Thu, 23 Jul 2020 23:23:02 +0000</pubDate>
      
      <guid>/post/gocache%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E9%BD%90%E5%85%A8%E4%B8%94%E6%98%93%E4%BA%8E%E6%89%A9%E5%B1%95%E7%9A%84go%E7%BC%93%E5%AD%98%E5%BA%93/</guid>
      <description>存储(store) 首先，当你准备缓存一些数据时，你必须选择缓存的存储方式：简单的直接放进内存？使用 Redis 或者 Memcache？或者其它某种形式的</description>
    </item>
    
    <item>
      <title>Go的代码生成库:jennifer</title>
      <link>/post/go%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93jennifer/</link>
      <pubDate>Wed, 24 Jun 2020 19:21:22 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93jennifer/</guid>
      <description>简介 jennifer支持所有的 Go 语法和特性，可以用它来生成任何 Go 语言代码。 快速使用 先安装： 1 go get github.com/dave/jennifer 今天我们换个思路来介绍jennifer这个</description>
    </item>
    
    <item>
      <title>Go命令行库Cobra的使用</title>
      <link>/post/go%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%93cobra%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 23 Jun 2020 22:08:13 +0000</pubDate>
      
      <guid>/post/go%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%93cobra%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Cobra提供简单的接口来创建强大的现代化CLI接口，比如git与go工具。Cobra同时也是一个程序, 用于创建CLI程序 功能 简易的子命令行</description>
    </item>
    
    <item>
      <title>Go将Private仓库用作module依赖</title>
      <link>/post/go%E5%B0%86private%E4%BB%93%E5%BA%93%E7%94%A8%E4%BD%9Cmodule%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Thu, 18 Jun 2020 13:51:25 +0000</pubDate>
      
      <guid>/post/go%E5%B0%86private%E4%BB%93%E5%BA%93%E7%94%A8%E4%BD%9Cmodule%E4%BE%9D%E8%B5%96/</guid>
      <description>本文简单介绍一下Go语言在1.11版本之后推出的go mod使用私有仓库时遇到的问题。 直接使用go get 直接使用go get ...添加私有仓库依赖时，会</description>
    </item>
    
    <item>
      <title>Go生成和识别二维码</title>
      <link>/post/go%E7%94%9F%E6%88%90%E5%92%8C%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%8E%E6%9D%A1%E5%BD%A2%E7%A0%81/</link>
      <pubDate>Fri, 20 Mar 2020 17:06:44 +0000</pubDate>
      
      <guid>/post/go%E7%94%9F%E6%88%90%E5%92%8C%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%8E%E6%9D%A1%E5%BD%A2%E7%A0%81/</guid>
      <description>什么是二维码 二维条码是指在一维条码的基础上扩展出另一维具有可读性的条码，使用黑白矩形图案表示二进制数据，被设备扫描后可获取其中所包含的信息。</description>
    </item>
    
    <item>
      <title>Go语言快速解析JSON:gjson</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E8%A7%A3%E6%9E%90jsongjson/</link>
      <pubDate>Mon, 23 Dec 2019 19:38:12 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E8%A7%A3%E6%9E%90jsongjson/</guid>
      <description>前言 GJSON是一个Go包，它提供了一种快速，简单的方法来从json文档中获取值。它具有诸如单行检索，点符号路径，迭代和解析json行之类的</description>
    </item>
    
    <item>
      <title>Go中的参数验证:validator</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81validator/</link>
      <pubDate>Sat, 14 Dec 2019 16:36:40 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81validator/</guid>
      <description>快速使用 先安装： 1 go get github.com/go-playground/validator/v10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/go-playground/validator/v10&amp;#34; ) type User struct { Name string `validate:&amp;#34;min=6,max=10&amp;#34;` Age int `validate:&amp;#34;min=1,max=100&amp;#34;` } func main() { validate := validator.New() u1 := User{Name: &amp;#34;lidajun&amp;#34;, Age: 18} err := validate.Struct(u1) fmt.Println(err)</description>
    </item>
    
    <item>
      <title>Go语言检测一个文件的类型</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 12 Dec 2019 10:12:53 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>做 Web 应用程序时，经常需要对用户上传的文件类型做一下检查，比如判断上传的是否是 png 、gif、jpg 等图片类型，还是 pdf。并针对不同的类型做一些</description>
    </item>
    
    <item>
      <title>如何在Go中使用JWT</title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%9C%A8go%E4%B8%AD%E4%BD%BF%E7%94%A8jwt/</link>
      <pubDate>Sun, 08 Dec 2019 15:39:17 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%9C%A8go%E4%B8%AD%E4%BD%BF%E7%94%A8jwt/</guid>
      <description>jwt-go 编写jwt工具 我们需要编写一个jwt的工具，我们在pkg下的util目录新建jwt.go，写入文件内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>Go如何生成swagger文档</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90swagger%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 27 Nov 2019 15:45:15 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90swagger%E6%96%87%E6%A1%A3/</guid>
      <description>swagger Swagger是一个简单但功能强大的API表达工具。它具有地球上最大的API工具生态系统，数以千计的开发人员，使用几乎所有的现代编程语言，</description>
    </item>
    
    <item>
      <title>Go强大的调试日志打印工具:go:Spew</title>
      <link>/post/go%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7go-spew/</link>
      <pubDate>Fri, 22 Nov 2019 11:15:12 +0000</pubDate>
      
      <guid>/post/go%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7go-spew/</guid>
      <description>引言 我们在使用Golang（Go语言）开发的过程中，会通过经常通过调试的方式查找问题的原因，解决问题，尤其是当遇到一个很棘手的问题的时候，就</description>
    </item>
    
    <item>
      <title>Go调用Python</title>
      <link>/post/go%E8%B0%83%E7%94%A8python/</link>
      <pubDate>Mon, 11 Nov 2019 13:47:29 +0000</pubDate>
      
      <guid>/post/go%E8%B0%83%E7%94%A8python/</guid>
      <description>Go-Python 环境配置 Python ：确保Python正确安装，所谓正确安装，就是在系统中能找到libpython.so(dylib)，找到Python.h。一般l</description>
    </item>
    
    <item>
      <title>time-rate源码剖析</title>
      <link>/post/time-rate%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 04 Nov 2019 14:01:16 +0000</pubDate>
      
      <guid>/post/time-rate%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>主要逻辑 Allow Allow 方法的调用链：lim.Allow() bool → lim.AllowN(time.Now(), 1) → lim.reserveN(now, n, 0).ok，因此 reserveN 方法的实现很关键 1 2 3 4 5 6 7 8 9 10 11 12 // Allow is shorthand for AllowN(time.Now(), 1). func (lim *Limiter)</description>
    </item>
    
    <item>
      <title>为什么Response.Body需要被关闭</title>
      <link>/post/%E4%B8%BA%E4%BB%80%E4%B9%88response.body%E9%9C%80%E8%A6%81%E8%A2%AB%E5%85%B3%E9%97%AD/</link>
      <pubDate>Thu, 31 Oct 2019 15:27:42 +0000</pubDate>
      
      <guid>/post/%E4%B8%BA%E4%BB%80%E4%B9%88response.body%E9%9C%80%E8%A6%81%E8%A2%AB%E5%85%B3%E9%97%AD/</guid>
      <description>为什么需要关闭? 1 2 3 4 5 6 7 Body io.ReadCloser The http Client and Transport guarantee that Body is always non-nil, even on responses without a body or responses with a zero-length body. It is the caller&amp;#39;s responsibility to close Body. The default HTTP client&amp;#39;s Transport does not attempt to reuse HTTP/1.0 or HTTP/1.1 TCP connections (&amp;#34;keep-alive&amp;#34;) unless the Body is read to</description>
    </item>
    
    <item>
      <title>Go实现层级时间轮</title>
      <link>/post/go%E5%AE%9E%E7%8E%B0%E5%B1%82%E7%BA%A7%E6%97%B6%E9%97%B4%E8%BD%AE/</link>
      <pubDate>Wed, 23 Oct 2019 17:21:10 +0000</pubDate>
      
      <guid>/post/go%E5%AE%9E%E7%8E%B0%E5%B1%82%E7%BA%A7%E6%97%B6%E9%97%B4%E8%BD%AE/</guid>
      <description>引言 在软件系统中，“在一段时间后执行一个任务” 的需求比比皆是。比如： 客户端发起 HTTP 请求后，如果在指定时间内没有收到服务器的响应，则自动断开连接</description>
    </item>
    
    <item>
      <title>Golang如何获取MySQL的各类型数据</title>
      <link>/post/golang%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96mysql%E7%9A%84%E5%90%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 23 Oct 2019 13:57:52 +0000</pubDate>
      
      <guid>/post/golang%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96mysql%E7%9A%84%E5%90%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/</guid>
      <description>数据类型对应关系 时间类型的转换 修改DSN 构建 DSN 时增加 loc 指定时区，并区增加对时间的解析。打印出来的 uri： 1 xiaoju:@tcp(127.0.0.1:3306)/test?charset=utf8&amp;amp;loc=Asia%2FShanghai&amp;amp;parseTime=true 后面的 parseTime 必须要有，用法如下： 这样</description>
    </item>
    
    <item>
      <title>Go中TrimLeft和TrimPrefix的区别</title>
      <link>/post/go%E4%B8%ADtrimleft%E5%92%8Ctrimprefix%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 21 Oct 2019 20:07:38 +0000</pubDate>
      
      <guid>/post/go%E4%B8%ADtrimleft%E5%92%8Ctrimprefix%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>问题 看这样一个例子： 1 2 3 4 5 6 7 8 9 10 11 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { str := &amp;#34;/some/key&amp;#34; fmt.Println(strings.TrimLeft(str, &amp;#34;/some&amp;#34;)) } 1 2 3 key Program exited. 上例有正确返回,再看一例: 1 2 3 4 5 6 7 8 9 10 11 package main import</description>
    </item>
    
    <item>
      <title>Go的timer和ticker用法</title>
      <link>/post/go%E7%9A%84timer%E5%92%8Cticker%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 21 Oct 2019 15:53:41 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84timer%E5%92%8Cticker%E7%94%A8%E6%B3%95/</guid>
      <description>定时器:timer time包中有两个函数可以帮我们初始化 time.Timer （类型） 在高性能场景下，不应该使用time.After，而应该使用New.Time</description>
    </item>
    
    <item>
      <title>go generate介绍</title>
      <link>/post/go-generate%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 26 Sep 2019 15:44:33 +0000</pubDate>
      
      <guid>/post/go-generate%E4%BB%8B%E7%BB%8D/</guid>
      <description>介绍 go generate命令是go 1.4版本里面新添加的一个命令，当运行go generate时，它将扫描与当前包相关的源代码文件，找出所有包含</description>
    </item>
    
    <item>
      <title>Golang读写Excel</title>
      <link>/post/golang%E8%AF%BB%E5%86%99excel/</link>
      <pubDate>Thu, 05 Sep 2019 18:06:03 +0000</pubDate>
      
      <guid>/post/golang%E8%AF%BB%E5%86%99excel/</guid>
      <description>简介 Excelize 是 Go 语言编写的用于操作 Office Excel 文档类库，基于 ECMA-376 Office OpenXML 标准。可以使用它来读取、写入由 Microsoft Excel™ 2007 及以上版本创建的 XLSX 文档。相比较其他的开源类</description>
    </item>
    
    <item>
      <title>如何优雅地比较两个未知结构的JSON</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%9C%AA%E7%9F%A5%E7%BB%93%E6%9E%84%E7%9A%84json/</link>
      <pubDate>Tue, 27 Aug 2019 10:53:46 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%9C%AA%E7%9F%A5%E7%BB%93%E6%9E%84%E7%9A%84json/</guid>
      <description>这是之前遇到的一道面试题，后来也确实在工作中实际遇到了。于是记录一下，如何（优雅的）比较两个未知结构的json。 假设，现在有两个简单的jso</description>
    </item>
    
    <item>
      <title>Go中的slice和map的比较方法</title>
      <link>/post/go%E4%B8%AD%E7%9A%84slice%E5%92%8Cmap%E7%9A%84%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 26 Aug 2019 13:21:13 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84slice%E5%92%8Cmap%E7%9A%84%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</guid>
      <description>思路 开发中经常会遇到需要比较两个slice或map包含的元素是否完全相等的情况，一般来说有两个思路： reflect比较的方法 循环遍历比较的方</description>
    </item>
    
    <item>
      <title>Go中的interface{}比较方法</title>
      <link>/post/go%E4%B8%AD%E7%9A%84interface-%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 26 Aug 2019 13:21:07 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84interface-%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</guid>
      <description>类型不确定 在不确定类型需要反射的时候，DeepEqual是我们不可不用的强大工具。 比如： 1 2 3 4 5 6 7 func main(){ m1:=map[string]interface{}{&amp;#34;a&amp;#34;:&amp;#34;1&amp;#34;, &amp;#34;b&amp;#34;:2, &amp;#34;c&amp;#34;:3}; m2:=map[string]interface{}{&amp;#34;a&amp;#34;:1, &amp;#34;c&amp;#34;:&amp;#34;3&amp;#34;, &amp;#34;b&amp;#34;:2}; fmt.Println(`reflect.DeepEqual(m1[&amp;#34;a&amp;#34;],m2[&amp;#34;a&amp;#34;]`,reflect.DeepEqual(m1[&amp;#34;a&amp;#34;],m2[&amp;#34;a&amp;#34;])); fmt.Println(`reflect.DeepEqual(m1[&amp;#34;b&amp;#34;],m2[&amp;#34;b&amp;#34;]`,reflect.DeepEqual(m1[&amp;#34;b&amp;#34;],m2[&amp;#34;b&amp;#34;])); } 执行结果： 1 2 3</description>
    </item>
    
    <item>
      <title>DeepEqual浅析</title>
      <link>/post/deepequal%E6%B5%85%E6%9E%90/</link>
      <pubDate>Mon, 19 Aug 2019 20:02:22 +0000</pubDate>
      
      <guid>/post/deepequal%E6%B5%85%E6%9E%90/</guid>
      <description>规则 不同类型的值不会深度相等 Values of distinct types are never deeply equal. 1 2 3 4 5 6 7 8 9 10 type S1 struct { Field int } type S2 struct { Field int } func main() { fmt.Println(reflect.DeepEqual(S1{1}, S2{1})) } 对应输出false 当两个数组的元素对</description>
    </item>
    
    <item>
      <title>Go和HTTPS</title>
      <link>/post/go%E5%92%8Chttps/</link>
      <pubDate>Mon, 19 Aug 2019 13:36:12 +0000</pubDate>
      
      <guid>/post/go%E5%92%8Chttps/</guid>
      <description>HTTPS简介 日常生活中，我们上网用的最多的应用层协议就是HTTP协议了，直至目前全世界的网站中大多数依然只支持HTTP访问。 使用Go创建一</description>
    </item>
    
    <item>
      <title>Go的map使用实践</title>
      <link>/post/go%E7%9A%84map%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 16 Aug 2019 19:29:21 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84map%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>初始化 使用 map 的时候需要注意，你需要显式地初始化才能对 map 进行操作. 1 2 var m map[string]string m[&amp;#34;a&amp;#34;]=&amp;#34;sssss&amp;#34; 上面的代码会报 panic: assignment to entry in nil map ，必须用内建的 make() 函数才行. 1 2 m:=make(map[string]string) m[&amp;#34;a&amp;#34;]=&amp;#34;sssss&amp;#34; key</description>
    </item>
    
    <item>
      <title>Go中的内置类型比较</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</link>
      <pubDate>Fri, 16 Aug 2019 16:25:53 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</guid>
      <description>概念 首先区分几个概念：变量可比较，可排序，可赋值 可赋值 规范里面对赋值是这么定义的：https://golang.org/ref/spec#A</description>
    </item>
    
    <item>
      <title>Go语言的浮点数计算</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Wed, 14 Aug 2019 18:28:02 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/</guid>
      <description>浮点数计算不精确 浮点数与整数计算 先看两个case 1 2 3 4 5 6 7 // case1: 135.90*100 ==== // float32 var f1 float32 = 135.90 fmt.Println(f1 * 100) // output:13589.999 // float64 var f2 float64 = 135.90 fmt.Println(f2 * 100) // output:13590 浮点数在单精度下, 13</description>
    </item>
    
    <item>
      <title>go语言为什么没有min/max(int, int)函数</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89min-max-int-int-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 13 Aug 2019 20:13:15 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89min-max-int-int-%E5%87%BD%E6%95%B0/</guid>
      <description>为什么没有? 我们知道go语言math包里面定义了min/max函数，但是是float64类型的，而并没有整数类型的min/max。 go语言的</description>
    </item>
    
    <item>
      <title>Go Modules 浅析</title>
      <link>/post/go-modules-%E6%B5%85%E6%9E%90/</link>
      <pubDate>Thu, 25 Jul 2019 10:49:06 +0000</pubDate>
      
      <guid>/post/go-modules-%E6%B5%85%E6%9E%90/</guid>
      <description>go mod 命令 1 2 3 4 5 6 7 8 download download modules to local cache (下载依赖的module到本地cache)) edit edit go.mod from tools or scripts (编辑go.mod文件) graph print module requirement graph (打印模块依</description>
    </item>
    
    <item>
      <title>mongo-go-driver使用总结</title>
      <link>/post/mongo-go-driver%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 16 Jul 2019 16:38:41 +0000</pubDate>
      
      <guid>/post/mongo-go-driver%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>创建main 创建文件main.go并导入bson，mongo和mongo/options包： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main</description>
    </item>
    
    <item>
      <title>types from different packages 问题浅析</title>
      <link>/post/types-from-different-packages-%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 16 Jul 2019 14:44:54 +0000</pubDate>
      
      <guid>/post/types-from-different-packages-%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</guid>
      <description>先看一段代码: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main var X interface{} type T struct{} func F() { type T struct{} X = T{} } func G() { type T struct{} _ = X.(T) } func main() { F() G() } 我们总是可以说“来</description>
    </item>
    
    <item>
      <title>为什么不要在单个sql.Tx中使用协程</title>
      <link>/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E5%9C%A8%E5%8D%95%E4%B8%AAsql.tx%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Thu, 04 Jul 2019 16:03:49 +0000</pubDate>
      
      <guid>/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E5%9C%A8%E5%8D%95%E4%B8%AAsql.tx%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B/</guid>
      <description>问题来源 简单来说就是企图在一个事务中开启多个协程执行并发查询,会出现busy buffer的问题 接下来这篇文章将尝试深入探讨产生 busy buffer 的根本原因</description>
    </item>
    
    <item>
      <title>配置sql.DB获得更好的性能</title>
      <link>/post/%E9%85%8D%E7%BD%AEsql-db%E8%8E%B7%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%80%A7%E8%83%BD/</link>
      <pubDate>Thu, 04 Jul 2019 14:44:14 +0000</pubDate>
      
      <guid>/post/%E9%85%8D%E7%BD%AEsql-db%E8%8E%B7%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%80%A7%E8%83%BD/</guid>
      <description>事实上你可以使用SetMaxOpenConns（）、SetMaxIdleConns（）和SetConnmaxLifetime（）方法。来配置</description>
    </item>
    
    <item>
      <title>Go中mysql驱动的DSN解析</title>
      <link>/post/go%E4%B8%ADmysql%E9%A9%B1%E5%8A%A8%E7%9A%84dsn%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 11 Jun 2019 16:15:20 +0000</pubDate>
      
      <guid>/post/go%E4%B8%ADmysql%E9%A9%B1%E5%8A%A8%E7%9A%84dsn%E8%A7%A3%E6%9E%90/</guid>
      <description>DSN 数据源名称具有通用格式，例如PEAR DB使用它，但没有类型前缀（可选部分用方括号标记）： 1 [username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;amp;...&amp;amp;paramN=valueN] DSN最完整的形式： 1 username:password@protocol(address)/dbname?param=value 除databasena</description>
    </item>
    
    <item>
      <title>Go的sql事务如何使用</title>
      <link>/post/go%E7%9A%84sql%E4%BA%8B%E5%8A%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 06 Jun 2019 16:35:08 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84sql%E4%BA%8B%E5%8A%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</guid>
      <description>defer防止panic 利用 Commit() 之后 Rollback() 不会真正执行的特性,可以在创建tx时使用defer防止panic出现没有释放tx 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>println与fmt.Println</title>
      <link>/post/println%E4%B8%8Efmt-println/</link>
      <pubDate>Tue, 04 Jun 2019 16:42:08 +0000</pubDate>
      
      <guid>/post/println%E4%B8%8Efmt-println/</guid>
      <description>简介 println是一种内置于语言中的函数。它位于规范的Bootstrapping部分。 当前实现提供了几个在引导期间有用的内置函数。记录这些</description>
    </item>
    
    <item>
      <title>Go中的nil解析</title>
      <link>/post/go%E4%B8%AD%E7%9A%84nil%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 04 Jun 2019 14:31:13 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84nil%E8%A7%A3%E6%9E%90/</guid>
      <description>定义 nil 为预声明的标示符，定义在builtin/builtin.go， 1 2 3 4 5 6 7 8 9 // nil is a predeclared identifier representing the zero value for a // pointer, channel, func, interface, map, or slice type. // Type must be a pointer,</description>
    </item>
    
    <item>
      <title>Go处理数据库的NULL</title>
      <link>/post/go%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84null/</link>
      <pubDate>Tue, 04 Jun 2019 11:32:07 +0000</pubDate>
      
      <guid>/post/go%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84null/</guid>
      <description>golang是强类型语言，在赋值和解析过程中需要先定义好数据类型，否在会报类型错误，下面总结在处理数据库表时遇到字段为空或零值的情况 场景 假如</description>
    </item>
    
    <item>
      <title>Go语言MySQL中如何为单个事务设置隔离级别</title>
      <link>/post/go%E8%AF%AD%E8%A8%80mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8D%95%E4%B8%AA%E4%BA%8B%E5%8A%A1%E8%AE%BE%E7%BD%AE%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Thu, 25 Apr 2019 16:16:38 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8D%95%E4%B8%AA%E4%BA%8B%E5%8A%A1%E8%AE%BE%E7%BD%AE%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>MySQL 相比起简单的锁表，事务提供了更好的并发性能，但同时也带来更大的复杂性，如隔离级别，mvcc，死锁等。网上关于事务隔离级别的介绍遍地都是，就</description>
    </item>
    
    <item>
      <title>Go中捕获panic信息到日志文件中</title>
      <link>/post/go%E4%B8%AD%E6%8D%95%E8%8E%B7panic%E4%BF%A1%E6%81%AF%E5%88%B0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E4%B8%AD/</link>
      <pubDate>Mon, 22 Apr 2019 10:36:47 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E6%8D%95%E8%8E%B7panic%E4%BF%A1%E6%81%AF%E5%88%B0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E4%B8%AD/</guid>
      <description>根据“墨菲定律”，我们编写的后台的服务都有出现crash的可能，一种情况是Go的后台服务我们经常也会遇到panic的情况。出问题不可怕，我们</description>
    </item>
    
    <item>
      <title>Go语言在Linux终端输出彩色字符</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Thu, 18 Apr 2019 13:13:00 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2%E5%AD%97%E7%AC%A6/</guid>
      <description>Linux终端输出颜色 开发工作中经常见到终端中各种命令输出的彩色文字，例如 ls 命令就以不同颜色表示文件的不同类型。 而在我们自己写的程序输出的信</description>
    </item>
    
    <item>
      <title>Golang的单引号、双引号与反引号</title>
      <link>/post/golang%E7%9A%84%E5%8D%95%E5%BC%95%E5%8F%B7%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8D%E5%BC%95%E5%8F%B7/</link>
      <pubDate>Sun, 14 Apr 2019 16:45:01 +0000</pubDate>
      
      <guid>/post/golang%E7%9A%84%E5%8D%95%E5%BC%95%E5%8F%B7%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8D%E5%BC%95%E5%8F%B7/</guid>
      <description>简介 一个Go语言字符串是一个任意字节的常量序列。Go语言的字符串类型在本质上就与其他语言的字符串类型不同。 Java的String、C++的s</description>
    </item>
    
    <item>
      <title>如何优雅处理Go错误</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86go%E9%94%99%E8%AF%AF/</link>
      <pubDate>Fri, 05 Apr 2019 21:50:59 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86go%E9%94%99%E8%AF%AF/</guid>
      <description>Error vs Exception error的定义 Go error 就是普通的一个接口，普通的值。 1 2 3 4 5 // The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error() string } 只要实现了Er</description>
    </item>
    
    <item>
      <title>Go中的内置函数</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 04 Apr 2019 17:19:42 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description>func new 1 func new(Type) *Type 内建函数new分配内存。其第一个实参为类型，而非值。其返回值为指向该类型的新分配的零值的指针。 在调用new函数时，将类型名作为参</description>
    </item>
    
    <item>
      <title>神奇的2006-01-02 15:04:05</title>
      <link>/post/%E7%A5%9E%E5%A5%87%E7%9A%842006-01-02-15-04-05/</link>
      <pubDate>Wed, 13 Feb 2019 16:58:24 +0000</pubDate>
      
      <guid>/post/%E7%A5%9E%E5%A5%87%E7%9A%842006-01-02-15-04-05/</guid>
      <description>神奇的日期 刚接触Golang时，阅读代码的时候总会在代码中发现这么一个日期， 1 2006-01-02 15:04:05 刚看到这段代码的时候，我当时想：这个人好随便啊，随便写一个</description>
    </item>
    
    <item>
      <title>Go中接口的类型转换与判断</title>
      <link>/post/go%E4%B8%AD%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 28 Jan 2019 19:22:50 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%88%A4%E6%96%AD/</guid>
      <description>类型转换和类型断言 Go语言的类型转换和类型断言: 类型转换在编译期完成，包括强制转换和隐式转换 类型断言在运行时确定，包括安全类型断言和非安全类</description>
    </item>
    
    <item>
      <title>Go中的内置类型转换</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sat, 26 Jan 2019 21:22:18 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>隐型转换 转换是T（x）形式的表达式，其中T是类型，x是可以转换为类型T的表达式。 1 Conversion = Type &amp;#34;(&amp;#34; Expression [ &amp;#34;,&amp;#34; ] &amp;#34;)&amp;#34; . 如果类型以operator *或&amp;lt;</description>
    </item>
    
    <item>
      <title>Go中获取程序所在目录</title>
      <link>/post/go%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Fri, 25 Jan 2019 15:47:00 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95/</guid>
      <description>代码1： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path/filepath&amp;#34; ) func main() { dir, err := filepath.Abs(filepath.Dir(os.Args[0])) if err != nil { log.Fatal(err) } fmt.Println(dir) } 代码2： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( &amp;#34;fmt&amp;#34;</description>
    </item>
    
    <item>
      <title>Go中文件及文件夹相关操作</title>
      <link>/post/go%E4%B8%AD%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 25 Jan 2019 14:43:50 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</guid>
      <description>万物皆文件 UNIX 的一个基础设计就是&amp;quot;万物皆文件&amp;quot;(everything is a file)。我们不必知道一个文件到底映射成什么，操</description>
    </item>
    
    <item>
      <title>Go实现重入锁</title>
      <link>/post/go%E5%AE%9E%E7%8E%B0%E9%87%8D%E5%85%A5%E9%94%81/</link>
      <pubDate>Fri, 25 Jan 2019 13:18:41 +0000</pubDate>
      
      <guid>/post/go%E5%AE%9E%E7%8E%B0%E9%87%8D%E5%85%A5%E9%94%81/</guid>
      <description>重入锁 接下来,我们来讨论“重入”这个问题。在说这个问题前,我先解释一下个概念,叫“可重入锁”。 当一个线程获取锁时,如果没有其它线程拥有这个锁</description>
    </item>
    
    <item>
      <title>Go语言的可变参数详解</title>
      <link>/post/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 15 Jan 2019 20:46:21 +0000</pubDate>
      
      <guid>/post/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>什么是可变参数函数？ 可变参数函数即其参数数量是可变的 —— 0 个或多个。声明可变参数函数的方式是在其参数类型前带上省略符（三个点）前缀。 译者注：</description>
    </item>
    
    <item>
      <title>GO中使用select实现带优先级的channel队列</title>
      <link>/post/go%E4%B8%AD%E4%BD%BF%E7%94%A8select%E5%AE%9E%E7%8E%B0%E5%B8%A6%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84channel%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 09 Jan 2019 20:39:44 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E4%BD%BF%E7%94%A8select%E5%AE%9E%E7%8E%B0%E5%B8%A6%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84channel%E9%98%9F%E5%88%97/</guid>
      <description>一般Go语言同时使用多个channel的方法是使用select/case语句配合&amp;lt;-操作符，比如 1 2 3 4 5 6 select { case &amp;lt;- chan1: // do something case &amp;lt;- chan2: // do</description>
    </item>
    
    <item>
      <title>在GO中用名字调用函数</title>
      <link>/post/%E5%9C%A8go%E4%B8%AD%E7%94%A8%E5%90%8D%E5%AD%97%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 09 Jan 2019 16:12:05 +0000</pubDate>
      
      <guid>/post/%E5%9C%A8go%E4%B8%AD%E7%94%A8%E5%90%8D%E5%AD%97%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>Golang 中的函数跟 C 的一样，是个代码块，由于golong中函数也是类型,它可以像其他类型那样赋值给一个变量。 在 Golang 中，你不能这样做： 1 2 3 4 5 func foobar() {</description>
    </item>
    
    <item>
      <title>append的陷阱</title>
      <link>/post/append%E7%9A%84%E9%99%B7%E9%98%B1/</link>
      <pubDate>Sat, 05 Jan 2019 11:24:39 +0000</pubDate>
      
      <guid>/post/append%E7%9A%84%E9%99%B7%E9%98%B1/</guid>
      <description>背景 问题代码如下： 1 2 3 4 5 6 7 8 9 10 11 package main import &amp;#34;fmt&amp;#34; func main() { s := []byte(&amp;#34;&amp;#34;) s1 := append(s, &amp;#39;a&amp;#39;) s2 := append(s, &amp;#39;b&amp;#39;) //fmt.Println(s1, &amp;#34;==========&amp;#34;, s2) fmt.Println(string(s1), &amp;#34;==========&amp;#34;, string(s2)) } // 出现个让我理解不了的现象, 注释时候输出是 b ========== b //</description>
    </item>
    
    <item>
      <title>database-sql包源码剖析</title>
      <link>/post/database-sql%E5%8C%85%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 20 Dec 2018 15:40:47 +0000</pubDate>
      
      <guid>/post/database-sql%E5%8C%85%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>连接与连接池 database/sql database/sql是golang的标准库之一，它提供了一系列接口方法，用于访问关系数据库。它并不会提供数据库特有的方法，</description>
    </item>
    
    <item>
      <title>Go连接MySql数据库too many connections错误解决</title>
      <link>/post/go%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93too-many-connections%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 20 Dec 2018 14:07:16 +0000</pubDate>
      
      <guid>/post/go%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93too-many-connections%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</guid>
      <description>连接Mysql数据库，在有一定量的查询结果以后，会出先too many connection的错误。 google了一下，很多文章都建议修改MySql的</description>
    </item>
    
    <item>
      <title>如何优雅控制goroutine</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E6%8E%A7%E5%88%B6goroutine/</link>
      <pubDate>Fri, 14 Dec 2018 18:17:38 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E6%8E%A7%E5%88%B6goroutine/</guid>
      <description>Goroutine Processes and Threads 操作系统会为该应用程序创建一个进程。作为一个应用程序，它像一个为所有资源而运行的容器。这些资源包括内存地址空间、文件句柄、设备和线程</description>
    </item>
    
    <item>
      <title>Golang中的闭包</title>
      <link>/post/golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</link>
      <pubDate>Thu, 13 Dec 2018 20:24:03 +0000</pubDate>
      
      <guid>/post/golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</guid>
      <description>闭包 在函数编程中经常用到闭包，闭包是什么？它是怎么产生的及用来解决什么问题呢?先给出闭包的字面定义：闭包是由函数及其相关引用环境组合而成的实</description>
    </item>
    
    <item>
      <title>Go实现HTTP长连接和短连接</title>
      <link>/post/go%E5%AE%9E%E7%8E%B0http%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Thu, 13 Dec 2018 15:33:35 +0000</pubDate>
      
      <guid>/post/go%E5%AE%9E%E7%8E%B0http%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5/</guid>
      <description>TCP的长连接与短连接 Server和Client建立通讯后，确保连接的及时断开就非常重要。否则，多个客户端长时间占用着连接不关闭，是非常可怕</description>
    </item>
    
    <item>
      <title>Go中的可寻址详解</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%AF%BB%E5%9D%80%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 12 Dec 2018 20:02:18 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%AF%BB%E5%9D%80%E8%AF%A6%E8%A7%A3/</guid>
      <description>Go语言规范中规定了可寻址(addressable)对象的定义, For an operand x of type T, the address operation &amp;amp;x generates a pointer of type *T to x. The operand must be addressable, that is, either a variable, pointer indirection, or slice indexing operation; or a field</description>
    </item>
    
    <item>
      <title>空结构体struct{}解析</title>
      <link>/post/%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93struct-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 12 Dec 2018 17:41:14 +0000</pubDate>
      
      <guid>/post/%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93struct-%E8%A7%A3%E6%9E%90/</guid>
      <description>空对象 空对象是个神奇的东西。它指的是没有字段的结构类型。 1 type Q struct{} 不占用空间,长度为0 1 2 var s struct{} fmt.Println(unsafe.Sizeof(s)) // prints 0 如果结构体中仅有一个空结构字段,那么结</description>
    </item>
    
    <item>
      <title>如何优雅地关闭Go channel</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%ADgo-channel/</link>
      <pubDate>Thu, 29 Nov 2018 15:41:26 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%ADgo-channel/</guid>
      <description>几天前，我写了一篇文章来说明golang中channel的使用规范。在reddit和HN，那篇文章收到了很多赞同，但是我也收到了下面几个关于</description>
    </item>
    
    <item>
      <title>Go切片数组字符串使用实践</title>
      <link>/post/go%E5%88%87%E7%89%87%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 28 Nov 2018 14:27:26 +0000</pubDate>
      
      <guid>/post/go%E5%88%87%E7%89%87%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>切片 append函数 append主要用于给某个切片（slice）追加元素,只要slice定义后就可以使用append,不需要先初始化. 如果该</description>
    </item>
    
    <item>
      <title>Go中unsafe使用实践</title>
      <link>/post/go%E4%B8%ADunsafe%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Nov 2018 19:58:06 +0000</pubDate>
      
      <guid>/post/go%E4%B8%ADunsafe%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>指针类型 在正式介绍 unsafe 包之前，需要着重介绍 Go 语言中的指针类型。 举一个例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &amp;#34;fmt&amp;#34; func double(x int) { x += x } func main() { var a = 3 double(a) fmt.Println(a)</description>
    </item>
    
    <item>
      <title>Golang 超大文件读取的两个方案</title>
      <link>/post/golang-%E8%B6%85%E5%A4%A7%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 27 Nov 2018 10:37:47 +0000</pubDate>
      
      <guid>/post/golang-%E8%B6%85%E5%A4%A7%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%B9%E6%A1%88/</guid>
      <description>问题 比如我们有一个log文件，运行了几年，有100G之大。按照我们之前的操作可能代码会这样写： 1 2 3 4 5 6 7 func ReadFile(filePath string) []byte{ content, err := ioutil.ReadFile(filePath) if err != nil { log.Println(&amp;#34;Read error&amp;#34;) }</description>
    </item>
    
    <item>
      <title>Go中写文件的方式比较</title>
      <link>/post/go%E4%B8%AD%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 26 Nov 2018 17:33:49 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</guid>
      <description>ioutil.WriteFile 1 2 // 写入[]byte类型的data到filename文件中，文件权限为perm func WriteFile(filename string, data []byte, perm os.FileMode) error 示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import</description>
    </item>
    
    <item>
      <title>Go中读文件的方式比较</title>
      <link>/post/go%E4%B8%AD%E8%AF%BB%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 26 Nov 2018 14:27:18 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E8%AF%BB%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</guid>
      <description>使用golang语言去读取一个文件默认会有多种方式，这里主要介绍以下几种。 ioutil.ReadFile 1 2 //读取文件内容，并返回[]byte数据和错误信息。err ==</description>
    </item>
    
    <item>
      <title>寻找高效的字符串拼接方法</title>
      <link>/post/%E5%AF%BB%E6%89%BE%E9%AB%98%E6%95%88%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 23 Nov 2018 17:45:33 +0000</pubDate>
      
      <guid>/post/%E5%AF%BB%E6%89%BE%E9%AB%98%E6%95%88%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%96%B9%E6%B3%95/</guid>
      <description>实现方法 1. 直接使用运算符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func BenchmarkAddStringWithOperator(b *testing.B) { hello := &amp;#34;hello&amp;#34; world := &amp;#34;world&amp;#34; for i := 0; i &amp;lt; b.N; i++ { _ = hello + &amp;#34;,&amp;#34; + world } } func BenchmarkAddMoreStringWithOperator(b *testing.B) { hello := &amp;#34;hello&amp;#34; world := &amp;#34;world&amp;#34; for i</description>
    </item>
    
    <item>
      <title>开源Json库性能分析</title>
      <link>/post/%E5%BC%80%E6%BA%90json%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 23 Nov 2018 16:01:54 +0000</pubDate>
      
      <guid>/post/%E5%BC%80%E6%BA%90json%E5%BA%93%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>开源Json库性能分析 Json 作为一种重要的数据格式，具有良好的可读性以及自描述性，广泛地应用在各种数据传输场景中。Go 语言里面原生支持了这种数据</description>
    </item>
    
    <item>
      <title>Go中新建文件的权限与设置不符的原因与解决方案</title>
      <link>/post/go%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E4%B8%8E%E8%AE%BE%E7%BD%AE%E4%B8%8D%E7%AC%A6%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 23 Nov 2018 15:43:28 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E4%B8%8E%E8%AE%BE%E7%BD%AE%E4%B8%8D%E7%AC%A6%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>问题描述: 今天学习 Golang 文件操作实践时，当我创建一个文件（夹）出现文件权限与我代码设置不一致的问题 以下为我创建文件夹的代码： 1 2 3 4 5 6 func main() { err</description>
    </item>
    
    <item>
      <title>如何运行exec.Command时输出详细错误信息</title>
      <link>/post/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cexec-command%E6%97%B6%E8%BE%93%E5%87%BA%E8%AF%A6%E7%BB%86%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Fri, 23 Nov 2018 15:37:53 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cexec-command%E6%97%B6%E8%BE%93%E5%87%BA%E8%AF%A6%E7%BB%86%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/</guid>
      <description>当运行下面的代码时： 1 2 3 4 5 6 7 8 9 cmd := exec.Command(&amp;#34;find&amp;#34;, &amp;#34;/&amp;#34;, &amp;#34;-maxdepth&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;-exec&amp;#34;, &amp;#34;wc&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;{}&amp;#34;, &amp;#34;\\&amp;#34;) var out bytes.Buffer cmd.Stdout = &amp;amp;out err := cmd.Run() if err != nil { fmt.Println(err) return } fmt.Println(&amp;#34;Result: &amp;#34; + out.String()) 我得到这个错误： 1 exit status 1 解决方案是使用</description>
    </item>
    
    <item>
      <title>Go的交叉编译</title>
      <link>/post/go%E7%9A%84%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 15 Nov 2018 18:26:56 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>交叉编译 通俗地讲就是在一种平台上编译出能运行在体系结构不同的另一种平台上的程序，比如在PC平台（X86 CPU）上编译出能运行在以ARM为内核</description>
    </item>
    
    <item>
      <title>Go中的HTTP操作总结</title>
      <link>/post/go%E4%B8%AD%E7%9A%84http%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 15 Nov 2018 18:26:03 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84http%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
      <description>客户端:发送请求 http.Get GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中), ?分割URL和传输数据，参数之间以&amp;amp;相连. G</description>
    </item>
    
    <item>
      <title>Go中的Json编解码总结</title>
      <link>/post/go%E4%B8%AD%E7%9A%84json%E7%BC%96%E8%A7%A3%E7%A0%81%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 15 Nov 2018 18:25:06 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84json%E7%BC%96%E8%A7%A3%E7%A0%81%E6%80%BB%E7%BB%93/</guid>
      <description>编码 数据结构map json源于javascript的对象结构，golang中直接对应其数据结构，可是golang的map也是key-valu</description>
    </item>
    
    <item>
      <title>Go的堆栈打印</title>
      <link>/post/go%E7%9A%84%E5%A0%86%E6%A0%88%E6%89%93%E5%8D%B0/</link>
      <pubDate>Thu, 10 Aug 2017 14:08:15 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%A0%86%E6%A0%88%E6%89%93%E5%8D%B0/</guid>
      <description>打印全部堆栈 Stack trace是指堆栈回溯信息，在当前时间，以当前方法的执行点开始，回溯调用它的方法的方法的执行点，然后继续回溯，这样就可以跟踪整</description>
    </item>
    
  </channel>
</rss>
