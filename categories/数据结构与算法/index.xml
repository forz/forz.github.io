<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构与算法 on Forz Blog</title>
    <link>/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Jul 2020 17:32:53 +0000</lastBuildDate><atom:link href="/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存驱逐算法:W-TinyLFU</title>
      <link>/post/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AE%97%E6%B3%95w-tinylfu/</link>
      <pubDate>Sun, 26 Jul 2020 17:32:53 +0000</pubDate>
      
      <guid>/post/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AE%97%E6%B3%95w-tinylfu/</guid>
      <description>W-TinyLFU 我们有三种常见的缓存驱逐策略： FIFO:先进先出，在这种淘汰算法中，先进入缓存的会先被淘汰。这种可谓是最简单的了，但是会导致我们命中率很低</description>
    </item>
    
    <item>
      <title>判断星期几:基姆拉尔森计算公式</title>
      <link>/post/%E5%88%A4%E6%96%AD%E6%98%9F%E6%9C%9F%E5%87%A0%E5%9F%BA%E5%A7%86%E6%8B%89%E5%B0%94%E6%A3%AE%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Thu, 05 Dec 2019 18:14:56 +0000</pubDate>
      
      <guid>/post/%E5%88%A4%E6%96%AD%E6%98%9F%E6%9C%9F%E5%87%A0%E5%9F%BA%E5%A7%86%E6%8B%89%E5%B0%94%E6%A3%AE%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</guid>
      <description>需求 给定一个xxxx-xx-xx日期，计算为星期几。 设定 1 2 3 4 int y; //年 int m; //月 int d; //日 int w; //周几 从 公元0年1月1日星期日 开始 推导 对</description>
    </item>
    
    <item>
      <title>梅森旋转算法与伪随机数</title>
      <link>/post/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Wed, 09 Oct 2019 18:26:14 +0000</pubDate>
      
      <guid>/post/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>现代编程语言，大都在标准库中包含了随机库。例如，C++ 在 C++11 标准中添加了 random 头文件，提供了现代的随机库；Python 则有 random。C++11</description>
    </item>
    
    <item>
      <title>线性同余法与伪随机数</title>
      <link>/post/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Wed, 09 Oct 2019 15:10:17 +0000</pubDate>
      
      <guid>/post/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>公式定义 在离散数据及其应用中，如果 那么，称a模m同余b（或者称模m时，a等价于b），可以记为 而线性同余式就可以这样表示： 线性同余发生器与上面</description>
    </item>
    
    <item>
      <title>背包九讲</title>
      <link>/post/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</link>
      <pubDate>Fri, 15 Sep 2017 11:25:54 +0000</pubDate>
      
      <guid>/post/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</guid>
      <description>1 01背包问题 1.1 题目 1.2 基本思路 1.3 优化空间复杂度 1.4 初始化的细节问题 1.5 一个常数优化 1.6 小结 01背包问题是最基本的背包问题，它包含了背包问题中设计状</description>
    </item>
    
    <item>
      <title>排列组合的解法总结</title>
      <link>/post/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%9A%84%E8%A7%A3%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 31 Aug 2017 21:48:38 +0000</pubDate>
      
      <guid>/post/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%9A%84%E8%A7%A3%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>一.特殊元素和特殊位置优先策略 二.相邻元素捆绑策略 三.不相邻问题插空策略 四.定序问题倍缩空位插入策略 五.重排问题求幂策略 六.环排问题线排策略</description>
    </item>
    
    <item>
      <title>一道题了解动态规划</title>
      <link>/post/%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Tue, 22 Aug 2017 15:31:13 +0000</pubDate>
      
      <guid>/post/%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>题目 给定数组arr，arr中所有的值都为正数且不重复。每个值代表一种面值的货币，每种 面值的货币可以使用任意张，再给定一个整数aim代表要找的</description>
    </item>
    
    <item>
      <title>欧拉函数浅析</title>
      <link>/post/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E6%B5%85%E6%9E%90/</link>
      <pubDate>Wed, 02 Aug 2017 18:54:51 +0000</pubDate>
      
      <guid>/post/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E6%B5%85%E6%9E%90/</guid>
      <description>欧拉函数 欧拉函数用希腊字母φ表示,φ(N)表示N的欧拉函数. 对φ(N)的值,我们可以通俗地理解为小于N且与N互质的数的个数(包含1). 欧拉函</description>
    </item>
    
    <item>
      <title>GCD、扩展GCD和中国剩余定理</title>
      <link>/post/gcd%E6%89%A9%E5%B1%95gcd%E5%92%8C%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</link>
      <pubDate>Wed, 02 Aug 2017 18:54:00 +0000</pubDate>
      
      <guid>/post/gcd%E6%89%A9%E5%B1%95gcd%E5%92%8C%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</guid>
      <description>辗转相除法 辗转相除是求两个数的最大公约数的。 要证这个定理成立，只需要证明 gcd(a, b) = gcd(b, a % b) 就行了 证明：令a % b = r, 所以a = k * b + r, 所以r = a -</description>
    </item>
    
    <item>
      <title>矩阵快速幂解析</title>
      <link>/post/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 02 Aug 2017 12:48:59 +0000</pubDate>
      
      <guid>/post/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%9E%90/</guid>
      <description>快速幂 题目:Implement pow(x, n). 解析：快速幂，此处需要判断边界值n，如果n为-2^31，那么需要另外设置一个long long变量存储其相反</description>
    </item>
    
    <item>
      <title>最小生成树算法总结</title>
      <link>/post/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 01 Aug 2017 23:07:09 +0000</pubDate>
      
      <guid>/post/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>Prim 基本思想 Prim算法根据点进行求解. 对于图G而言，V是所有顶点的集合；现在，设置两个新的集合U和T，其中U用于存放G的最小生成树中的顶点，</description>
    </item>
    
    <item>
      <title>最短路径算法总结</title>
      <link>/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 31 Jul 2017 14:45:52 +0000</pubDate>
      
      <guid>/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>BFS 4. 举例 题目: 用一个整型矩阵matrix表示一个网络，1代表有路，0代表无路，每一个位置只要不越界，都有上下左右4个方向，求从最左上角到最右</description>
    </item>
    
    <item>
      <title>哈弗曼树详解</title>
      <link>/post/%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 20 Jul 2017 13:51:59 +0000</pubDate>
      
      <guid>/post/%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、哈夫曼树的定义 什么是哈夫曼树？ 让我们先举一个例子。 判定树： 在很多问题的处理过程中，需要进行大量的条件判断，这些判断结构的设计直接影响着程</description>
    </item>
    
    <item>
      <title>KMP算法详解</title>
      <link>/post/kmp%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 28 Jun 2017 21:17:06 +0000</pubDate>
      
      <guid>/post/kmp%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>算法目标 kmp算法完成的任务是：给定两个字符串O和f，长度分别为n和m，判断f是否在O中出现，如果出现则返回出现的位置。常规方法是遍历a的每</description>
    </item>
    
    <item>
      <title>八大经典排序算法</title>
      <link>/post/%E5%85%AB%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:48 +0000</pubDate>
      
      <guid>/post/%E5%85%AB%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>八大排序算法总结 排序算法稳定性 假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中</description>
    </item>
    
    <item>
      <title>二叉树的类型</title>
      <link>/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:38 +0000</pubDate>
      
      <guid>/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>二叉树的定义 二叉树是每个节点最多有两个子树的树结构。它有五种基本形态：二叉树可以是空集；根可以有空的左子树或右子树；或者左、右子树皆为空。 二</description>
    </item>
    
    <item>
      <title>位图排序</title>
      <link>/post/%E4%BD%8D%E5%9B%BE%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:30 +0000</pubDate>
      
      <guid>/post/%E4%BD%8D%E5%9B%BE%E6%8E%92%E5%BA%8F/</guid>
      <description>计数排序与位图排序 计数排序(Counting sort)是一种稳定的线性时间排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组</description>
    </item>
    
    <item>
      <title>根据数据范围选择解题方法</title>
      <link>/post/%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E9%80%89%E6%8B%A9%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 25 Jun 2017 22:45:00 +0000</pubDate>
      
      <guid>/post/%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E9%80%89%E6%8B%A9%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95/</guid>
      <description>N&amp;lt;=10 • O(N!) • 全排列枚举 N&amp;lt;=15 • O(2^N) • 01规划 • 状压dp N&amp;lt;=50 • O(N^4) • 枚举一个矩形(x,y),(x+w,y+h) N&amp;lt;=100 • O(N^3) • Floyd求任意两点最短路 • 高斯消元 N&amp;lt;=1000</description>
    </item>
    
    <item>
      <title>AVL树详解</title>
      <link>/post/avl%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:51 +0000</pubDate>
      
      <guid>/post/avl%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载： http://www.cnblogs.com/QG-whz/p/5167238.html. http://blog.csdn.net/sp_programmer/article/details/41812787. 定义 AVL树又称为高度平衡的二叉搜索树。它能保持二叉树的高度平衡，尽量降低二叉树的高度，减少树的平均搜索长度。 性质 AVL树本质上还</description>
    </item>
    
    <item>
      <title>红黑树详解</title>
      <link>/post/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:42 +0000</pubDate>
      
      <guid>/post/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载： http://www.cnblogs.com/skywang12345/p/3245399.html http://blog.csdn.net/v_july_v/article/details/6105630 简介 红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。 红黑树能够以O(lgn) 的时间复</description>
    </item>
    
    <item>
      <title>海量数据处理总结</title>
      <link>/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:31 +0000</pubDate>
      
      <guid>/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>转载：http://blog.csdn.net/v_july_v/article/details/7382693 前言 一般而言，标题含有“秒杀</description>
    </item>
    
    <item>
      <title>从B树、B&#43;树、B*树谈到R树</title>
      <link>/post/%E4%BB%8Eb%E6%A0%91b-%E6%A0%91b-%E6%A0%91%E8%B0%88%E5%88%B0r%E6%A0%91/</link>
      <pubDate>Sun, 25 Jun 2017 22:44:23 +0000</pubDate>
      
      <guid>/post/%E4%BB%8Eb%E6%A0%91b-%E6%A0%91b-%E6%A0%91%E8%B0%88%E5%88%B0r%E6%A0%91/</guid>
      <description>前言 动态查找树主要有：二叉查找树（Binary Search Tree），平衡二叉查找树（Balanced Binary Search Tree），红黑树(Red-Black Tree )，</description>
    </item>
    
  </channel>
</rss>
