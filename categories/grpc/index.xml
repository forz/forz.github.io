<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GRPC on Forz Blog</title>
    <link>/categories/grpc/</link>
    <description>Recent content in GRPC on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 10 May 2021 18:51:00 +0000</lastBuildDate><atom:link href="/categories/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GRPC的重试机制</title>
      <link>/post/grpc%E7%9A%84%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 10 May 2021 18:51:00 +0000</pubDate>
      
      <guid>/post/grpc%E7%9A%84%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6/</guid>
      <description>当我们连接到一个失败的后端时，通常希望不要立即重试(以避免泛滥的网络或服务器的请求)，而是做某种形式的指数backoff。 我们有几个参数： INITIAL_BACKOFF</description>
    </item>
    
    <item>
      <title>GRPC的超时机制</title>
      <link>/post/grpc%E7%9A%84%E8%B6%85%E6%97%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 10 May 2021 18:38:20 +0000</pubDate>
      
      <guid>/post/grpc%E7%9A%84%E8%B6%85%E6%97%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>源码分析 我们发现，不仅是 Go gRPC 服务之间超时可以传递（如果你拿到上游的 ctx 继续往下透传的话）。Go 和 Java 服务之间，超时也会随着调用链传递。那么 gRPC 的超</description>
    </item>
    
    <item>
      <title>GRPC的健康检查</title>
      <link>/post/grpc%E7%9A%84%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Fri, 07 May 2021 14:28:39 +0000</pubDate>
      
      <guid>/post/grpc%E7%9A%84%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid>
      <description>介绍 Health checks用于探测服务器是否能够处理rpc请求。客户端到服务器的运行状况检查可以通过点对点或某些控制系统进行。服务器可能未准备好接受</description>
    </item>
    
    <item>
      <title>GRPC的服务发现与负载均衡</title>
      <link>/post/grpc%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Fri, 22 Jan 2021 23:13:10 +0000</pubDate>
      
      <guid>/post/grpc%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>负载均衡的方法 构建高可用、高性能的通信服务，通常采用服务注册与发现、负载均衡和容错处理等机制实现。根据负载均衡实现所在的位置不同，通常可分为</description>
    </item>
    
    <item>
      <title>GRPC的ClientConn源码剖析</title>
      <link>/post/grpc%E7%9A%84clientconn%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 22 Jan 2021 18:03:09 +0000</pubDate>
      
      <guid>/post/grpc%E7%9A%84clientconn%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>基本概念 ClientConn 对象是连接管理的入口，表示到服务端的一个逻辑的连接，会做名字解析、负载均衡、KeepAlive 等连接管理方面的操作，是个线程安全的</description>
    </item>
    
    <item>
      <title>GRPC如何支持HTTP</title>
      <link>/post/grpc%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81http/</link>
      <pubDate>Fri, 11 Sep 2020 18:10:07 +0000</pubDate>
      
      <guid>/post/grpc%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81http/</guid>
      <description>grpc基于HTTP/2 grpc的client和server通信是基于HTTP/2，client发出的消息是HTTP/2协议格式，serve</description>
    </item>
    
  </channel>
</rss>
