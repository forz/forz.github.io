<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go-Micro on Forz Blog</title>
    <link>/categories/go-micro/</link>
    <description>Recent content in Go-Micro on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 13 Apr 2020 18:27:03 +0000</lastBuildDate>
    
	<atom:link href="/categories/go-micro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Micro使用:实现GRPC网关</title>
      <link>/post/go-micro%E4%BD%BF%E7%94%A8%E5%AE%9E%E7%8E%B0grpc%E7%BD%91%E5%85%B3/</link>
      <pubDate>Mon, 13 Apr 2020 18:27:03 +0000</pubDate>
      
      <guid>/post/go-micro%E4%BD%BF%E7%94%A8%E5%AE%9E%E7%8E%B0grpc%E7%BD%91%E5%85%B3/</guid>
      <description>预置条件 我们需要下面准备工作： 安装protobuf: 1 2 3 4 5 6 7 8 9 mkdir tmp cd tmp git clone https://github.com/google/protobuf cd protobuf ./autogen.sh ./configure make make check sudo make install 安装插件 1 2 go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway go get -u github.com/micro/protobuf/protoc-gen-go Greeter Service 例子</description>
    </item>
    
    <item>
      <title>Go Micro使用:客户端中间件</title>
      <link>/post/go-micro%E4%BD%BF%E7%94%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Sun, 12 Apr 2020 22:16:08 +0000</pubDate>
      
      <guid>/post/go-micro%E4%BD%BF%E7%94%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>日志中间件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65</description>
    </item>
    
    <item>
      <title>Go-Micro使用:构建GRPC服务端与客户端</title>
      <link>/post/go-micro%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BAgrpc%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <pubDate>Sun, 12 Apr 2020 17:23:48 +0000</pubDate>
      
      <guid>/post/go-micro%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BAgrpc%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <description>proto hello.proto 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 syntax = &amp;#34;proto3&amp;#34;;package go.micro.srv.greeter;service Say { rpc Hello(Request) returns (Response) {}}message Request { string name = 1;}message Response { string msg = 1;} 执行命令: 1 protoc --proto_path=. --micro_out=. --go_out=. hello.proto 生成代码: hello.pb.go: 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>Go-Micro使用:HTTP服务注册与发现</title>
      <link>/post/go-micro%E4%BD%BF%E7%94%A8http%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Sun, 12 Apr 2020 09:56:41 +0000</pubDate>
      
      <guid>/post/go-micro%E4%BD%BF%E7%94%A8http%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</guid>
      <description>服务注册 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package main import ( &amp;#34;github.com/micro/go-micro/v2/registry&amp;#34; &amp;#34;github.com/micro/go-micro/v2/registry/etcd&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;github.com/micro/go-micro/v2/web&amp;#34; ) type Say struct{} func (s *Say) Anything(c *gin.Context) { log.Print(&amp;#34;Received Say.Anything</description>
    </item>
    
    <item>
      <title>Go Micro构建HTTP服务</title>
      <link>/post/go-micro%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Sat, 11 Apr 2020 22:39:34 +0000</pubDate>
      
      <guid>/post/go-micro%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;github.com/micro/go-micro/v2/web&amp;#34; ) type Say struct{} func (s *Say) Anything(c *gin.Context) { log.Print(&amp;#34;Received Say.Anything API request&amp;#34;) c.JSON(200, map[string]string{ &amp;#34;message&amp;#34;: &amp;#34;Hi, this is the Greeter</description>
    </item>
    
    <item>
      <title>Go-Micro初探及其底层架构</title>
      <link>/post/go-micro%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2%E5%8F%8A%E5%85%B6%E5%BA%95%E5%B1%82%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Fri, 10 Apr 2020 15:39:32 +0000</pubDate>
      
      <guid>/post/go-micro%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2%E5%8F%8A%E5%85%B6%E5%BA%95%E5%B1%82%E6%9E%B6%E6%9E%84/</guid>
      <description>Go Micro 简介与设计理念 Go Micro 是一个基于 Go 语言编写的、用于构建微服务的基础框架，提供了分布式开发所需的核心组件，包括 RPC 和事件驱动通信等。 它的设计哲学</description>
    </item>
    
  </channel>
</rss>