<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go源码 on Forz Blog</title>
    <link>/categories/go%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in Go源码 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 17 Feb 2022 20:50:34 +0000</lastBuildDate><atom:link href="/categories/go%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go的Finalizer源码剖析</title>
      <link>/post/go%E7%9A%84finalizer%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 17 Feb 2022 20:50:34 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84finalizer%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>SetFinalizer runtime.SetFinalizer: 1 func SetFinalizer(obj interface{}, finalizer interface{}) 对象可以关联一个SetFinalizer函数， 当gc检测到unreachable对象有关联的SetFinalizer函数时，</description>
    </item>
    
    <item>
      <title>运行时同步原语源码剖析</title>
      <link>/post/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 19 Aug 2021 15:54:50 +0000</pubDate>
      
      <guid>/post/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 Go 的运行时能够直接接触到操作系统内核级的同步原语，note 和 mutex 分别是 Go 运行时实现的一次性通知机制和互斥锁机制， 其实现是操作系统特定的，这</description>
    </item>
    
    <item>
      <title>基本数据结构map源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84map%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 01 Jul 2021 20:22:12 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84map%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 本节会介绍 Go 语言的哈希的实现原理，哈希是除了数组之外，最常见的数据结构。几乎所有的语言都会有数组和哈希表两种集合元素，有的语言将数组实现</description>
    </item>
    
    <item>
      <title>基本数据结构array,slice,string源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84arrayslicestring%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 30 Jun 2021 18:21:33 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84arrayslicestring%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>array 数组和切片是 Go 语言中常见的数据结构，很多刚刚使用 Go 的开发者往往会混淆这两个概念。数组作为最常见的集合在编程语言中是非常重要的，除了数组之外</description>
    </item>
    
    <item>
      <title>函数调用源码剖析</title>
      <link>/post/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 30 Jun 2021 12:40:39 +0000</pubDate>
      
      <guid>/post/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 函数是 Go 语言的一等公民，掌握和理解函数的调用过程是我们深入学习 Go 无法跳过的，本节将从函数的调用惯例和参数传递方法两个方面分别介绍函数的执</description>
    </item>
    
    <item>
      <title>interface和reflect源码剖析</title>
      <link>/post/interface%E5%92%8Creflect%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 28 Jun 2021 11:13:34 +0000</pubDate>
      
      <guid>/post/interface%E5%92%8Creflect%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>interface Go 语言中的接口是一组方法的签名，它是 Go 语言的重要组成部分。使用接口能够让我们写出易于测试的代码，然而很多工程师对 Go 的接口了解都非常有限，也</description>
    </item>
    
    <item>
      <title>基本原语panic和recover源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADpanic%E5%92%8Crecover%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Sun, 20 Jun 2021 20:28:45 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADpanic%E5%92%8Crecover%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 本节将分析 Go 语言中两个经常成对出现的两个关键字 — panic 和 recover。这两个关键字与上一节提到的 defer 有紧密的联系，它们都是 Go 语言中的内置函数</description>
    </item>
    
    <item>
      <title>基本原语defer源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADdefer%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 18 Jun 2021 16:15:12 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADdefer%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 很多现代的编程语言中都有 defer 关键字，Go 语言的 defer 会在当前函数返回前执行传入的函数，它会经常被用于关闭文件描述符、关闭数据库连接以及解锁资源</description>
    </item>
    
    <item>
      <title>基本原语make和new源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADmake%E5%92%8Cnew%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 18 Jun 2021 16:00:43 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADmake%E5%92%8Cnew%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 当我们想要在 Go 语言中初始化一个结构时，可能会用到两个不同的关键字 — make 和 new。因为它们的功能相似，所以初学者可能会对这两个关键字的作用感</description>
    </item>
    
    <item>
      <title>基本原语for和range源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADfor%E5%92%8Crange%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 14 Jun 2021 22:03:44 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADfor%E5%92%8Crange%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>汇编 循环是所有编程语言都有的控制结构，除了使用经典的三段式循环之外，Go 语言还引入了另一个关键字 range 帮助我们快速遍历数组、切片、哈希表以及 Channel 等</description>
    </item>
    
    <item>
      <title>扩展并发原语CyclicBarrier源码剖析</title>
      <link>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcyclicbarrier%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 24 May 2021 16:26:29 +0000</pubDate>
      
      <guid>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcyclicbarrier%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>CyclicBarrier允许一组 goroutine 彼此等待，到达一个共同的执行点。同时，因为它可以被重复使用，所以叫循环栅栏。具体的机制是，大家都在栅栏前</description>
    </item>
    
    <item>
      <title>扩展并发原语SingleFlight源码剖析</title>
      <link>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsingleflight%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 24 May 2021 14:36:41 +0000</pubDate>
      
      <guid>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsingleflight%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>SingleFlight SingleFlight 是 Go 开发组提供的一个扩展并发原语。它的作用是,在处理多个 goroutine 同时调用同一个函数的时候,只让一个 goroutine 去调用这个函数,等到这个 goroutine 返回结果的时候,</description>
    </item>
    
    <item>
      <title>扩展并发原语Semaphore源码剖析</title>
      <link>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsemaphore%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 24 May 2021 13:15:08 +0000</pubDate>
      
      <guid>/post/%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsemaphore%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>信号量 信号量的概念是荷兰计算机科学家 Edsger Dijkstra 在 1963 年左右提出来的,广泛应用在不同的操作系统中。在系统中,会给每一个进程一个信号量,代表每个进程目前</description>
    </item>
    
    <item>
      <title>并发原语atomic源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADatomic%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:39:43 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADatomic%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>atomic 原理 在现在的系统中,write 的地址基本上都是对齐的(aligned)。 比如,32 位的操作系统、CPU 以及编译器,write 的地址总是 4 的</description>
    </item>
    
    <item>
      <title>并发原语context源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcontext%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:38:37 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcontext%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Context 上下文 context.Context Go 语言中用来设置截止日期、同步信号，传递请求相关值的结构体。上下文与 Goroutine 有比较密切的关系，是 Go 语言中独特的设计，在其他编程语言中我们</description>
    </item>
    
    <item>
      <title>并发原语Sync-Pool源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-pool%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:37:59 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-pool%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 sync.Pool 数据类型用来保存一组可独立访问的临时对象。请注意这里的“临时”这两个字,它说明了 sync.Pool 这个数据类型的特点,也就是说,它池化的对象会在未来的</description>
    </item>
    
    <item>
      <title>并发原语Sync-Map源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-map%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:37:20 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-map%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Map Go 内建的 map 类型不是线程安全的,所以 Go 1.9 中增加了一个线程安全的 map,也就是 sync.Map。但是,我们一定要记住,这个 sync.Map 并不是用来替换内建</description>
    </item>
    
    <item>
      <title>并发原语sync-Once源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-once%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:36:14 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-once%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Once 很多人认为实现一个 Once 一样的并发原语很简单,只需使用一个 flag 标记是否初始化过即可,最多是用 atomic 原子操作这个 flag,但是,这个实现有一个很大的问</description>
    </item>
    
    <item>
      <title>并发原语Cond源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcond%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:35:25 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcond%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Cond 标准库中的 Cond 并发原语初始化的时候,需要关联一个 Locker 接口的实例,一般我们使用 Mutex 或者 RWMutex。 首先,Cond 关联的 Locker 实例可以通过 c.L 访问,它</description>
    </item>
    
    <item>
      <title>并发原语WatiGroup源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADwatigroup%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:32:20 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADwatigroup%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>WaitGroup sync.WaitGroup 可以达到并发 Goroutine 的执行屏障的效果，等待多个 Goroutine 执行完毕。 sync.WaitGroup 结构体中只包含两个成员变量： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description>
    </item>
    
    <item>
      <title>并发原语sync-Mutex和sync-RWMutex源码剖析</title>
      <link>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-mutex%E5%92%8Csync-rwmutex%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 21 May 2021 14:30:06 +0000</pubDate>
      
      <guid>/post/%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADsync-mutex%E5%92%8Csync-rwmutex%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Mutex Go 语言的 sync.Mutex 由两个字段 state 和 sema 组成。其中 state 表示当前互斥锁的状态，而 sema 是用于控制锁状态的信号量。 1 2 3 4 type Mutex struct { state int32 sema uint32 } 设计理念 这个案例基于两</description>
    </item>
    
    <item>
      <title>net-http源码剖析</title>
      <link>/post/net-http%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 29 Jan 2021 14:12:01 +0000</pubDate>
      
      <guid>/post/net-http%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>HTTP 超文本传输协议（Hypertext Transfer Protocol、HTTP 协议）是今天使用最广泛的应用层协议，1989 年由 Tim Berners-Lee 在 CERN 起草的协议已经成为了</description>
    </item>
    
    <item>
      <title>基本原语channel&amp;select源码剖析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADchannel%E5%92%8Cselect%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 14 Jan 2021 15:58:21 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E8%AF%ADchannel%E5%92%8Cselect%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>channel hchan Go 语言的 Channel 在运行时使用 runtime.hchan 结构体表示。我们在 Go 语言中创建新的 Channel 时，实际上创建的都是如下所示的结构： 实现 Channel 的结构并不神秘，本质上就是一个 mutex 锁</description>
    </item>
    
    <item>
      <title>Go的栈空间管理源码剖析</title>
      <link>/post/go%E7%9A%84%E6%A0%88%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 18 Dec 2020 17:46:19 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E6%A0%88%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 栈区的内存一般由编译器自动进行分配和释放，其中存储着函数的入参以及局部变量，这些参数会随着函数的创建而创建，函数的返回而消亡，一般不</description>
    </item>
    
    <item>
      <title>Go的垃圾回收源码剖析</title>
      <link>/post/go%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 30 Nov 2020 14:52:24 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>垃圾分类 垃圾分为以下两类: 语义垃圾(semantic garbage): 有的被称作内存泄露 语义垃圾指的是从语法上可达(可以通过局部、全局变量引用得到)的对象，</description>
    </item>
    
    <item>
      <title>Go的信号处理源码剖析</title>
      <link>/post/go%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 26 Nov 2020 22:58:57 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>信号与软中断 信号机制是 UNIX、类 UNIX 甚至其他 POSIX 兼容系统上规定的一种进程异步通信的限制形式。 用于提醒某个事件的发生状态。 信号被定义为整数，产生</description>
    </item>
    
    <item>
      <title>Go的内存分配源码剖析</title>
      <link>/post/go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 23 Nov 2020 10:26:14 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 内存管理的三个角色: Mutator:fancy(花哨的) word for application，其实就是你写的应用程序，它会不断地修改对象的引用</description>
    </item>
    
    <item>
      <title>Go进程的生命周期源码剖析</title>
      <link>/post/go%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 18 Nov 2020 14:34:06 +0000</pubDate>
      
      <guid>/post/go%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>runtime Go 语言是一⻔有 runtime 的语言，那么 runtime 是什么? 可以认为 runtime 是为了实现额外的功能，而在程序运行时自动 加载/运行的一些模块。 Go 语言的 runtime 包括: 这些模块中，</description>
    </item>
    
    <item>
      <title>Go的网络轮询器源码剖析</title>
      <link>/post/go%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Sat, 14 Nov 2020 22:52:29 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>导言 Go 基于 I/O multiplexing 和 goroutine scheduler 构建了一个简洁而高性能的原生网络模型(基于 Go 的 I/O 多路复用 netpoller )，提供了 goroutine-per-connection 这样简单的网络编程模式。在这种模式下，开发者使用的</description>
    </item>
    
    <item>
      <title>Go的系统监控源码剖析</title>
      <link>/post/go%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 12 Nov 2020 19:32:21 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>设计原理 Go 语言的系统监控起到了很重要的作用，它在内部启动了一个不会中止的循环，在循环的内部会轮询网络、抢占长期运行或者处于系统调用的 Goroutine 以及触</description>
    </item>
    
    <item>
      <title>Go的定时器源码剖析</title>
      <link>/post/go%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Mon, 21 Oct 2019 15:23:59 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 准确的时间对于任何一个正在运行的应用非常重要，但是在分布式系统中我们很难保证各个节点的绝对时间一致，哪怕通过 NTP 这种标准的对时协议也只能把</description>
    </item>
    
    <item>
      <title>Go的调度器源码剖析</title>
      <link>/post/go%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 12 Jul 2019 13:29:52 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>协程 进程时代 最初的计算机上面没有操作系统，更别提进程、线程和协程了。 后来，现代化的计算机有了操作系统，每个程序都是一个进程，但是操作系统在一</description>
    </item>
    
  </channel>
</rss>
