<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>etcd on Forz Blog</title>
    <link>/categories/etcd/</link>
    <description>Recent content in etcd on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 16 Sep 2019 13:50:13 +0000</lastBuildDate><atom:link href="/categories/etcd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>etcd的MVCC</title>
      <link>/post/etcd%E7%9A%84mvcc/</link>
      <pubDate>Mon, 16 Sep 2019 13:50:13 +0000</pubDate>
      
      <guid>/post/etcd%E7%9A%84mvcc/</guid>
      <description>MVCC MVCC（Multi-version Cocurrent Control）即多版本并发控制技术，多用于数据库中的事务管理，其基本思想是保存一个数据的多个历史版</description>
    </item>
    
    <item>
      <title>etcd的事务机制</title>
      <link>/post/etcd%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 07 Sep 2019 21:18:50 +0000</pubDate>
      
      <guid>/post/etcd%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</guid>
      <description>事务机制 序列化（访问序列化） 像etcd这类分布式一致性系统时常要处理非常多的来自不同并发客户端的并发请求。尽管有众多并发的读和写，原子性依然</description>
    </item>
    
    <item>
      <title>用eTcd实现选举</title>
      <link>/post/%E7%94%A8etcd%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%BE/</link>
      <pubDate>Sat, 07 Sep 2019 16:32:17 +0000</pubDate>
      
      <guid>/post/%E7%94%A8etcd%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%BE/</guid>
      <description>选举 etcd的选举则需要在我们熟悉它的一系列基本概念后，调动我们充分的想象力： 1、MVCC，key存在版本属性，没被创建时版本号为0； 2、C</description>
    </item>
    
    <item>
      <title>etcd2和3的区别</title>
      <link>/post/etcd2%E5%92%8C3%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 06 Sep 2019 21:18:46 +0000</pubDate>
      
      <guid>/post/etcd2%E5%92%8C3%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>从 etcd2 到 etcd3 etcd 最早是被设计用来解决 CoreOS 升级时机器的协调问题的。现在它被用于分布式网络、服务发现、配置管理、任务调度和负载均衡等服务中。原始设计的部</description>
    </item>
    
    <item>
      <title>用Etcd实现分布式锁</title>
      <link>/post/%E7%94%A8etcd%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Fri, 06 Sep 2019 20:49:18 +0000</pubDate>
      
      <guid>/post/%E7%94%A8etcd%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>Etcd的v3版本官方client里有一个concurrency的包，里面实现了分布式锁和选主。本文分析一下它是如何实现的。 分布式锁 在cod</description>
    </item>
    
    <item>
      <title>etcd：从应用场景到实现原理的全方位解读</title>
      <link>/post/etcd%E4%BB%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%B0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%9A%84%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Wed, 04 Sep 2019 14:39:33 +0000</pubDate>
      
      <guid>/post/etcd%E4%BB%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%B0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%9A%84%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E8%AF%BB/</guid>
      <description>很多人对这个问题的第一反应可能是，它是一个键值存储仓库，却没有重视官方定义的后半句，用于配置共享和服务发现。 A highly-available key value store for shared configuration and service discovery. 实际上，e</description>
    </item>
    
    <item>
      <title>Go如何操作etcd</title>
      <link>/post/go%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9Cetcd/</link>
      <pubDate>Mon, 02 Sep 2019 20:17:28 +0000</pubDate>
      
      <guid>/post/go%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9Cetcd/</guid>
      <description>ETCD ETCD是用于共享配置和服务发现的分布式，一致性的KV存储系统。ETCD是CoreOS公司发起的一个开源项目，授权协议为Apache。 核心</description>
    </item>
    
    <item>
      <title>etcdctl命令操作</title>
      <link>/post/etcdctl%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 23 Jun 2019 13:40:47 +0000</pubDate>
      
      <guid>/post/etcdctl%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</guid>
      <description>etcdctl v2 v3 etcd2和etcd3是不兼容的，两者的api参数也不一样，详细请查看 etcdctl -h 。 可以使用api2 和 api3 写入 etcd3 数据，但是需要注意，使用不同的a</description>
    </item>
    
    <item>
      <title>etcd部署与配置</title>
      <link>/post/etcd%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 17 Jun 2019 14:09:04 +0000</pubDate>
      
      <guid>/post/etcd%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>集群配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66</description>
    </item>
    
  </channel>
</rss>
