<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prometheus on Forz Blog</title>
    <link>/categories/prometheus/</link>
    <description>Recent content in Prometheus on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 Jul 2020 18:11:48 +0000</lastBuildDate>
    
	<atom:link href="/categories/prometheus/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prometheus的PromQL实现分析</title>
      <link>/post/prometheus%E7%9A%84promql%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 17 Jul 2020 18:11:48 +0000</pubDate>
      
      <guid>/post/prometheus%E7%9A%84promql%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</guid>
      <description>PromQL PromQL 是 Prom 中的查询语言，提供了简洁的、贴近自然语言的语法实现时序数据的分析计算。 表达式（Expression）是其中承载数据计算逻辑的部分，对</description>
    </item>
    
    <item>
      <title>Prometheus的GoClient分析</title>
      <link>/post/prometheus%E7%9A%84goclient%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 17 Jul 2020 16:43:42 +0000</pubDate>
      
      <guid>/post/prometheus%E7%9A%84goclient%E5%88%86%E6%9E%90/</guid>
      <description>整体结构分析 无论是 Prom 拉取 (pull) 数据，还是客户端主动推送 (push) 数据，都可以从 Collector 获取 Metric 的定义，UML 图描述了 Go 客户端中主要结构和接口之间的关系。 Collector pro</description>
    </item>
    
    <item>
      <title>在HTTPAPI中使用PromQL</title>
      <link>/post/%E5%9C%A8httpapi%E4%B8%AD%E4%BD%BF%E7%94%A8promql/</link>
      <pubDate>Wed, 15 Jul 2020 10:11:30 +0000</pubDate>
      
      <guid>/post/%E5%9C%A8httpapi%E4%B8%AD%E4%BD%BF%E7%94%A8promql/</guid>
      <description>在 HTTP API 中使用 PromQL Prometheus 当前稳定的 HTTP API 可以通过 /api/v1 访问。 API 响应格式 Prometheus API 使用了 JSON 格式的响应内容。 当 API 调用成功后将会返回 2xx 的 HTTP 状态码。 反之，当 API 调用失败时</description>
    </item>
    
    <item>
      <title>Prometheus的内置函数</title>
      <link>/post/prometheus%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 15 Jul 2020 10:10:14 +0000</pubDate>
      
      <guid>/post/prometheus%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description>PromQL 内置函数 Prometheus 提供了其它大量的内置函数，可以对时序数据进行丰富的处理。某些函数有默认的参数，例如：year(v=vector(time()) i</description>
    </item>
    
    <item>
      <title>Prometheus的数据存储</title>
      <link>/post/prometheus%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 15 Jul 2020 10:09:36 +0000</pubDate>
      
      <guid>/post/prometheus%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>存储 Prometheus 2.x 默认将时间序列数据库保存在本地磁盘中，同时也可以将数据保存到任意第三方的存储服务中。 本地存储 Prometheus 采用自定义的存储格式将样本数据保存在本</description>
    </item>
    
    <item>
      <title>prometheus的四种指标类型</title>
      <link>/post/promethues%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%8C%87%E6%A0%87%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 14 Jul 2020 18:28:18 +0000</pubDate>
      
      <guid>/post/promethues%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%8C%87%E6%A0%87%E7%B1%BB%E5%9E%8B/</guid>
      <description>Counter（计数器） Counter 类型代表一种样本数据单调递增的指标，即只增不减，除非监控系统发生了重置。例如，你可以使用 counter 类型的指标来表示服务的请</description>
    </item>
    
    <item>
      <title>Prometheus的client_golang</title>
      <link>/post/prometheus%E7%9A%84client_golang/</link>
      <pubDate>Tue, 14 Jul 2020 17:21:00 +0000</pubDate>
      
      <guid>/post/prometheus%E7%9A%84client_golang/</guid>
      <description>prometheus包 概述 普罗米修斯软件包是仪器仪表的核心。它为度量代码提供度量原语以进行监视。它还提供了Metric注册表。子包允许通过H</description>
    </item>
    
  </channel>
</rss>