<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB on Forz Blog</title>
    <link>/categories/mongodb/</link>
    <description>Recent content in MongoDB on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Mar 2020 16:14:17 +0000</lastBuildDate>
    
	<atom:link href="/categories/mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MongoDB分片集群机制及原理</title>
      <link>/post/mongodb%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 29 Mar 2020 16:14:17 +0000</pubDate>
      
      <guid>/post/mongodb%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/</guid>
      <description>为什么要使用分片集群？ 数据容量日益增大，访问性能日渐降低，怎么破？ 新品上线异常火爆，如何支撑更多的并发用户？ 单库已有10TB数据，恢复需要1</description>
    </item>
    
    <item>
      <title>MongoDB复制集机制及原理</title>
      <link>/post/mongodb%E5%A4%8D%E5%88%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 28 Mar 2020 22:58:32 +0000</pubDate>
      
      <guid>/post/mongodb%E5%A4%8D%E5%88%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/</guid>
      <description>复制集的作用 MongoDB复制集的主要意义在于实现服务高可用. 它的实现依赖于两个方面的功能： 数据写入时将数据迅速复制到另一个独立节点上. 在接</description>
    </item>
    
    <item>
      <title>使用模式构建</title>
      <link>/post/%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Sat, 28 Mar 2020 15:33:58 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F%E6%9E%84%E5%BB%BA/</guid>
      <description>前言 当涉及MongoDB时，一个经常被问到的问题是“我如何在MongoDB中为我的应用程序构造模式（schema）？”老实说，这要看情况而定</description>
    </item>
    
    <item>
      <title>MongoDB的文档模型设计三部曲</title>
      <link>/post/mongodb%E7%9A%84%E6%96%87%E6%A1%A3%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1%E4%B8%89%E9%83%A8%E6%9B%B2/</link>
      <pubDate>Sat, 28 Mar 2020 10:27:52 +0000</pubDate>
      
      <guid>/post/mongodb%E7%9A%84%E6%96%87%E6%A1%A3%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1%E4%B8%89%E9%83%A8%E6%9B%B2/</guid>
      <description>三部曲 MongoDB文档模型设计三部曲为基础建模,工况细化,套用设计模式: 基础建模 找到对象:根据概念模型或者业务需求推导出逻辑模型 明确关系:</description>
    </item>
    
    <item>
      <title>MongoDB的事务实现解析</title>
      <link>/post/mongodb%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 27 Mar 2020 18:47:35 +0000</pubDate>
      
      <guid>/post/mongodb%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</guid>
      <description>Session Session 是 MongoDB 3.6 版本引入的概念，引入这个特性主要就是为实现多文档事务做准备。Session 本质上就是一个「上下文」。 在以前的版本，MongoDB 只</description>
    </item>
    
    <item>
      <title>Journal与oplog</title>
      <link>/post/journal%E4%B8%8Eoplog/</link>
      <pubDate>Fri, 27 Mar 2020 16:52:07 +0000</pubDate>
      
      <guid>/post/journal%E4%B8%8Eoplog/</guid>
      <description>journal journal 是 MongoDB 存储引擎层的概念，目前 MongoDB主要支持 mmapv1、wiredtiger、mongorocks 等存储引擎，都支持配置journ</description>
    </item>
    
    <item>
      <title>MongoDB的事务机制介绍</title>
      <link>/post/mongodb%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 27 Mar 2020 16:00:16 +0000</pubDate>
      
      <guid>/post/mongodb%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D/</guid>
      <description>前言 MongoDB虽然已经在4.2开始全面支持了多文档事务，但并不代表大家应该毫无节制地使用它。相反，对事务的使用原则应该是：能不用尽量不用</description>
    </item>
    
    <item>
      <title>读事务:ReadConcern</title>
      <link>/post/%E8%AF%BB%E4%BA%8B%E5%8A%A1readconcern/</link>
      <pubDate>Thu, 26 Mar 2020 23:53:52 +0000</pubDate>
      
      <guid>/post/%E8%AF%BB%E4%BA%8B%E5%8A%A1readconcern/</guid>
      <description>综述 在读取数据的过程中我们需要关注以下两个问题 从哪里读？关注数据节点位置 什么样的数据可以读？关注数据的隔离性 第一个问题是是由 readPreference 来解決 第二个问</description>
    </item>
    
    <item>
      <title>写事务:WriteConcern</title>
      <link>/post/%E5%86%99%E4%BA%8B%E5%8A%A1writeconcern/</link>
      <pubDate>Thu, 26 Mar 2020 17:10:36 +0000</pubDate>
      
      <guid>/post/%E5%86%99%E4%BA%8B%E5%8A%A1writeconcern/</guid>
      <description>WriteConcern write Concern 決定一个写操作落到多少个节点上オ算成功。包括以下3个字段: { w: &amp;lt;value&amp;gt;, j: &amp;lt;boolean&amp;gt;, wtimeout: &amp;lt;number&amp;gt; } MongoDB支持的WriteConncern选项如下 w选项</description>
    </item>
    
  </channel>
</rss>