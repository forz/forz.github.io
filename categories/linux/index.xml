<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Forz Blog</title>
    <link>/categories/linux/</link>
    <description>Recent content in Linux on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 30 Dec 2021 18:27:17 +0000</lastBuildDate><atom:link href="/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux的进程间通信</title>
      <link>/post/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Thu, 30 Dec 2021 18:27:17 +0000</pubDate>
      
      <guid>/post/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>进程间通信(IPC) 每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内</description>
    </item>
    
    <item>
      <title>Linux的进程线程模型</title>
      <link>/post/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 30 Dec 2021 15:03:33 +0000</pubDate>
      
      <guid>/post/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>进程模型 在Linux系统中进程由以下三部分组成： 进程控制块PCB 有了这个数据结构，进程才能成为内核调度的一个基本单位接受内核的调度。同时，这</description>
    </item>
    
    <item>
      <title>Linux的ln命令介绍</title>
      <link>/post/linux%E7%9A%84%E9%93%BE%E6%8E%A5%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 06 Jun 2021 16:51:50 +0000</pubDate>
      
      <guid>/post/linux%E7%9A%84%E9%93%BE%E6%8E%A5%E5%8A%9F%E8%83%BD/</guid>
      <description>创建软链接 ln -s [源文件或目录] [目标文件或目录] 例如： 当前路径创建test 引向/var/www/test 文件夹 ln –s /var/www/test test 创建/var/tes</description>
    </item>
    
    <item>
      <title>计算机网络时间同步技术原理介绍</title>
      <link>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 26 May 2021 15:45:36 +0000</pubDate>
      
      <guid>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>前言 由计算机网络系统组成的分布式系统，若想协调一致进行：IT行业的“整点开拍”、“秒杀”、“Leader选举”，通信行业的“同步组网”之类业</description>
    </item>
    
    <item>
      <title>CPU缓存与伪共享</title>
      <link>/post/cpu%E7%BC%93%E5%AD%98%E4%B8%8E%E4%BC%AA%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Tue, 26 Jan 2021 16:15:38 +0000</pubDate>
      
      <guid>/post/cpu%E7%BC%93%E5%AD%98%E4%B8%8E%E4%BC%AA%E5%85%B1%E4%BA%AB/</guid>
      <description>前言 伪共享的非标准定义为：缓存系统中是以缓存行（cache line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行</description>
    </item>
    
    <item>
      <title>Linux的网络IO模型</title>
      <link>/post/linux%E7%9A%84%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 19 Nov 2020 11:30:00 +0000</pubDate>
      
      <guid>/post/linux%E7%9A%84%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/</guid>
      <description>用户空间与内核空间 现代操作系统都是采用虚拟存储器，那么对 32 位操作系统而言，它的寻址空间（虚拟存储空间）为 4G（2 的 32 次方）。操作系统的核心是</description>
    </item>
    
    <item>
      <title>Linux内核时钟系统和定时器实现</title>
      <link>/post/linux%E5%86%85%E6%A0%B8%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 21 Oct 2019 11:44:32 +0000</pubDate>
      
      <guid>/post/linux%E5%86%85%E6%A0%B8%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>Linux内核时钟系统和定时器实现 Linux 2.6.16之前，内核只支持低精度时钟，内核定时器的工作方式： 系统启动后，会读取时钟源设备(RTC, HP</description>
    </item>
    
    <item>
      <title>IEEE 754浮点数标准详解</title>
      <link>/post/ieee-754%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%87%E5%87%86%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 14 Aug 2019 10:50:56 +0000</pubDate>
      
      <guid>/post/ieee-754%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%87%E5%87%86%E8%AF%A6%E8%A7%A3/</guid>
      <description>前言 在计算机系统的发展过程中，业界曾经提出过许多种实数的表达方法，比较典型的有相对于浮点数（Floating Point Number）的定点数（Fix</description>
    </item>
    
    <item>
      <title>如何查看linux版本</title>
      <link>/post/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Blinux%E7%89%88%E6%9C%AC/</link>
      <pubDate>Tue, 20 Nov 2018 18:12:41 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Blinux%E7%89%88%E6%9C%AC/</guid>
      <description>在 Linux 系统之下若想要查询发行版名称与版本的资讯有许多种方法，而不同的 Linux 发行版适用的方式也不同，以下整理了一些常见的方法。 查询 Linux 发行版与版本 Linux 发</description>
    </item>
    
    <item>
      <title>Linux:too many open files问题及解决方式</title>
      <link>/post/linux-too-many-open-files%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 20 Nov 2018 17:15:36 +0000</pubDate>
      
      <guid>/post/linux-too-many-open-files%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</guid>
      <description>文件数可以从三个维度限制:分别为操作系统限制,shell限制,以及进程限制. 查看进程占用的句柄数 查看当前shell下的文件句柄数限制: ulimit -a 查</description>
    </item>
    
    <item>
      <title>Linux的信号处理机制</title>
      <link>/post/linux%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 10 Aug 2017 19:58:23 +0000</pubDate>
      
      <guid>/post/linux%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</guid>
      <description>信号 信号是事件发生时对进程的通知机制。有时也称之为软件中断。信号与硬件中断的相似之处在于打断了程序执行的正常流程，大多数情况下，无法预测信号</description>
    </item>
    
    <item>
      <title>基本进程状态和PV操作浅析</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%92%8Cpv%E6%93%8D%E4%BD%9C%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 01 Aug 2017 17:18:05 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%92%8Cpv%E6%93%8D%E4%BD%9C%E6%B5%85%E6%9E%90/</guid>
      <description>进程的三种基本状态 （1）就绪状态：进程已获得除CPU外的所有必要资源，只等待CPU时的状态。一个系统会将多个处于就绪状态的进程排成一个就绪队</description>
    </item>
    
    <item>
      <title>使用互斥锁、条件变量实现读写锁 </title>
      <link>/post/%E4%BD%BF%E7%94%A8%E4%BA%92%E6%96%A5%E9%94%81%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E9%94%81/</link>
      <pubDate>Thu, 20 Jul 2017 17:16:29 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8%E4%BA%92%E6%96%A5%E9%94%81%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E9%94%81/</guid>
      <description>要实现读写锁，首先要知道读写锁的特性，除了“读者可并发，写者要排它”之外还要考虑避免写者饥饿的问题。综合考虑后可以讲读写锁的实现总结为一下四</description>
    </item>
    
    <item>
      <title>大端模式和小端模式转化及网络字节序</title>
      <link>/post/%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F%E8%BD%AC%E5%8C%96%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E5%BA%8F/</link>
      <pubDate>Sun, 25 Jun 2017 16:49:07 +0000</pubDate>
      
      <guid>/post/%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F%E8%BD%AC%E5%8C%96%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%AD%97%E8%8A%82%E5%BA%8F/</guid>
      <description>转载：http://blog.csdn.net/szchtx/article/details/42834391 一、定义 大端模式（Big End</description>
    </item>
    
    <item>
      <title>可重入函数与不可重入函数的区别</title>
      <link>/post/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0%E4%B8%8E%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 25 Jun 2017 16:48:59 +0000</pubDate>
      
      <guid>/post/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0%E4%B8%8E%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>基本定义 可重入函数可以做这样的基本定义：重入意味着这个函数可以重复进入，可以被并行调用，可以被中断，它只使用自身栈上的数据变量，它不依赖于任</description>
    </item>
    
    <item>
      <title>Linux文件系统浅析</title>
      <link>/post/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B5%85%E6%9E%90/</link>
      <pubDate>Sun, 25 Jun 2017 14:24:05 +0000</pubDate>
      
      <guid>/post/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B5%85%E6%9E%90/</guid>
      <description>分区和目录 Linux的文件结构是单个的树状结构.可以用tree进行展示。 在Ubuntu下安装tree（sudo apt-get install tree）,并可通过命令来</description>
    </item>
    
    <item>
      <title>带缓存IO和不带缓存IO</title>
      <link>/post/%E5%B8%A6%E7%BC%93%E5%AD%98io%E5%92%8C%E4%B8%8D%E5%B8%A6%E7%BC%93%E5%AD%98io/</link>
      <pubDate>Sun, 25 Jun 2017 14:23:32 +0000</pubDate>
      
      <guid>/post/%E5%B8%A6%E7%BC%93%E5%AD%98io%E5%92%8C%E4%B8%8D%E5%B8%A6%E7%BC%93%E5%AD%98io/</guid>
      <description>系统调用 系统调用，英文名system call，每个操作系统都在内核里有一些内建的函数库，这些函数可以用来完成一些系统系统调用把应用程序的请求</description>
    </item>
    
    <item>
      <title>Linux系统内存管理</title>
      <link>/post/linux%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 25 Jun 2017 14:22:07 +0000</pubDate>
      
      <guid>/post/linux%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>地址 相关概念 物理地址 内存是由若干个存储单元组成的，每个存储单元有一个编号，这种编号可唯一标识一个存储单元，称为内存地址（或物理地址）。我们可</description>
    </item>
    
    <item>
      <title>常见的端口扫描类型及原理</title>
      <link>/post/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 25 Jun 2017 14:21:58 +0000</pubDate>
      
      <guid>/post/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%8E%9F%E7%90%86/</guid>
      <description>常见的扫描类型有以下几种： 秘密扫描是一种不被审计工具所检测的扫描技术。 它通常用于在通过普通的防火墙或路由器的筛选（filtering）时隐藏</description>
    </item>
    
    <item>
      <title>解析shutdown()和close()</title>
      <link>/post/%E8%A7%A3%E6%9E%90shutdown-%E5%92%8Cclose/</link>
      <pubDate>Sun, 25 Jun 2017 14:21:49 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90shutdown-%E5%92%8Cclose/</guid>
      <description>TCP连接的关闭有两个方法close和shutdown，这篇文章将尽量精简的说明它们分别做了些什么。 为方便阅读，我们可以带着以下5个问题来阅</description>
    </item>
    
    <item>
      <title>SOCKETOPT-SO_LINGER选项</title>
      <link>/post/socketopt-so-linger%E9%80%89%E9%A1%B9/</link>
      <pubDate>Sun, 25 Jun 2017 14:21:41 +0000</pubDate>
      
      <guid>/post/socketopt-so-linger%E9%80%89%E9%A1%B9/</guid>
      <description>当调用closesocket关闭套接字时，SO_LINGER将决定系统如何处理残存在套接字发送队列中的数据。处理方式无非两种：丢弃或者将数据</description>
    </item>
    
    <item>
      <title>SO_REUESADDR和SO_REUSEPORT</title>
      <link>/post/socketopt-so-reuesaddr%E9%80%89%E9%A1%B9/</link>
      <pubDate>Sun, 25 Jun 2017 14:21:30 +0000</pubDate>
      
      <guid>/post/socketopt-so-reuesaddr%E9%80%89%E9%A1%B9/</guid>
      <description>简介 一般来说，一个端口释放后会等待两分钟之后才能再被使用，SO_REUSEADDR是让端口释放后立即就可以被再次使用。 这个套接字选项通知内核</description>
    </item>
    
    <item>
      <title>open/read/write和fopen/fread/fwrite的区别</title>
      <link>/post/open-read-write%E5%92%8Cfopen-fread-fwrite%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 25 Jun 2017 14:21:12 +0000</pubDate>
      
      <guid>/post/open-read-write%E5%92%8Cfopen-fread-fwrite%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>介绍 open：系统调用，返回的是文件描述符，即文件句柄，是文件在文件描述副表里的索引。 fopen：C语言库函数，返回的是一个指向文件结构的指</description>
    </item>
    
    <item>
      <title>文件指针和文件描述符的区别</title>
      <link>/post/%E6%96%87%E4%BB%B6%E6%8C%87%E9%92%88%E5%92%8C%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 25 Jun 2017 14:21:03 +0000</pubDate>
      
      <guid>/post/%E6%96%87%E4%BB%B6%E6%8C%87%E9%92%88%E5%92%8C%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>FILE文件指针 C语言中使用文件指针做为I/O的句柄。文件指针指向进程用户区中的一个被称为FILE结构的数据结构。 FILE结构包括缓冲区和文</description>
    </item>
    
    <item>
      <title>利用linux的mtrace命令定位内存泄露(Memory Leak)</title>
      <link>/post/%E5%88%A9%E7%94%A8linux%E7%9A%84mtrace%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2-memory-leak/</link>
      <pubDate>Sun, 25 Jun 2017 14:19:16 +0000</pubDate>
      
      <guid>/post/%E5%88%A9%E7%94%A8linux%E7%9A%84mtrace%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2-memory-leak/</guid>
      <description>最令Linux程序员头疼的莫过于内存泄露了，即使你是在优秀的程序员，你也不能保证所以的malloc操作都有对应的free，那必要的工具就是必</description>
    </item>
    
    <item>
      <title>GCC编译器介绍</title>
      <link>/post/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 25 Jun 2017 14:19:06 +0000</pubDate>
      
      <guid>/post/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>gcc命令 gcc命令使用GNU推出的基于C/C++的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现</description>
    </item>
    
    <item>
      <title>coredump详解</title>
      <link>/post/coredump%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 25 Jun 2017 05:44:05 +0000</pubDate>
      
      <guid>/post/coredump%E8%AF%A6%E8%A7%A3/</guid>
      <description>一，什么是coredump 我们经常听到大家说到程序core掉了，需要定位解决，这里说的大部分是指对应程序由于各种异常或者bug导致在运行过程</description>
    </item>
    
    <item>
      <title>Linux运行级别</title>
      <link>/post/linux%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Sun, 25 Jun 2017 05:43:44 +0000</pubDate>
      
      <guid>/post/linux%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB/</guid>
      <description>运行级别 运行级别就是操作系统当前正在运行的功能级别。级别是从0到6，具有不同的功能。这些级别定义在/ect/inittab文件中。这个文件是</description>
    </item>
    
    <item>
      <title>Linux内核的组成部分</title>
      <link>/post/linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/</link>
      <pubDate>Sun, 25 Jun 2017 05:43:32 +0000</pubDate>
      
      <guid>/post/linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/</guid>
      <description>组成 Linux内核主要有 5个子系统组成：进程调度 (SCHED) ,内存管理 (MM) ,虚拟文件系统 (VFS) ,网络接口 (NET)和进程间通信 ( IPC )。 1、进程调度 进程在进程</description>
    </item>
    
    <item>
      <title>Linux用户态与内核态</title>
      <link>/post/linux%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8E%E5%86%85%E6%A0%B8%E6%80%81/</link>
      <pubDate>Sun, 25 Jun 2017 05:43:20 +0000</pubDate>
      
      <guid>/post/linux%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8E%E5%86%85%E6%A0%B8%E6%80%81/</guid>
      <description>一、 Unix/Linux的体系架构 如上图所示，从宏观上来看，Linux操作系统的体系架构分为用户态和内核态。 内核从本质上看是一种软件——控制</description>
    </item>
    
    <item>
      <title>Linux的进程调度算法</title>
      <link>/post/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 25 Jun 2017 05:42:58 +0000</pubDate>
      
      <guid>/post/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>常见进程调度算法 先来先服务调度算法 先来先服务(FCFS)调度算法是一种最简单的调度算法，该算法既可用于作业调度，也可用于进程调度。当在作业调</description>
    </item>
    
    <item>
      <title>Linux操作系统的组成和基本功能</title>
      <link>/post/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E6%88%90%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 25 Jun 2017 05:42:46 +0000</pubDate>
      
      <guid>/post/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E6%88%90%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/</guid>
      <description>组成 Linux系统一般有4个主要部分：内核、shell、文件系统和应用程序。内核、shell和文件系统一起形成了基本的操作系统结构，它们使得</description>
    </item>
    
    <item>
      <title>调试工具Valgrind</title>
      <link>/post/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7valgrind/</link>
      <pubDate>Sun, 25 Jun 2017 05:10:36 +0000</pubDate>
      
      <guid>/post/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7valgrind/</guid>
      <description>Valgrind是运行在Linux上一套基于仿真技术的程序调试和分析工具，是公认的最接近Purify的产品，它包含一个内核——一个软件合成的</description>
    </item>
    
    <item>
      <title>Linux启动过程详解</title>
      <link>/post/linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 25 Jun 2017 05:10:23 +0000</pubDate>
      
      <guid>/post/linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载：http://blog.chinaunix.net/uid-26495963-id-3066282.html 启动第一步－－加载BIOS</description>
    </item>
    
    <item>
      <title>字符集和编码</title>
      <link>/post/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 23 Jun 2017 20:21:32 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</guid>
      <description>1、字符集与字符编码 字符是各种文字和符号的总称，包括各个国家文字、标点符号、图形符号、数字等。字符集是多个字符的集合，字符集种类较多，每个字</description>
    </item>
    
  </channel>
</rss>
