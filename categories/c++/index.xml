<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Forz Blog</title>
    <link>/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Sep 2017 22:11:55 +0000</lastBuildDate><atom:link href="/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>虚函数与纯虚函数的区别</title>
      <link>/post/%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 05 Sep 2017 22:11:55 +0000</pubDate>
      
      <guid>/post/%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>虚函数和纯虚函数有以下方面的区别。 类里如果声明了虚函数，这个函数是实现的，哪怕是空实现，它的作用就是为了能让这个函数在它的子类里面可以被覆盖</description>
    </item>
    
    <item>
      <title>野指针及其危害</title>
      <link>/post/%E9%87%8E%E6%8C%87%E9%92%88%E5%8F%8A%E5%85%B6%E5%8D%B1%E5%AE%B3/</link>
      <pubDate>Tue, 05 Sep 2017 21:47:16 +0000</pubDate>
      
      <guid>/post/%E9%87%8E%E6%8C%87%E9%92%88%E5%8F%8A%E5%85%B6%E5%8D%B1%E5%AE%B3/</guid>
      <description>“野指针”不是NULL指针，而是指向“垃圾”内存的指针。人们一般不会错用NULL指针，因为用if语句很容易判断。但是“野指针”是很危险的，i</description>
    </item>
    
    <item>
      <title>指向常量字符串的指针</title>
      <link>/post/%E6%8C%87%E5%90%91%E5%B8%B8%E9%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 05 Sep 2017 21:39:17 +0000</pubDate>
      
      <guid>/post/%E6%8C%87%E5%90%91%E5%B8%B8%E9%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>指针的比较 数组用作比较,自动退化为指向首元素的指针. 对指针指向字符串的修改 非常量指针在初始化可以指向字符串常量. 上面的代码中，node1和n</description>
    </item>
    
    <item>
      <title>类函数与this指针</title>
      <link>/post/%E7%B1%BB%E5%87%BD%E6%95%B0%E4%B8%8Ethis%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 05 Sep 2017 16:57:43 +0000</pubDate>
      
      <guid>/post/%E7%B1%BB%E5%87%BD%E6%95%B0%E4%B8%8Ethis%E6%8C%87%E9%92%88/</guid>
      <description>这里需要明白类函数是如何被编译以及如何被执行的。 对于类成员函数而言，并不是一个对象对应一个单独的成员函数体，而是此类的所有对象共用这个成员函</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中的默认参数</title>
      <link>/post/c-%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 05 Sep 2017 16:41:31 +0000</pubDate>
      
      <guid>/post/c-%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/</guid>
      <description>C++可以给函数定义默认参数值。在函数调用时没有指定与形参相对应的实参时，就自动 使用默认参数。 默认参数的语法与使用： 在函数声明或定义时，直接</description>
    </item>
    
    <item>
      <title>如何判断一段程序是由C编译还是由C&#43;&#43;编译</title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E6%AE%B5%E7%A8%8B%E5%BA%8F%E6%98%AF%E7%94%B1c%E7%BC%96%E8%AF%91%E8%BF%98%E6%98%AF%E7%94%B1c-%E7%BC%96%E8%AF%91/</link>
      <pubDate>Tue, 05 Sep 2017 16:13:32 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E6%AE%B5%E7%A8%8B%E5%BA%8F%E6%98%AF%E7%94%B1c%E7%BC%96%E8%AF%91%E8%BF%98%E6%98%AF%E7%94%B1c-%E7%BC%96%E8%AF%91/</guid>
      <description>如果编译器在编译cpp文件，那么_Cplusplus就会被定义，如果是一个c文件在被编译，那么_STDC_就会被定义。_STDC_是预定义宏</description>
    </item>
    
    <item>
      <title>如何建立和理解非常复杂的声明</title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%92%8C%E7%90%86%E8%A7%A3%E9%9D%9E%E5%B8%B8%E5%A4%8D%E6%9D%82%E7%9A%84%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Tue, 05 Sep 2017 15:57:45 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%92%8C%E7%90%86%E8%A7%A3%E9%9D%9E%E5%B8%B8%E5%A4%8D%E6%9D%82%E7%9A%84%E5%A3%B0%E6%98%8E/</guid>
      <description></description>
    </item>
    
    <item>
      <title>不用流程控制语句,如何打印1~1000的数</title>
      <link>/post/%E4%B8%8D%E7%94%A8%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B01-1000%E7%9A%84%E6%95%B0/</link>
      <pubDate>Tue, 05 Sep 2017 15:49:05 +0000</pubDate>
      
      <guid>/post/%E4%B8%8D%E7%94%A8%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B01-1000%E7%9A%84%E6%95%B0/</guid>
      <description>采用构造函数与静态构造变量结合的方法实现。首先在类中定义一个静态成员变量，然后在构造函数里面打印该静态变量的值，并对静态变量进行自增操作，同</description>
    </item>
    
    <item>
      <title>通过绝对内存地址进行参数赋值与函数调用</title>
      <link>/post/%E9%80%9A%E8%BF%87%E7%BB%9D%E5%AF%B9%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E8%B5%8B%E5%80%BC%E4%B8%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Tue, 05 Sep 2017 15:15:29 +0000</pubDate>
      
      <guid>/post/%E9%80%9A%E8%BF%87%E7%BB%9D%E5%AF%B9%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E8%B5%8B%E5%80%BC%E4%B8%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>同一个数可以通过不同的方式表达出来，对于函数的访问，变量的赋值除了直接对变量赋值以外，还可以通过绝对内存地址进行参数赋值与函数调用。 1) 通过地</description>
    </item>
    
    <item>
      <title>包含无符号数的计算</title>
      <link>/post/%E5%8C%85%E5%90%AB%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Tue, 05 Sep 2017 14:11:14 +0000</pubDate>
      
      <guid>/post/%E5%8C%85%E5%90%AB%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/</guid>
      <description>当表达式中存在有符号类型和无符号类型时，所有的操作数都自动转换成无符号类型。 例一 运行如下程序： 1 2 3 4 5 #include &amp;lt;stdio.h&amp;gt;int main() unsigned int i=3; printf(&amp;#34;&amp;#34;%u\n,i*-1); return 0; 程序输出结果： 4294967293 在</description>
    </item>
    
    <item>
      <title>struct和union的区别</title>
      <link>/post/struct%E5%92%8Cunion%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 05 Sep 2017 12:08:16 +0000</pubDate>
      
      <guid>/post/struct%E5%92%8Cunion%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>struct (结构体）与union (联合体）是C语言中两种不同的数据结构，两者都是常见的复合结构，其区别主要表现在以下两个方面： 结构体与联合体虽然都是</description>
    </item>
    
    <item>
      <title>typedef和define的区别</title>
      <link>/post/typedef%E5%92%8Cdefine%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 05 Sep 2017 11:32:25 +0000</pubDate>
      
      <guid>/post/typedef%E5%92%8Cdefine%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>typedef与define都是替一个对象取一个别名，以此来增强程序的可读性，但是它们在使用和作用上也存在着以下几个方面的不同： 1) 原理不同。</description>
    </item>
    
    <item>
      <title>string类的一种正确写法</title>
      <link>/post/string%E7%B1%BB%E7%9A%84%E4%B8%80%E7%A7%8D%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/</link>
      <pubDate>Tue, 05 Sep 2017 09:36:56 +0000</pubDate>
      
      <guid>/post/string%E7%B1%BB%E7%9A%84%E4%B8%80%E7%A7%8D%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/</guid>
      <description>转载:https://coolshell.cn/articles/10478.html C++ 的一个常见面试题是让你实现一个 String 类，限于时间，不可能</description>
    </item>
    
    <item>
      <title>栈空间的最大值是多少?</title>
      <link>/post/%E6%A0%88%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E6%98%AF%E5%A4%9A%E5%B0%91/</link>
      <pubDate>Mon, 04 Sep 2017 22:05:45 +0000</pubDate>
      
      <guid>/post/%E6%A0%88%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E6%98%AF%E5%A4%9A%E5%B0%91/</guid>
      <description>在windows下，栈地址是向低地址扩展的数据结构，是一块连续的内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在windows下，栈</description>
    </item>
    
    <item>
      <title>解析“explicit”</title>
      <link>/post/%E8%A7%A3%E6%9E%90explicit/</link>
      <pubDate>Mon, 04 Sep 2017 21:53:36 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90explicit/</guid>
      <description>转载http://blog.csdn.net/fengbingchun/article/details/51168728 C++中的关键字ex</description>
    </item>
    
    <item>
      <title>解析&#34;export&#34;</title>
      <link>/post/%E8%A7%A3%E6%9E%90export/</link>
      <pubDate>Mon, 04 Sep 2017 21:41:58 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90export/</guid>
      <description>为了访问其他编译单元（如另一代码文件）中的变量或对象，对普通类型（包括基本数据类、结构和类），可以利用关键字extern，来使用这些变量或对</description>
    </item>
    
    <item>
      <title>前置运算符和后置运算符的区别</title>
      <link>/post/%E5%89%8D%E7%BD%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%90%8E%E7%BD%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 04 Sep 2017 18:23:48 +0000</pubDate>
      
      <guid>/post/%E5%89%8D%E7%BD%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%90%8E%E7%BD%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>以++操作为例，对于变量a, ++a表示取a的地址，增加它的内容，然后把值放在寄存器 中；a++表示取a的地址，把它的值装入寄存器，然后增加内存</description>
    </item>
    
    <item>
      <title>C语言中操作符的优先级总结</title>
      <link>/post/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 04 Sep 2017 18:11:42 +0000</pubDate>
      
      <guid>/post/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数组和指针的区别</title>
      <link>/post/%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 04 Sep 2017 17:59:37 +0000</pubDate>
      
      <guid>/post/%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>指针可以随时指向任意类型的内存块，而数组可以在静态存储区被创建。例如，全局数组 可以在栈上被创建。从原理与定义上看，虽然指针与数组表示的是不同</description>
    </item>
    
    <item>
      <title>malloc/free的用法详解</title>
      <link>/post/malloc-free%E7%9A%84%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 02 Sep 2017 15:45:26 +0000</pubDate>
      
      <guid>/post/malloc-free%E7%9A%84%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>malloc()函数 malloc的全称是memory allocation，中文叫动态内存分配。 extern void *malloc(unsigned int num_bytes); 说明： 分配长度为num_bytes字</description>
    </item>
    
    <item>
      <title>“抛出exception”与“传递参数”或“调用虚函数”之间的区别</title>
      <link>/post/%E6%8A%9B%E5%87%BAexception%E4%B8%8E%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E6%88%96%E8%B0%83%E7%94%A8%E8%99%9A%E5%87%BD%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 01 Sep 2017 17:18:07 +0000</pubDate>
      
      <guid>/post/%E6%8A%9B%E5%87%BAexception%E4%B8%8E%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E6%88%96%E8%B0%83%E7%94%A8%E8%99%9A%E5%87%BD%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>从语法上看，在函数里声明参数与在 catch 子句中声明参数几乎没有什么差别: 1 2 3 4 5 6 7 8 9 10 11 class Widget { ... }; void f1(Widget w); void f2(Widget&amp;amp; w); void f3(const Widget&amp;amp; w); void f4(Widget *pw); void f5(const Widget *pw); catch (Widget w) ...</description>
    </item>
    
    <item>
      <title>不要以多态方式处理数组</title>
      <link>/post/%E4%B8%8D%E8%A6%81%E4%BB%A5%E5%A4%9A%E6%80%81%E6%96%B9%E5%BC%8F%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 01 Sep 2017 14:46:17 +0000</pubDate>
      
      <guid>/post/%E4%B8%8D%E8%A6%81%E4%BB%A5%E5%A4%9A%E6%80%81%E6%96%B9%E5%BC%8F%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84/</guid>
      <description>类继承的最重要的特性是你可以通过基类指针或引用来操作派生类。这样的指针或引用具有行为的多态性，就好像它们同时具有多种形态。C++允许你通过基</description>
    </item>
    
    <item>
      <title>利用构造函数和析构函数防止泄漏资源</title>
      <link>/post/%E5%88%A9%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E9%81%BF%E5%85%8D%E6%B3%84%E6%BC%8F%E8%B5%84%E6%BA%90/</link>
      <pubDate>Fri, 01 Sep 2017 14:40:41 +0000</pubDate>
      
      <guid>/post/%E5%88%A9%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E9%81%BF%E5%85%8D%E6%B3%84%E6%BC%8F%E8%B5%84%E6%BA%90/</guid>
      <description>使用析构函数防止资源泄漏 定义一个类 class ALA { public: virtual void processAdoption() ; ... }; 函数循环遍历 dataSource 内的信息，处理它所遇到的每个项目。唯一要记住的一 点是在每次循环结尾处删除</description>
    </item>
    
    <item>
      <title>如何在同一程序中混合使用C&#43;&#43;和C</title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%90%8C%E4%B8%80%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8c-%E5%92%8Cc/</link>
      <pubDate>Fri, 01 Sep 2017 13:45:29 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%90%8C%E4%B8%80%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8c-%E5%92%8Cc/</guid>
      <description>兼容性 许多年来，你一直担心编制程序时一部分使用 C++一部分使用 C，就如同在全部用 C 编 程的年代同时使用多个编译器来生成程序一样。没办法多编译器</description>
    </item>
    
    <item>
      <title>解析“static”</title>
      <link>/post/%E8%A7%A3%E6%9E%90static/</link>
      <pubDate>Fri, 01 Sep 2017 13:38:13 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90static/</guid>
      <description>修饰全局变量与函数 static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。</description>
    </item>
    
    <item>
      <title>重载和覆盖的区别</title>
      <link>/post/%E9%87%8D%E8%BD%BD%E5%92%8C%E8%A6%86%E7%9B%96%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 01 Sep 2017 13:26:43 +0000</pubDate>
      
      <guid>/post/%E9%87%8D%E8%BD%BD%E5%92%8C%E8%A6%86%E7%9B%96%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>重载 重载是指函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。在同一可访问区域内被声</description>
    </item>
    
    <item>
      <title>operator=的正确写法</title>
      <link>/post/operator-%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/</link>
      <pubDate>Thu, 31 Aug 2017 12:10:49 +0000</pubDate>
      
      <guid>/post/operator-%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/</guid>
      <description>返回一个 reference to *this。 关于赋值，有趣的是你可以把它们写成连锁形式： int x, y, z; x = y - z = 15; //赋值连锁形式 同样有趣的是，赋值采用右结合律，所</description>
    </item>
    
    <item>
      <title>绝不在构造和析构过程中调用virtual函数</title>
      <link>/post/%E7%BB%9D%E4%B8%8D%E5%9C%A8%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B0%83%E7%94%A8virtual%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 30 Aug 2017 23:31:05 +0000</pubDate>
      
      <guid>/post/%E7%BB%9D%E4%B8%8D%E5%9C%A8%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B0%83%E7%94%A8virtual%E5%87%BD%E6%95%B0/</guid>
      <description>假设你有个class继承体系，用来塑模股市交易如买进、卖出的订单等等。这样的交易一定要经过审计，所以每当创建一个交易对象，在审计日志（aud</description>
    </item>
    
    <item>
      <title>析构函数详解</title>
      <link>/post/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 30 Aug 2017 21:58:15 +0000</pubDate>
      
      <guid>/post/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>析构函数 在有两种情况下会调用析构函数。第一种是当对象在正常状态下被销毁,也就是当它离开了它的生存空间或是被明确的删除。第二种是当对象被异常处</description>
    </item>
    
    <item>
      <title>跨编译单元的初始化次序问题浅析</title>
      <link>/post/%E8%B7%A8%E7%BC%96%E8%AF%91%E5%8D%95%E5%85%83%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%AC%A1%E5%BA%8F%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</link>
      <pubDate>Wed, 30 Aug 2017 21:14:15 +0000</pubDate>
      
      <guid>/post/%E8%B7%A8%E7%BC%96%E8%AF%91%E5%8D%95%E5%85%83%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%AC%A1%E5%BA%8F%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</guid>
      <description>如果某编译单元内的某个non-local static对象的初始化动作使用了另一编译单元内的某个non-local static对象，它所用到的</description>
    </item>
    
    <item>
      <title>尽量以 const, enum, inline 替换 #define</title>
      <link>/post/%E5%B0%BD%E9%87%8F%E4%BB%A5-const-enum-inline-%E6%9B%BF%E6%8D%A2-define/</link>
      <pubDate>Wed, 30 Aug 2017 16:14:14 +0000</pubDate>
      
      <guid>/post/%E5%B0%BD%E9%87%8F%E4%BB%A5-const-enum-inline-%E6%9B%BF%E6%8D%A2-define/</guid>
      <description>原因 单纯常量 const与define enum与define 函数宏 表达式形式的宏定义一例： #define ExpressionName(Var1,Var2) ((Var1)+(Var2))*((Var1)-(Var2)) 为什么要取代这种形式呢，且听我道来： 首先谈一下</description>
    </item>
    
    <item>
      <title>C&#43;&#43;变量的自动初始化</title>
      <link>/post/c-%E5%8F%98%E9%87%8F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Wed, 30 Aug 2017 16:08:30 +0000</pubDate>
      
      <guid>/post/c-%E5%8F%98%E9%87%8F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>对于内置变量的自动初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include&amp;lt;stdio.h&amp;gt;#define CONST 100 int *p1; int a[2]; int b; static int c; main() { int d; static int e; int f[2]; int *p2; printf(&amp;#34;CONST=%d\n&amp;#34;,CONST); printf(&amp;#34;a[0]=%d\n&amp;#34;,a[0]); //printf(&amp;#34;*p1=%d\n&amp;#34;,*p1); printf(&amp;#34;b=%d\n&amp;#34;,b); printf(&amp;#34;c=%d\n&amp;#34;,c); printf(&amp;#34;d=%d\n&amp;#34;,d); printf(&amp;#34;e=%d\n&amp;#34;,e); printf(&amp;#34;f[0]=%d\n&amp;#34;,f[0]); printf(&amp;#34;*p2=%d\n&amp;#34;,*p2); } 输出：</description>
    </item>
    
    <item>
      <title>构造函数与成员初始化列表详解</title>
      <link>/post/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 29 Aug 2017 15:03:52 +0000</pubDate>
      
      <guid>/post/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>成员初始化列表 何谓初始化列表 与其他函数不同，构造函数除了有名字，参数列表和函数体之外，还可以有初始化列表，初始化列表以冒号开头，后跟一系列以</description>
    </item>
    
    <item>
      <title>静态链接和动态链接区别浅析</title>
      <link>/post/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8C%BA%E5%88%AB%E6%B5%85%E6%9E%90/</link>
      <pubDate>Thu, 27 Jul 2017 20:39:57 +0000</pubDate>
      
      <guid>/post/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8C%BA%E5%88%AB%E6%B5%85%E6%9E%90/</guid>
      <description>一、静态库与动态库 通常情况下，对函数库的链接是放在编译时期（compile time）完成的。所有相关的对象文件（object file）与牵涉</description>
    </item>
    
    <item>
      <title> 如何判断map容器的key是否存在 </title>
      <link>/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%ADmap%E5%AE%B9%E5%99%A8%E7%9A%84key%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</link>
      <pubDate>Thu, 27 Jul 2017 16:01:24 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%ADmap%E5%AE%B9%E5%99%A8%E7%9A%84key%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</guid>
      <description>首先，不推荐使用[]来判断key是否存在，因为使用操作符[]会向map容器里插入一个元素。 map的operator[]重载大致是这样一个内容</description>
    </item>
    
    <item>
      <title>#pragma 预处理指令浅析</title>
      <link>/post/pragma-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 25 Jul 2017 12:31:48 +0000</pubDate>
      
      <guid>/post/pragma-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4%E6%B5%85%E6%9E%90/</guid>
      <description>功能 在所有的预处理指令中，#pragma 指令可能是最复杂的了，它的作用是设定编译器的状态或者是指示编译器完成一些特定的动作。 #pragma指</description>
    </item>
    
    <item>
      <title>C语言程序可以没有main函数</title>
      <link>/post/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E5%8F%AF%E4%BB%A5%E6%B2%A1%E6%9C%89main%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 25 Jul 2017 12:19:56 +0000</pubDate>
      
      <guid>/post/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E5%8F%AF%E4%BB%A5%E6%B2%A1%E6%9C%89main%E5%87%BD%E6%95%B0/</guid>
      <description>几乎所有程序员的第一堂课都是学习helloworld程序，下面我们先来重温一下经典的C语言helloworld。 1 2 3 4 5 6 7 /* hello.c */ #include &amp;lt;stdio.h&amp;gt; int main()</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 中头文件（.h）和源文件（.cc）</title>
      <link>/post/c-%E4%B8%AD%E5%A4%B4%E6%96%87%E4%BB%B6-h%E5%92%8C%E6%BA%90%E6%96%87%E4%BB%B6-cc/</link>
      <pubDate>Tue, 25 Jul 2017 10:51:30 +0000</pubDate>
      
      <guid>/post/c-%E4%B8%AD%E5%A4%B4%E6%96%87%E4%BB%B6-h%E5%92%8C%E6%BA%90%E6%96%87%E4%BB%B6-cc/</guid>
      <description>头文件的作用 头文件的作用主要表现为以下两个方面： 通过头文件来调用库功能。出于对源代码保密的考虑，源代码不便（或不准）向用户公布，只要向用户提</description>
    </item>
    
    <item>
      <title>scanf()和sscanf()详解</title>
      <link>/post/scanf%E5%92%8Csscanf%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 23 Jul 2017 17:08:51 +0000</pubDate>
      
      <guid>/post/scanf%E5%92%8Csscanf%E8%AF%A6%E8%A7%A3/</guid>
      <description>函数原型 int sscanf( string str, string fmt, mixed var1, mixed var2 ... ); int scanf( const char *format [,argument]... ); 返回值 一般使用scanf函数时都是为某个变量赋值，不考虑它的返回值。但是任何函数都是需要返回的</description>
    </item>
    
    <item>
      <title>main函数执行前、后执行的代码</title>
      <link>/post/main%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 19 Jul 2017 15:00:12 +0000</pubDate>
      
      <guid>/post/main%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>main函数前 main函数执行之前，主要就是初始化系统相关资源： 1.设置栈指针 2.初始化static静态和global全局变量，即data段</description>
    </item>
    
    <item>
      <title>流对象为什么可以作为条件表达式？</title>
      <link>/post/cin-out%E6%B5%81%E5%AF%B9%E8%B1%A1%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 13 Jul 2017 16:33:26 +0000</pubDate>
      
      <guid>/post/cin-out%E6%B5%81%E5%AF%B9%E8%B1%A1%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>转载： http://blog.csdn.net/bladelyer/article/details/8505912. http://blog.csdn.net/andyelvis/article/details/4529592 原理解释 相信很多人都遇到过这样的例子： 1 2 3 string str; while( cin &amp;gt;&amp;gt; str ) cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; flush; 似乎，大多数初学者都不明白【cin &amp;raquo; str】怎么可以作为whi</description>
    </item>
    
    <item>
      <title>多态实现机制详解</title>
      <link>/post/%E5%A4%9A%E6%80%81%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 24 Jun 2017 14:39:11 +0000</pubDate>
      
      <guid>/post/%E5%A4%9A%E6%80%81%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>数据成员指针、函数成员指针 1. 数据成员指针 对于普通指针变量来说，其值是它所指向的地址，0表示空指针。 而对于数据成员指针变量来说，其值是数据成员</description>
    </item>
    
    <item>
      <title>日常编程技巧</title>
      <link>/post/%E6%97%A5%E5%B8%B8%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 24 Jun 2017 14:34:25 +0000</pubDate>
      
      <guid>/post/%E6%97%A5%E5%B8%B8%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</guid>
      <description>创建三维数组 vector法 vector&amp;lt;vector&amp;lt;vector&amp;gt; &amp;gt; f(N+1,vector&amp;lt;vector&amp;gt;(N,vector(N))); 第一维 第二维 第三维和类型 1维容量 2维数组正常构建方式:vector&amp;lt;vector&amp;gt;(N,vect</description>
    </item>
    
    <item>
      <title>不使用vector保存bool的理由</title>
      <link>/post/%E4%B8%8D%E4%BD%BF%E7%94%A8vector-bool-%E7%9A%84%E7%90%86%E7%94%B1/</link>
      <pubDate>Sat, 24 Jun 2017 14:32:28 +0000</pubDate>
      
      <guid>/post/%E4%B8%8D%E4%BD%BF%E7%94%A8vector-bool-%E7%9A%84%E7%90%86%E7%94%B1/</guid>
      <description>转载：http://blog.csdn.net/u013249689/article/details/25297657 vector不是容器，</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译不了的C程序</title>
      <link>/post/c-%E7%BC%96%E8%AF%91%E4%B8%8D%E4%BA%86%E7%9A%84c%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 24 Jun 2017 14:07:24 +0000</pubDate>
      
      <guid>/post/c-%E7%BC%96%E8%AF%91%E4%B8%8D%E4%BA%86%E7%9A%84c%E7%A8%8B%E5%BA%8F/</guid>
      <description>有些C程序用C++编译器会报错，有如下几种情况： 函数声明在使用之后： 1 2 3 4 5 6 7 8 9 10 11 #include&amp;lt;stdio.h&amp;gt; int main() { foo(); // foo() is called before its declaration/definition } int foo() { printf(&amp;#34;Hello&amp;#34;); return 0; } 普通指针指</description>
    </item>
    
    <item>
      <title>new/delete用法详解</title>
      <link>/post/new-delete%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 24 Jun 2017 13:58:33 +0000</pubDate>
      
      <guid>/post/new-delete%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>new运算符 开辟单变量地址空间 使用new运算符时必须已知数据类型，new运算符会向系统堆区申请足够的存储空间，如果申请成功，就返回该内存块的</description>
    </item>
    
    <item>
      <title>assert()用法</title>
      <link>/post/assert-%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 24 Jun 2017 13:53:26 +0000</pubDate>
      
      <guid>/post/assert-%E7%94%A8%E6%B3%95/</guid>
      <description>定义 assert()的用法是一种“契约式编程”，在我的理解中，其表达的意思就是，程序在我的假设条件下，能够正常良好的运作，其实就相当于一个i</description>
    </item>
    
    <item>
      <title>内存泄漏和内存溢出</title>
      <link>/post/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Sat, 24 Jun 2017 13:21:42 +0000</pubDate>
      
      <guid>/post/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</guid>
      <description>内存溢出和内存泄漏的区别 内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个</description>
    </item>
    
    <item>
      <title>new和malloc的区别</title>
      <link>/post/new%E5%92%8Cmalloc%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 24 Jun 2017 13:15:15 +0000</pubDate>
      
      <guid>/post/new%E5%92%8Cmalloc%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>1. 申请的内存所在位置 new操作符从自由存储区（free store）上为对象动态分配内存空间，而malloc函数从堆上动态分配内存。自由存储区</description>
    </item>
    
    <item>
      <title>在1G内存的计算机中能否malloc(1.2G)</title>
      <link>/post/%E5%9C%A81g%E5%86%85%E5%AD%98%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E8%83%BD%E5%90%A6malloc-1-2g/</link>
      <pubDate>Sat, 24 Jun 2017 13:11:52 +0000</pubDate>
      
      <guid>/post/%E5%9C%A81g%E5%86%85%E5%AD%98%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E8%83%BD%E5%90%A6malloc-1-2g/</guid>
      <description>malloc能够申请的空间大小与物理内存的大小没有直接关系，仅与程序的虚拟地址空间相关。程序运行时，堆空间只是程序向操作系统申请划出来的一大</description>
    </item>
    
    <item>
      <title>指针和引用的区别</title>
      <link>/post/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 24 Jun 2017 12:18:41 +0000</pubDate>
      
      <guid>/post/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>转载：http://www.cnblogs.com/jiu0821/p/4127382.html 概念 指针是一块内存的地址值，而引用是一块内存</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;源代码到可执行程序的过程详解</title>
      <link>/post/c-c-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 24 Jun 2017 11:55:03 +0000</pubDate>
      
      <guid>/post/c-c-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>1.预处理 读取c源程序，对其中的伪指令（以#开头的指令）和特殊符号进行处理 伪指令主要包括以下四个方面: 宏定义指令，如#define Name Toke</description>
    </item>
    
    <item>
      <title>缓冲区溢出(Buffer Overflow)</title>
      <link>/post/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA-buffer-overflow/</link>
      <pubDate>Sat, 24 Jun 2017 11:44:54 +0000</pubDate>
      
      <guid>/post/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA-buffer-overflow/</guid>
      <description>堆栈溢出 堆栈溢出通常是所有的缓冲区溢出中最容易进行利用的。了解堆栈溢出之前，先了解以下几个概念： 缓冲区 简单说来是一块连续的计算机内存区域，可</description>
    </item>
    
    <item>
      <title>拷贝构造函数详解</title>
      <link>/post/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 24 Jun 2017 11:00:59 +0000</pubDate>
      
      <guid>/post/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>什么是拷贝构造函数 首先对于普通类型的对象来说，它们之间的复制是很简单的，例如： int a = 100; int b = a; 而类对象与普通对象不同，类对象内部结构一般较为</description>
    </item>
    
    <item>
      <title>空类产生几个默认成员函数?</title>
      <link>/post/%E7%A9%BA%E7%B1%BB%E4%BA%A7%E7%94%9F%E5%87%A0%E4%B8%AA%E9%BB%98%E8%AE%A4%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 24 Jun 2017 10:46:36 +0000</pubDate>
      
      <guid>/post/%E7%A9%BA%E7%B1%BB%E4%BA%A7%E7%94%9F%E5%87%A0%E4%B8%AA%E9%BB%98%E8%AE%A4%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</guid>
      <description>空类声明时不会生成任何默认成员函数 对于空类，编译器不会生成任何默认成员函数，只会生成1个字节的占位符。 有时可能会以为编译器会为空类生成默认构</description>
    </item>
    
    <item>
      <title>解析“inline”</title>
      <link>/post/%E8%A7%A3%E6%9E%90inline/</link>
      <pubDate>Sat, 24 Jun 2017 10:34:27 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90inline/</guid>
      <description>inline与宏定义 inline 关键字用来定义一个类的内联函数，引入它的主要原因是用它替代C中表达式形式的宏定义。为什么inline能很好地取代预定义</description>
    </item>
    
    <item>
      <title>性能杀手：”潜伏”的memset</title>
      <link>/post/%E6%80%A7%E8%83%BD%E6%9D%80%E6%89%8B%E6%BD%9C%E4%BC%8F%E7%9A%84memset/</link>
      <pubDate>Sat, 24 Jun 2017 10:27:08 +0000</pubDate>
      
      <guid>/post/%E6%80%A7%E8%83%BD%E6%9D%80%E6%89%8B%E6%BD%9C%E4%BC%8F%E7%9A%84memset/</guid>
      <description>memset性能陷阱 memset是大家常用的函数，而且一般的编程书籍都会谆谆告诫大家：申请内存后要初始化，防止使用未经初始化的内存导致不可预</description>
    </item>
    
    <item>
      <title>详解char类型</title>
      <link>/post/%E8%AF%A6%E8%A7%A3char%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 24 Jun 2017 10:24:21 +0000</pubDate>
      
      <guid>/post/%E8%AF%A6%E8%A7%A3char%E7%B1%BB%E5%9E%8B/</guid>
      <description>概述 char用来定义字符型变量，在内存中占1字节，范围是-128~127. 有以下两种存储方式： 将一个整型常量放到一个字符变量中，实际就是把以</description>
    </item>
    
    <item>
      <title>解析“mutable</title>
      <link>/post/%E8%A7%A3%E6%9E%90mutable/</link>
      <pubDate>Sat, 24 Jun 2017 09:58:38 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90mutable/</guid>
      <description>在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const函数中</description>
    </item>
    
    <item>
      <title>解析“volatile”</title>
      <link>/post/%E8%A7%A3%E6%9E%90volatile/</link>
      <pubDate>Sat, 24 Jun 2017 09:53:31 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90volatile/</guid>
      <description>volatile概述 volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中的强制类型转换</title>
      <link>/post/c-%E4%B8%AD%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 23 Jun 2017 21:33:06 +0000</pubDate>
      
      <guid>/post/c-%E4%B8%AD%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>C/C++是强类型语言,不同类型之间的相互转换是比较麻烦的.但是在编程实践中,不可避免的要用到类型转换.有2种类型转换:隐式类型转换和强制类</description>
    </item>
    
    <item>
      <title>字符串的输入输出</title>
      <link>/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 23 Jun 2017 21:10:17 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>scanf与printf scanf 原型：int scanf(char *format,&amp;hellip;]); 头文件：stdio.h 返回值：返回成功读入的数据项的个数，读到文件末尾或者出错时则返回EOF（0x</description>
    </item>
    
    <item>
      <title>printf()输出格式控制</title>
      <link>/post/printf-%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 23 Jun 2017 20:46:36 +0000</pubDate>
      
      <guid>/post/printf-%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>格式化 格式化字符串 格式化整型数值 格式化浮点值（普通计数法） 格式化浮点值（科学计数法） 补充：E是exponent,表示以10为底的指数 prin</description>
    </item>
    
    <item>
      <title>作用域与{}</title>
      <link>/post/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E/</link>
      <pubDate>Fri, 23 Jun 2017 20:33:54 +0000</pubDate>
      
      <guid>/post/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E/</guid>
      <description>在C/C++中大括号指明了变量的作用域，在大括号内声明的局部变量其作用域自变量声明始，到大括号之后终结。我们应该善用它，使我们的程序更加清晰</description>
    </item>
    
    <item>
      <title>int32_t,int64_t</title>
      <link>/post/int32-t-int64-t/</link>
      <pubDate>Fri, 23 Jun 2017 20:27:13 +0000</pubDate>
      
      <guid>/post/int32-t-int64-t/</guid>
      <description>数据类型 数据类型特别是int相关的类型在不同位数机器的平台下长度不同。C99标准并不规定具体数据类型的长度大小，只规定级别。作下比较： 16位</description>
    </item>
    
    <item>
      <title>解析“const”</title>
      <link>/post/%E8%A7%A3%E6%9E%90const/</link>
      <pubDate>Fri, 23 Jun 2017 20:08:52 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90const/</guid>
      <description>const的用法 修饰变量 修饰常量 与变量不同，有const修饰的量是常量，常量的值不可改变，在定义的时候必须初始化，使用未初始化的常量是错误的</description>
    </item>
    
    <item>
      <title>C&#43;&#43;的万能头文件</title>
      <link>/post/c-%E7%9A%84%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 23 Jun 2017 20:06:44 +0000</pubDate>
      
      <guid>/post/c-%E7%9A%84%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/</guid>
      <description>所谓的C++万能头文件，缺点是编译时间慢，优点无需多说。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include&amp;lt;bits/stdc++.h&amp;gt</description>
    </item>
    
    <item>
      <title>解析“extern”</title>
      <link>/post/%E8%A7%A3%E6%9E%90extern/</link>
      <pubDate>Fri, 23 Jun 2017 17:43:54 +0000</pubDate>
      
      <guid>/post/%E8%A7%A3%E6%9E%90extern/</guid>
      <description>基本解释 extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外e</description>
    </item>
    
    <item>
      <title>前向声明</title>
      <link>/post/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Fri, 23 Jun 2017 17:37:17 +0000</pubDate>
      
      <guid>/post/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/</guid>
      <description>定义 有些时候我们可以声明一些类但是并不去定义它，当然这个类的作用也很有限了。 比如class foo; 声明一个foo类，这个声明，有时候也叫做前向声明</description>
    </item>
    
    <item>
      <title>友元浅析</title>
      <link>/post/%E5%8F%8B%E5%85%83%E6%B5%85%E6%9E%90/</link>
      <pubDate>Fri, 23 Jun 2017 17:31:04 +0000</pubDate>
      
      <guid>/post/%E5%8F%8B%E5%85%83%E6%B5%85%E6%9E%90/</guid>
      <description>友元函数的简单介绍 为什么要使用友元函数 在实现类之间数据共享时，减少系统开销，提高效率。如果类A中的函数要访问类B中的成员（例如：智能指针类的</description>
    </item>
    
    <item>
      <title>访问控制与继承</title>
      <link>/post/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Fri, 23 Jun 2017 17:25:18 +0000</pubDate>
      
      <guid>/post/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>成员的访问权限 public访问权限 一个类的public成员变量、成员函数，可以通过类的成员函数、类的实例变量进行访问 &amp;lt;实际上，类的成员</description>
    </item>
    
    <item>
      <title>编译错误和运行错误的区别</title>
      <link>/post/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E5%92%8C%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 23 Jun 2017 17:23:03 +0000</pubDate>
      
      <guid>/post/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E5%92%8C%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>（1） 编译错误： 就是编译器无法进行继续编译的错误，最基本的就是语法错误了，比如语句后面少了；或者 } 不匹配之类的，选择题一般是这样。编译错误可</description>
    </item>
    
    <item>
      <title>类内特殊成员变量的初始化</title>
      <link>/post/%E7%B1%BB%E5%86%85%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Fri, 23 Jun 2017 17:21:01 +0000</pubDate>
      
      <guid>/post/%E7%B1%BB%E5%86%85%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>有些成员变量的数据类型比较特别，它们的初始化方式也和普通数据类型的成员变量有所不同。这些特殊的类型的成员变量包括： a.引用 b.常量 c.静态 d</description>
    </item>
    
    <item>
      <title>Visual Studio中debug和release版本的区别</title>
      <link>/post/visual-studio%E4%B8%ADdebug%E5%92%8Crelease%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 23 Jun 2017 16:57:04 +0000</pubDate>
      
      <guid>/post/visual-studio%E4%B8%ADdebug%E5%92%8Crelease%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>本质区别 Debug 和 Release 并没有本质的区别，他们只是VC预定义提供的两组编译选项的集合，编译器只是按照预定的选项行动。如果我们愿意，我们完全可以把Deb</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中临时对象及返回值优化</title>
      <link>/post/c-%E4%B8%AD%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 23 Jun 2017 16:30:48 +0000</pubDate>
      
      <guid>/post/c-%E4%B8%AD%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96/</guid>
      <description>临时对象 C++中有这样一种对象：它在代码中看不到，但是确实存在。它就是临时对象—由编译器定义的一个没有命名的非堆对象（non-heap obj</description>
    </item>
    
    <item>
      <title>return语句的用法</title>
      <link>/post/return%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 23 Jun 2017 16:21:57 +0000</pubDate>
      
      <guid>/post/return%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>含义 return 表示从被调函数返回到主调函数继续执行，返回时可附带一个返回值，返回值可以是一个常量，变量，或是表达式。 作用 结束正在运行的函数，并返回函</description>
    </item>
    
    <item>
      <title>C&#43;&#43;函数返回值问题</title>
      <link>/post/c-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 23 Jun 2017 16:16:12 +0000</pubDate>
      
      <guid>/post/c-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E9%97%AE%E9%A2%98/</guid>
      <description>调用函数的过程 栈空间是从高地址向低地址增长的。所以压栈即表示栈顶指针变小，而出栈则相反。 函数调用者维护了一个栈空间（stack），拥有栈底指</description>
    </item>
    
    <item>
      <title>如何打印自身代码</title>
      <link>/post/%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B0%E8%87%AA%E8%BA%AB%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 23 Jun 2017 16:06:03 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B0%E8%87%AA%E8%BA%AB%E4%BB%A3%E7%A0%81/</guid>
      <description>基本思想是： 在程序中生成字符串self; 加入把self改写成程序自身的算法编码; 输出self字符串。 1 2 3 #include &amp;lt;stdio.h&amp;gt;char* recurse=&amp;#34;#include &amp;lt;stdio.h&amp;gt;%cchar* recurse=%c%s%c;%cint main(){printf(recurse,10,34,recurse,34,10,10);}%c&amp;#34;; int main(){printf(recurse,10,34,recurse,34,10,10);} 解析： 引号里面的内</description>
    </item>
    
    <item>
      <title>define详解</title>
      <link>/post/define%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 23 Jun 2017 15:45:27 +0000</pubDate>
      
      <guid>/post/define%E8%AF%A6%E8%A7%A3/</guid>
      <description>预处理 预处理也称为预编译，它为编译做预备工作，主要进行代码文本的替换工作，用于处理#开头的指令，其中预处理器产生编译器的输出。 经过预处理器处</description>
    </item>
    
    <item>
      <title>回调函数及其实现</title>
      <link>/post/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 23 Jun 2017 15:42:30 +0000</pubDate>
      
      <guid>/post/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</guid>
      <description>回调函数的定义 回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数</description>
    </item>
    
    <item>
      <title>区别sizeof()和strlen()</title>
      <link>/post/%E5%8C%BA%E5%88%ABsizeof-%E5%92%8Cstrlen/</link>
      <pubDate>Fri, 23 Jun 2017 15:23:18 +0000</pubDate>
      
      <guid>/post/%E5%8C%BA%E5%88%ABsizeof-%E5%92%8Cstrlen/</guid>
      <description>区别 strlen执行的是一个计数器的工作，它从内存的某个位置（可以是字符串开头，中间某个位置，甚至是某个不确定的内存区域）开始扫描，直到碰到</description>
    </item>
    
    <item>
      <title>结构体字节对齐详解</title>
      <link>/post/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 23 Jun 2017 15:00:13 +0000</pubDate>
      
      <guid>/post/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考：http://www.cnblogs.com/longlybits/articles/2385343.html 结构体中的字节对齐 在用s</description>
    </item>
    
    <item>
      <title>地址的类型转换和数学计算</title>
      <link>/post/%E5%9C%B0%E5%9D%80%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Fri, 23 Jun 2017 14:47:16 +0000</pubDate>
      
      <guid>/post/%E5%9C%B0%E5%9D%80%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/</guid>
      <description>地址的类型转换 功能 对变量的值进行强制类型转换，是把值按照另外一种类型进行存储后读取，变量在内存中的存储形式发生变化. 对变量的地址进行强制类型</description>
    </item>
    
    <item>
      <title>C&#43;&#43;程序内存分配形式</title>
      <link>/post/c-%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%BD%A2%E5%BC%8F/</link>
      <pubDate>Fri, 23 Jun 2017 14:32:37 +0000</pubDate>
      
      <guid>/post/c-%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%BD%A2%E5%BC%8F/</guid>
      <description>程序中内存分配方式 (1) 正文段 (.text) 程序代码就存储在text 段，这是由C P U执行的机器指令部分。通常，正文段是可共享的，所以即使是经常执行的程序(如</description>
    </item>
    
  </channel>
</rss>
