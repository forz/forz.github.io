<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Forz Blog</title>
    <link>/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Jan 2022 13:24:59 +0000</lastBuildDate><atom:link href="/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>红包方案设计</title>
      <link>/post/%E7%BA%A2%E5%8C%85%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 18 Jan 2022 13:24:59 +0000</pubDate>
      
      <guid>/post/%E7%BA%A2%E5%8C%85%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid>
      <description>设计目标 一般来说，抢红包场景下，至少要考虑下面几点—— 高性能：主要是为了保证用户体验，即用户能尽快看到结果，尽快把抢到金额加到账户。 高可靠：</description>
    </item>
    
    <item>
      <title>排行榜方案设计</title>
      <link>/post/%E6%8E%92%E8%A1%8C%E6%A6%9C%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 14 Jan 2022 13:58:53 +0000</pubDate>
      
      <guid>/post/%E6%8E%92%E8%A1%8C%E6%A6%9C%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid>
      <description>业务分类 排行榜业务变化多样，从不同的角度思考，是不同的排行榜需求，但总结起来，主要分为以下几类： 实效性 从排行榜的实效性上划分，主要分为： 实时</description>
    </item>
    
    <item>
      <title>短链接方案设计</title>
      <link>/post/%E7%9F%AD%E9%93%BE%E6%8E%A5%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 10 Jan 2022 16:15:25 +0000</pubDate>
      
      <guid>/post/%E7%9F%AD%E9%93%BE%E6%8E%A5%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid>
      <description>短链优点 那么为啥要用短链表示，直接用长链不行吗，用短链的话有如下好外 1、链接变短，在对内容长度有限制的平台发文，可编辑的文字就变多了 最典型的</description>
    </item>
    
    <item>
      <title>服务隔离与多集群设计</title>
      <link>/post/%E6%9C%8D%E5%8A%A1%E9%9A%94%E7%A6%BB%E4%B8%8E%E5%A4%9A%E9%9B%86%E7%BE%A4%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 11 Nov 2021 17:17:35 +0000</pubDate>
      
      <guid>/post/%E6%9C%8D%E5%8A%A1%E9%9A%94%E7%A6%BB%E4%B8%8E%E5%A4%9A%E9%9B%86%E7%BE%A4%E8%AE%BE%E8%AE%A1/</guid>
      <description>隔离 隔离，本质上是对系统或资源进行分割，从而实现当系统发生故障时能限定传播范围和影响范围，即发生故障后只有出问题的服务不可用，保证其他服务仍</description>
    </item>
    
    <item>
      <title>什么是云原生</title>
      <link>/post/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <pubDate>Sat, 18 Sep 2021 18:00:21 +0000</pubDate>
      
      <guid>/post/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F/</guid>
      <description>基本概念 公有云、私有云、混合云 构建可弹性扩展的应用 代表技术:容器、服务网格、微服务、不可变基础设施、声明式 API 容错性好、易于管理、便于观察的松</description>
    </item>
    
    <item>
      <title>如何保证服务的稳定性</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7/</link>
      <pubDate>Sat, 18 Sep 2021 17:08:38 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7/</guid>
      <description>方法论 事前 容量评估: 根据过往情况评估业务系统性能指标、容量指标 国内做的好的某巨头公司(你们应该知道是哪家)，大促期间的系统性能,监控数据都是</description>
    </item>
    
    <item>
      <title>服务发现方案介绍</title>
      <link>/post/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%96%B9%E6%A1%88%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 11 Sep 2021 22:47:11 +0000</pubDate>
      
      <guid>/post/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%96%B9%E6%A1%88%E4%BB%8B%E7%BB%8D/</guid>
      <description>服务端服务发现（server side discovery） 在服务消费者和服务提供者之间有一个独立的LB，通常是专门的硬件设备如 F5，或者基于软件如 L</description>
    </item>
    
    <item>
      <title>全链路灰度方案设计</title>
      <link>/post/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 24 Jul 2021 12:33:14 +0000</pubDate>
      
      <guid>/post/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid>
      <description>流量染色 服务规模越来越大，增加速度越来越快，需求指数性增加，大家都需要一个环境。比如一个集群一千个容器，如果三个小组各开发一个项目，想并行开</description>
    </item>
    
    <item>
      <title>全链路压测方案设计</title>
      <link>/post/%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 24 Jul 2021 11:54:07 +0000</pubDate>
      
      <guid>/post/%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid>
      <description>前言 在阿里淘宝 双 11 的过程中，长期以来都是在生产环节做全链路压测的，通过实践我们发现在生产环境中做压测，实际上会和一个 IT 组织的结构、成熟度、流</description>
    </item>
    
    <item>
      <title>API接口安全设计方案</title>
      <link>/post/api%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 25 May 2021 17:56:41 +0000</pubDate>
      
      <guid>/post/api%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</guid>
      <description>前言 随着Internet网的广泛应用，信息安全问题日益突出，系统间的接口交互，每个请求都有可能被抓取到数据、被伪造请求去获取数据或者攻击服务</description>
    </item>
    
    <item>
      <title>超时、重试和抖动回退</title>
      <link>/post/%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E5%92%8C%E6%8A%96%E5%8A%A8%E5%9B%9E%E9%80%80/</link>
      <pubDate>Mon, 10 May 2021 19:04:17 +0000</pubDate>
      
      <guid>/post/%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E5%92%8C%E6%8A%96%E5%8A%A8%E5%9B%9E%E9%80%80/</guid>
      <description>故障时有发生 每当一个服务或系统调用另一个服务或系统时，都可能会发生故障。造成故障的因素可能多种多样。它们包括服务器、网络、负载均衡器、软件、</description>
    </item>
    
    <item>
      <title>RESTful API设计规范</title>
      <link>/post/restful-api%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 28 Apr 2020 16:13:14 +0000</pubDate>
      
      <guid>/post/restful-api%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</guid>
      <description>理解架构 名称 REST，即Representational State Transfer的缩写。我对这个词组的翻译是&amp;quot;表现层状态转化&amp;quot;</description>
    </item>
    
    <item>
      <title>点赞系统的设计</title>
      <link>/post/%E7%82%B9%E8%B5%9E%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 29 Nov 2019 21:23:47 +0000</pubDate>
      
      <guid>/post/%E7%82%B9%E8%B5%9E%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>概述 点赞功能在很多系统中都有，但别看功能小，想要做好需要考虑的东西还挺多的。 点赞、取消点赞是高频次的操作，若每次都读写数据库，大量的操作会影</description>
    </item>
    
    <item>
      <title>单机定时器的实现方案</title>
      <link>/post/%E5%8D%95%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 20 Oct 2019 16:43:10 +0000</pubDate>
      
      <guid>/post/%E5%8D%95%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</guid>
      <description>理解定时器 很多场景会用到定时器，例如 使用 TCP 长连接时，客户端需要定时向服务端发送心跳请求。 财务系统每个月的月末定时生成对账单。 双 11 的 0 点，定时</description>
    </item>
    
    <item>
      <title>分布式延时任务方案</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 16 Oct 2019 17:02:02 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88/</guid>
      <description>引言 在开发中，往往会遇到一些关于延时任务的需求。例如 生成订单30分钟未支付，则自动取消 生成订单60秒后,给用户发短信 对上述的任务，我们给一个</description>
    </item>
    
    <item>
      <title>乐观锁与悲观锁解析</title>
      <link>/post/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 23 Sep 2019 21:21:58 +0000</pubDate>
      
      <guid>/post/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E8%A7%A3%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式系统的死锁处理</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AD%BB%E9%94%81%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 23 Sep 2019 10:24:33 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AD%BB%E9%94%81%E5%A4%84%E7%90%86/</guid>
      <description>产生死锁的必要条件 互斥使用：进程对其申请的资源进行排他控制，其他申请资源的进程必须等待。 不可剥夺：占用资源的进程只能自己释放资源，不能被其他</description>
    </item>
    
    <item>
      <title>初识分布式系统</title>
      <link>/post/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 20 Sep 2019 15:47:40 +0000</pubDate>
      
      <guid>/post/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</guid>
      <description>集中式系统 在学习分布式之前，先了解一下与之相对应的集中式系统是什么样的。 集中式系统用一句话概括就是：一个主机带多个终端。终端没有数据处理能力</description>
    </item>
    
    <item>
      <title>分布式锁的实现</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 06 Sep 2019 18:02:26 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>为何需要分布式锁 一般我们使用分布式锁有两个场景: 效率:使用分布式锁可以避免不同节点重复相同的工作，这些工作会浪费资源。比如用户付了钱之后有可</description>
    </item>
    
    <item>
      <title>cookie-session机制与JWT机制对比</title>
      <link>/post/cookie-session%E6%9C%BA%E5%88%B6%E4%B8%8Ejwt%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 06 Aug 2019 15:17:51 +0000</pubDate>
      
      <guid>/post/cookie-session%E6%9C%BA%E5%88%B6%E4%B8%8Ejwt%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94/</guid>
      <description>前言 认证和授权，其实吧简单来说就是:认证就是让服务器知道你是谁，授权就是服务器让你知道你什么能干，什么不能干，认证授权俩种方式：Sessio</description>
    </item>
    
    <item>
      <title>分布式ID生成方案简单总结</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 29 Jun 2019 16:59:28 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</guid>
      <description>背景 在我们的业务需求中通常有需要一些唯一的ID，来记录我们某个数据的标识: 某个用户的ID 某个订单的单号 某个信息的ID 通常我们会调研各种各样的</description>
    </item>
    
    <item>
      <title>Go项目如何工程化</title>
      <link>/post/go%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Mon, 03 Jun 2019 13:40:42 +0000</pubDate>
      
      <guid>/post/go%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>MVC代码分层 阿里规范 在阿里的编码规范中约束的分层如下: 开放接口层：可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量</description>
    </item>
    
    <item>
      <title>浅谈数据库并发控制</title>
      <link>/post/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 25 Jun 2017 16:48:51 +0000</pubDate>
      
      <guid>/post/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>概述 如何控制并发是数据库领域中非常重要的问题之一，不过到今天为止事务并发的控制已经有了很多成熟的解决方案，而这些方案的原理就是这篇文章想要介</description>
    </item>
    
  </channel>
</rss>
