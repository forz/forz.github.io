<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Forz Blog</title>
    <link>/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 Nov 2019 21:23:47 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>点赞系统的设计</title>
      <link>/post/%E7%82%B9%E8%B5%9E%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 29 Nov 2019 21:23:47 +0000</pubDate>
      
      <guid>/post/%E7%82%B9%E8%B5%9E%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>概述 点赞功能在很多系统中都有，但别看功能小，想要做好需要考虑的东西还挺多的。 点赞、取消点赞是高频次的操作，若每次都读写数据库，大量的操作会影</description>
    </item>
    
    <item>
      <title>单机限流算法总结</title>
      <link>/post/%E5%8D%95%E6%9C%BA%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 04 Nov 2019 11:51:54 +0000</pubDate>
      
      <guid>/post/%E5%8D%95%E6%9C%BA%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>限流 在开发中我们可能会遇到接口访问频次过高，这时候就需要做流量限制，你可能是用的 Nginx 这种 Web Server 来控制也可能是用了一些流行的类库实现。在分布式系统</description>
    </item>
    
    <item>
      <title>单机定时器的实现方案</title>
      <link>/post/%E5%8D%95%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 20 Oct 2019 16:43:10 +0000</pubDate>
      
      <guid>/post/%E5%8D%95%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</guid>
      <description>理解定时器 很多场景会用到定时器，例如 使用 TCP 长连接时，客户端需要定时向服务端发送心跳请求。 财务系统每个月的月末定时生成对账单。 双 11 的 0 点，定时</description>
    </item>
    
    <item>
      <title>分布式延时任务方案</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 16 Oct 2019 17:02:02 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88/</guid>
      <description>引言 在开发中，往往会遇到一些关于延时任务的需求。例如 生成订单30分钟未支付，则自动取消 生成订单60秒后,给用户发短信 对上述的任务，我们给一</description>
    </item>
    
    <item>
      <title>乐观锁与悲观锁解析</title>
      <link>/post/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 23 Sep 2019 21:21:58 +0000</pubDate>
      
      <guid>/post/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E8%A7%A3%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>事务的隔离机制解析</title>
      <link>/post/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 23 Sep 2019 20:49:41 +0000</pubDate>
      
      <guid>/post/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</guid>
      <description>数据不一致性 并发操作带来的数据不一致性包括丢失修改、不可重复读和读“脏”数据。 产生上述三类数据不一致性的主要原因是并发操作破坏了事务的隔离性</description>
    </item>
    
    <item>
      <title>分布式系统的死锁处理</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AD%BB%E9%94%81%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 23 Sep 2019 10:24:33 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AD%BB%E9%94%81%E5%A4%84%E7%90%86/</guid>
      <description>产生死锁的必要条件 互斥使用：进程对其申请的资源进行排他控制，其他申请资源的进程必须等待。 不可剥夺：占用资源的进程只能自己释放资源，不能被其他</description>
    </item>
    
    <item>
      <title>理解CAP和ACID的一致性</title>
      <link>/post/%E7%90%86%E8%A7%A3cap%E5%92%8Cacid%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Fri, 20 Sep 2019 19:50:25 +0000</pubDate>
      
      <guid>/post/%E7%90%86%E8%A7%A3cap%E5%92%8Cacid%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>ACID和CAP定理中都有C，代表Consistent一致性，很多人容易将这两个C混为一谈，其实这两个一致性是有区别的。这里可以区分成“内部</description>
    </item>
    
    <item>
      <title>ACID理论与BASE理论</title>
      <link>/post/acid%E7%90%86%E8%AE%BA%E4%B8%8Ebase%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 20 Sep 2019 17:22:31 +0000</pubDate>
      
      <guid>/post/acid%E7%90%86%E8%AE%BA%E4%B8%8Ebase%E7%90%86%E8%AE%BA/</guid>
      <description>ACID 事务具有4个特性：原子性（Atomicity)、一致性（Consistency)、隔离性（Isolation)和持续性（Durabilit</description>
    </item>
    
    <item>
      <title>初识分布式系统</title>
      <link>/post/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 20 Sep 2019 15:47:40 +0000</pubDate>
      
      <guid>/post/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</guid>
      <description>集中式系统 在学习分布式之前，先了解一下与之相对应的集中式系统是什么样的。 集中式系统用一句话概括就是：一个主机带多个终端。终端没有数据处理能力</description>
    </item>
    
    <item>
      <title>分布式理论:CAP定理</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA-cap%E5%AE%9A%E7%90%86/</link>
      <pubDate>Thu, 19 Sep 2019 17:18:05 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA-cap%E5%AE%9A%E7%90%86/</guid>
      <description>定义 CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partiti</description>
    </item>
    
    <item>
      <title>分布式锁的实现</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 06 Sep 2019 18:02:26 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>为何需要分布式锁 一般我们使用分布式锁有两个场景: 效率:使用分布式锁可以避免不同节点重复相同的工作，这些工作会浪费资源。比如用户付了钱之后有可</description>
    </item>
    
    <item>
      <title>cookie-session机制与JWT机制对比</title>
      <link>/post/cookie-session%E6%9C%BA%E5%88%B6%E4%B8%8Ejwt%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 06 Aug 2019 15:17:51 +0000</pubDate>
      
      <guid>/post/cookie-session%E6%9C%BA%E5%88%B6%E4%B8%8Ejwt%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94/</guid>
      <description>前言 认证和授权，其实吧简单来说就是:认证就是让服务器知道你是谁，授权就是服务器让你知道你什么能干，什么不能干，认证授权俩种方式：Sessio</description>
    </item>
    
    <item>
      <title>分布式ID生成方案简单总结</title>
      <link>/post/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 29 Jun 2019 16:59:28 +0000</pubDate>
      
      <guid>/post/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</guid>
      <description>背景 在我们的业务需求中通常有需要一些唯一的ID，来记录我们某个数据的标识: 某个用户的ID 某个订单的单号 某个信息的ID 通常我们会调研各种各样的</description>
    </item>
    
    <item>
      <title>优秀的代码都是如何分层的？</title>
      <link>/post/%E4%BC%98%E7%A7%80%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%BD%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%86%E5%B1%82%E7%9A%84/</link>
      <pubDate>Mon, 03 Jun 2019 13:40:42 +0000</pubDate>
      
      <guid>/post/%E4%BC%98%E7%A7%80%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%BD%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%86%E5%B1%82%E7%9A%84/</guid>
      <description>一、背景 说起应用分层，大部分人都会认为这个不是很简单嘛 就controller，service, mapper三层。看起来简单，很多人其实并没有</description>
    </item>
    
    <item>
      <title>浅谈数据库并发控制</title>
      <link>/post/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 25 Jun 2017 16:48:51 +0000</pubDate>
      
      <guid>/post/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>概述 如何控制并发是数据库领域中非常重要的问题之一，不过到今天为止事务并发的控制已经有了很多成熟的解决方案，而这些方案的原理就是这篇文章想要介</description>
    </item>
    
  </channel>
</rss>