<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GoKit on Forz Blog</title>
    <link>/categories/gokit/</link>
    <description>Recent content in GoKit on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 01 Nov 2019 15:50:02 +0000</lastBuildDate>
    
	<atom:link href="/categories/gokit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoKit使用:构建GRPC服务</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BAgrpc%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 01 Nov 2019 15:50:02 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BAgrpc%E6%9C%8D%E5%8A%A1/</guid>
      <description>引言 本文将使用gokit构建一个简单的微服务实例，该服务将以GRPC方式对外暴露接口. 一个Transport的Server 必须要拥有endP</description>
    </item>
    
    <item>
      <title>GoKit使用:链路追踪Zipkin</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/</link>
      <pubDate>Wed, 30 Oct 2019 14:57:53 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/</guid>
      <description>服务端trace 增加trace代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //创建zipkin上报管理器 reporter := http.NewReporter(&amp;#34;http://localhost:9411/api/v2/spans&amp;#34;) //运行结束，关闭上报管理器的f</description>
    </item>
    
    <item>
      <title>GoKit使用:监控功能</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E7%9B%91%E6%8E%A7%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 29 Oct 2019 16:19:40 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E7%9B%91%E6%8E%A7%E5%8A%9F%E8%83%BD/</guid>
      <description>引言 目前，几乎所有的研发人员每天都在跟API打交道：后端为实现业务不停的生产API，前端为实现产品功能不停的调用API。API已经成为前端与</description>
    </item>
    
    <item>
      <title>GoKit使用:熔断与限流</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%90%E6%B5%81/</link>
      <pubDate>Mon, 28 Oct 2019 19:54:31 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%90%E6%B5%81/</guid>
      <description>限流 限流实现 gokit 基于go包 golang.org/x/time/rate 内置了一种实现. 本次实现基于gokit内建的类型endpoint.Middleware，该类型实际上是一个func</description>
    </item>
    
    <item>
      <title>GoKit使用:日志功能</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 28 Oct 2019 17:59:10 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</guid>
      <description>基础日志 Gokit有自身的基础日志模块,配置如下: 1 2 3 4 5 6 var logger log.Logger { logger = log.NewLogfmtLogger(os.Stderr) //错误输出到控制台 logger = log.With(logger, &amp;#34;ts&amp;#34;, log.DefaultTimestampUTC) logger = log.With(logger, &amp;#34;caller&amp;#34;, log.DefaultCaller) } 如果我们想要加入通用日</description>
    </item>
    
    <item>
      <title>GoKit使用:构建REST服务</title>
      <link>/post/gokit%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BArest%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 28 Oct 2019 17:12:19 +0000</pubDate>
      
      <guid>/post/gokit%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BArest%E6%9C%8D%E5%8A%A1/</guid>
      <description>引言 本文利用GoKit构建一个REST服务,并实现服务注册发现与负载均衡. server 创建Service 按照gokit的设计理念，Service将作为</description>
    </item>
    
    <item>
      <title>GoKit源码:服务注册与发现</title>
      <link>/post/gokit%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Mon, 02 Sep 2019 17:43:22 +0000</pubDate>
      
      <guid>/post/gokit%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</guid>
      <description>etcdv3目录结构 1 2 3 4 5 6 7 8 ├── client.go 客户端 ├── doc.go ├── example_test.go ├── instancer.go 服务实例 ├── instancer_test.go ├── integration_test.go ├── registrar.go 注册器 └── registrar_test.go 目录中主要的是这三个</description>
    </item>
    
  </channel>
</rss>