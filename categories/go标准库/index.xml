<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go标准库 on Forz Blog</title>
    <link>/categories/go%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <description>Recent content in Go标准库 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 30 Jan 2020 15:46:41 +0000</lastBuildDate><atom:link href="/categories/go%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go中的testing包解析</title>
      <link>/post/go%E4%B8%AD%E7%9A%84testing%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 30 Jan 2020 15:46:41 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84testing%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>go test 命令参数 Go 测试工具 go test，包括各种子命令、参数之类的内容。你可以通过 go test -h 查看帮助信息。 其基本形式是： 1 go test [build/test flags] [packages] [build/test flags &amp;amp; test binary flags] 执行 go</description>
    </item>
    
    <item>
      <title>Package:httptest(1.13)</title>
      <link>/post/packagehttptest1.13/</link>
      <pubDate>Tue, 28 Jan 2020 18:56:15 +0000</pubDate>
      
      <guid>/post/packagehttptest1.13/</guid>
      <description>Constants DefaultRemoteAddr是默认的远端地址。如果ResponseRecorder未显式的设置该属性，RemoteAddr方法就会返</description>
    </item>
    
    <item>
      <title>package:validator.v9</title>
      <link>/post/packagevalidator.v9/</link>
      <pubDate>Thu, 12 Dec 2019 20:43:20 +0000</pubDate>
      
      <guid>/post/packagevalidator.v9/</guid>
      <description>标准库 package validator import &amp;ldquo;gopkg.in/go-playground/validator.v9&amp;rdquo; Package validator 基于标签对结构和单个字段实现值验证. 它还可以处理嵌套结构的跨字段和跨结构验证，并具有深入研究任何类型的数组和映射的能力。 查</description>
    </item>
    
    <item>
      <title>container包解析(1.13)</title>
      <link>/post/container%E5%8C%85%E8%A7%A3%E6%9E%90-1-13/</link>
      <pubDate>Wed, 23 Oct 2019 18:38:22 +0000</pubDate>
      
      <guid>/post/container%E5%8C%85%E8%A7%A3%E6%9E%90-1-13/</guid>
      <description>heap heap包提供了对任意类型（实现了heap.Interface接口）的堆操作。（最小）堆是具有“每个节点都是以其为根的子树中最小值”属性的</description>
    </item>
    
    <item>
      <title>reflect包解析</title>
      <link>/post/reflect%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 21 Jul 2019 21:41:17 +0000</pubDate>
      
      <guid>/post/reflect%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>func Copy 1 func Copy(dst, src Value) int Copy将src的内容复制到dst，直到dst已填满或src已用完为止。它返回复制的元素数。Dst和src必须具有类型的Sl</description>
    </item>
    
    <item>
      <title>context包解析(1.11)</title>
      <link>/post/context%E5%8C%85%E8%A7%A3%E6%9E%90-1-11/</link>
      <pubDate>Mon, 25 Mar 2019 17:53:14 +0000</pubDate>
      
      <guid>/post/context%E5%8C%85%E8%A7%A3%E6%9E%90-1-11/</guid>
      <description>包context定义了上下文类型，它跨API边界和进程之间承载截止日期、取消信号和其他请求范围的值。 对服务器的传入请求应创建context，</description>
    </item>
    
    <item>
      <title>sort包解析(1.11)</title>
      <link>/post/sort%E5%8C%85%E8%A7%A3%E6%9E%90-1-11/</link>
      <pubDate>Tue, 29 Jan 2019 15:49:44 +0000</pubDate>
      
      <guid>/post/sort%E5%8C%85%E8%A7%A3%E6%9E%90-1-11/</guid>
      <description>func Float64s 1 func Float64s（a [] float64） Float64s按递增顺序对一组切片的float64进行排序（非数值被视为小于其他值）。 1 2 3</description>
    </item>
    
    <item>
      <title>package:sync(1.13)</title>
      <link>/post/packagesync1.13/</link>
      <pubDate>Wed, 09 Jan 2019 20:06:49 +0000</pubDate>
      
      <guid>/post/packagesync1.13/</guid>
      <description>type Cond Cond实现了一个条件变量，一个等待或宣布事件发生的goroutines的集合点。 每个Cond都有一个相关的Locker L（通常是* Mu</description>
    </item>
    
    <item>
      <title>time包解析(1.11)</title>
      <link>/post/time%E5%8C%85%E8%A7%A3%E6%9E%90-1-13/</link>
      <pubDate>Fri, 21 Dec 2018 13:23:32 +0000</pubDate>
      
      <guid>/post/time%E5%8C%85%E8%A7%A3%E6%9E%90-1-13/</guid>
      <description>常量 这些预定义的版式用于Time.Format和Time.Parse函数。用在版式中的参考时间是： 1 Mon Jan 2 15:04:05 MST 2006 对应的Unix时间是1136</description>
    </item>
    
    <item>
      <title>database/sql包解析(1.11)</title>
      <link>/post/database-sql%E5%8C%85%E8%A7%A3%E6%9E%90-1-11/</link>
      <pubDate>Tue, 18 Dec 2018 17:57:32 +0000</pubDate>
      
      <guid>/post/database-sql%E5%8C%85%E8%A7%A3%E6%9E%90-1-11/</guid>
      <description>Variables 对于已经返回到连接池的连接执行的任何操作，都会返回ErrConnDone。 1 var ErrConnDone = errors.New(&amp;#34;sql: connection is already closed&amp;#34;) 当QueryRow方法没有返回一个row时，调</description>
    </item>
    
    <item>
      <title>json包解析</title>
      <link>/post/json%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 23 Nov 2018 16:22:15 +0000</pubDate>
      
      <guid>/post/json%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>func Compact func Compact(dst *bytes.Buffer, src []byte) error 将src删除空格符号,并附加到dst中 func HTMLEscape func HTMLEscape(dst *bytes.Buffer, src []byte) HTMLEscape 函数将json编码的src中的&amp;lt;、&amp;gt;、&amp;amp;、U+20</description>
    </item>
    
    <item>
      <title>strings包解析</title>
      <link>/post/strings%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:45:27 +0000</pubDate>
      
      <guid>/post/strings%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>func EqualFold 1 func EqualFold(s, t string) bool 判断两个utf-8编码字符串（将unicode大写、小写、标题三种格式字符视为相同）是否相同。 1 2 3 4 5 6 7 Example fmt.Println(strings.EqualFold(&amp;#34;Go&amp;#34;, &amp;#34;go&amp;#34;)) Output: true func HasPrefix 1</description>
    </item>
    
    <item>
      <title>strconv包解析</title>
      <link>/post/strconv%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:44:53 +0000</pubDate>
      
      <guid>/post/strconv%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>Constants const IntSize = intSize IntSize是int或uint类型的字位数。 Variables var ErrRange = errors.New(&amp;quot;value out of range&amp;quot;) ErrRange表示超出目标类型表示范围。 var ErrSyntax = errors.New(&amp;quot;invalid syntax&amp;quot;) ErrSynta</description>
    </item>
    
    <item>
      <title>regexp包解析</title>
      <link>/post/regexp%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:41:39 +0000</pubDate>
      
      <guid>/post/regexp%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>正则表达式 正则表达式是一种进行模式匹配和文本操纵的复杂而又强大的工具。虽然正则表达式比纯粹的文本匹配效率低，但是 它却更灵活。按照它的语法规则</description>
    </item>
    
    <item>
      <title>os包解析</title>
      <link>/post/os%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:41:03 +0000</pubDate>
      
      <guid>/post/os%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>概观 Package os为操作系统功能提供了一个平台无关的接口。虽然错误处理类似于 Go，但设计类似 Unix，失败的调用返回类型错误的值而不是错误号。错误中</description>
    </item>
    
    <item>
      <title>os:exec包解析</title>
      <link>/post/os-exec%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:40:11 +0000</pubDate>
      
      <guid>/post/os-exec%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>概观 包 exec 执行外部命令。它包装了 os.StartProcess ，以便重新映射 stdin 和 stdout ，使用管道连接 I/O 并进行其他调整。 与来自 C 和其他语言的“系统”库调用不同，os/exec 包</description>
    </item>
    
    <item>
      <title>package:url(1.13)</title>
      <link>/post/packageurl1.13/</link>
      <pubDate>Thu, 15 Nov 2018 18:38:36 +0000</pubDate>
      
      <guid>/post/packageurl1.13/</guid>
      <description>func PathEscape 1 func PathEscape(s string) string PathEscape转义字符串，以便可以安全地放置在URL路径段中。 根据需要用％XX序列替换特殊字符（包括/） func PathUnescape 1 func PathUnescape(s string) (string, error)</description>
    </item>
    
    <item>
      <title>multipart包解析</title>
      <link>/post/multipart%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:37:14 +0000</pubDate>
      
      <guid>/post/multipart%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>type File 1 2 3 4 5 6 type File interface { io.Reader io.ReaderAt io.Seeker io.Closer } File是一个接口，实现了对一个multipart信息中文件记录的访问。它的内容可以保持在内存或者硬盘中，</description>
    </item>
    
    <item>
      <title>io包解析</title>
      <link>/post/io%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:32:33 +0000</pubDate>
      
      <guid>/post/io%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>Variables var EOF = errors.New(&amp;quot;EOF&amp;quot;) EOF当无法得到更多输入时，Read方法返回EOF。当函数一切正常的到达输入的结束时，就应返回EOF。如果在一个结构化数据流中EO</description>
    </item>
    
    <item>
      <title>ioutil包解析</title>
      <link>/post/ioutil%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:31:51 +0000</pubDate>
      
      <guid>/post/ioutil%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>Variables var Discard io.Writer = devNull(0) Discard是一个io.Writer接口，对它的所有Write调用都会无实际操作的成功返回。 func NopCloser func NopCloser(r io.Reader) io.ReadCloser NopCloser用一</description>
    </item>
    
    <item>
      <title>http包解析</title>
      <link>/post/http%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:28:57 +0000</pubDate>
      
      <guid>/post/http%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>预设值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const ( StatusContinue = 100 StatusSwitchingProtocols = 101 StatusOK = 200 StatusCreated = 201 StatusAccepted = 202 StatusNonAuthoritativeInfo = 203 StatusNoContent = 204 StatusResetContent</description>
    </item>
    
    <item>
      <title>fmt包解析</title>
      <link>/post/fmt%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:15:52 +0000</pubDate>
      
      <guid>/post/fmt%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>Printing verb： 通用： 1 2 3 4 5 %v 值的默认格式表示 %+v 类似%v，但输出结构体时会添加字段名 %#v 值的Go语法表示 %T 值的类型的Go语法表示 %% 百分号 布尔值</description>
    </item>
    
    <item>
      <title>bufio包解析</title>
      <link>/post/bufio%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 15 Nov 2018 18:12:08 +0000</pubDate>
      
      <guid>/post/bufio%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
      <description>Constants 1 2 3 4 const ( // 用于缓冲一个token，实际需要的最大token尺寸可能小一些，例如缓冲中需要保存一整行内容 MaxScanTokenSize = 64 * 1024 ) Variables 1 2 3 4 5 6 var ( ErrInvalidUnreadByte</description>
    </item>
    
  </channel>
</rss>
