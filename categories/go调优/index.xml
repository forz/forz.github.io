<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go调优 on Forz Blog</title>
    <link>/categories/go%E8%B0%83%E4%BC%98/</link>
    <description>Recent content in Go调优 on Forz Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 30 Jan 2020 21:54:05 +0000</lastBuildDate>
    
	<atom:link href="/categories/go%E8%B0%83%E4%BC%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go性能分析:pprof</title>
      <link>/post/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90pprof/</link>
      <pubDate>Thu, 30 Jan 2020 21:54:05 +0000</pubDate>
      
      <guid>/post/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90pprof/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go的编译优化:内联与死码消除</title>
      <link>/post/go%E7%9A%84%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E5%86%85%E8%81%94%E4%B8%8E%E6%AD%BB%E7%A0%81%E6%B6%88%E9%99%A4/</link>
      <pubDate>Thu, 30 Jan 2020 16:33:02 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E5%86%85%E8%81%94%E4%B8%8E%E6%AD%BB%E7%A0%81%E6%B6%88%E9%99%A4/</guid>
      <description>内联 在 Go 中，函数调用有固定的开销；栈和抢占检查。 硬件分支预测器改善了其中的一些功能，但就功能大小和时钟周期而言，这仍然是一个成本。 内联是避免</description>
    </item>
    
    <item>
      <title>Go中的基准测试</title>
      <link>/post/go%E4%B8%AD%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 30 Jan 2020 15:46:41 +0000</pubDate>
      
      <guid>/post/go%E4%B8%AD%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>基准测试的基本规则 在进行基准测试之前，我们必须要有一个稳定的环境来获得可重现的结果。 机器必须是空闲的——不要运行在共享硬件上，在长时间运行基</description>
    </item>
    
    <item>
      <title>Go的编译优化:逃逸分析</title>
      <link>/post/go%E7%9A%84%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 21 Dec 2018 14:54:40 +0000</pubDate>
      
      <guid>/post/go%E7%9A%84%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>变量的生命周期 生命周期是指程序执行过程中变量存在的时间段。下面我们分别来看看包变量（全局变量）和局部变量两种变量的生命周期。 包变量一直常驻在</description>
    </item>
    
  </channel>
</rss>